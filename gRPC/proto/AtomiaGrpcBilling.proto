syntax = "proto3";
package AtomiaGrpcBilling;
option csharp_namespace = "Atomia.Grpc.Billing";

// Common data types

/**
 * A protobuf implementation of the C# Guid type.
 */
message Guid {
	string value = 1; /// The value should be formatted like a Guid, e.g. 0f8fad5b-d9cb-469f-a165-70867728950e
}

/**
 * A protobuf implementation of the C# decimal type.
 */
message Decimal {
	float value = 1; /// The value of the decimal.
}

/**
 * A protobuf implementation of the C# TimeSpan type.
 */
message TimeSpan {
	double value = 1; /// The value of the TimeSpan.
}

/**
 * A protobuf implementation of the C# string[] type.
 */
message StrArr {
	repeated string values = 1; /// An array of strings, the C# equivalent would be string[] { "foo", "bar" };
}

/**
 * A protobuf implementation of the C# KeyValuePair<Guid, string> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Dictionary<Guid, string> C# type.
 */
message GuidStrDict {
	Guid key = 1;
	string value = 2;
}

/**
 * A protobuf implementation of the C# KeyValuePair<Guid, int> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Dictionary<Guid, int> C# type.
 */
message GuidInt32Dict {
	Guid key = 1;
	int32 value = 2;
}

/**
 * A protobuf implementation of the C# KeyValuePair<Guid, bool> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Dictionary<Guid, bool> C# type.
 */
message GuidBoolDict {
	Guid key = 1;
	bool value = 2;
}

/**
 * A protobuf implementation of the C# KeyValuePair<string, string[]> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Dictionary<string, string[]> C# type.
 */
message StrStrArrDict {
	string key = 1;
	repeated string values = 2;
}

/**
 * A protobuf implementation of the C# Tuple<Guid, Guid> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Tuple<Guid, Guid> C# type.
 */
message GuidGuidTuple {
	Guid item1 = 1;
	Guid item2 = 2;
}

/**
 * A unix time implementation. All DateTime objects in C# will be converted into this.
 */
message UnixTime {
	uint64 time = 1;
}

/**
 * A protobuf implementation of the C# bool? type.
 */
message NullableBool {
	bool value = 1;
}

/**
 * A protobuf implementation of the C# Guid? type.
 */
message NullableGuid {
	Guid value = 1;
}

/**
 * A protobuf implementation of the C# int? type.
 */
message NullableInt32 {
	int32 value = 1;
}

/**
 * A nullable unix time implementation.
 */
message NullableUnixTime {
	UnixTime value = 1;
}

// Api methods
service AtomiaGrpcBilling {
	/// Echoes the specified message.
	rpc Echo (EchoRequest) returns (EchoReply) {}

	/// Gets the address of an entity defined by an identifier (e.g. social security number).
	rpc GetAddressInfo (GetAddressInfoRequest) returns (GetAddressInfoReply) {}

	/// Sends the mail.
	rpc SendEmail (SendEmailRequest) returns (SendMailReply) {}

	/// Sends email to main address of customer account with template
	rpc SendMailToAccountOwner (SendMailToAccountOwnerRequest) returns (SendMailToAccountOwnerReply) {}

	/// Checks if email exists in system.
	rpc ResellerCheckEmail (ResellerCheckEmailRequest) returns (ResellerCheckEmailReply) {}

	/// Checks if email exists in system.
	rpc CheckEmail (CheckEmailRequest) returns (CheckEmailReply) {}

	/// Gets the customer packages by customer email.
	rpc ResellerGetCustomerPackagesByEmail (ResellerGetCustomerPackagesByEmailRequest) returns (ResellerGetCustomerPackagesByEmailReply) {}

	/// Gets the customer packages by customer email.
	rpc GetCustomerPackagesByEmail (GetCustomerPackagesByEmailRequest) returns (GetCustomerPackagesByEmailReply) {}

	/// Adds the template for the specified user and related to specific language.
	rpc AddTemplate (AddTemplateRequest) returns (AddTemplateReply) {}

	/// Updates the template.
	rpc UpdateTemplate (UpdateTemplateRequest) returns (UpdateTemplateReply) {}

	/// Deletes the template with the specified id.
	rpc DeleteTemplate (DeleteTemplateRequest) returns (DeleteTemplateReply) {}

	/// Gets the templates for account specified with its id.
	rpc GetTemplates (GetTemplatesRequest) returns (GetTemplatesReply) {}

	/// Gets the template by its name.
	rpc GetTemplate (GetTemplateRequest) returns (GetTemplateReply) {}

	/// Searches templates.
	rpc SearchTemplates (SearchTemplatesRequest) returns (SearchTemplatesReply) {}

	/// Previews a template.
	rpc PreviewTemplate (PreviewTemplateRequest) returns (PreviewTemplateReply) {}

	/// Get templates for export.
	rpc GetTemplatesForExport (GetTemplatesForExportRequest) returns (GetTemplatesForExportReply) {}

	/// Adds account details.
	rpc AddAccountDetails (AddAccountDetailsRequest) returns (AddAccountDetailsReply) {}

	/// Terminates the account.
	rpc TerminateAccount (TerminateAccountRequest) returns (TerminateAccountReply) {}

	/// Terminates the account which has termination request.
	rpc TerminateAccountAfterRequest (TerminateAccountAfterRequestRequest) returns (TerminateAccountAfterRequestReply) {}

	/// Changes status of accounts.
	rpc ChangeAccountStatus (ChangeAccountStatusRequest) returns (ChangeAccountStatusReply) {}

	/// Updates the account details.
	rpc UpdateAccountDetails (UpdateAccountDetailsRequest) returns (UpdateAccountDetailsReply) {}

	/// Updates account's addresses.
	rpc UpdateAccountAddresses (UpdateAccountAddressesRequest) returns (UpdateAccountAddressesReply) {}

	/// Gets the account details for account specified with its id.
	rpc GetAccountDetails (GetAccountDetailsRequest) returns (GetAccountDetailsReply) {}

	/// Gets the account details by hash.
	rpc GetAccountDetailsByHash (GetAccountDetailsByHashRequest) returns (GetAccountDetailsByHashReply) {}

	/// Gets the account details for the accounts specified in the account ids array.
	rpc GetAccountDetailsForAccounts (GetAccountDetailsForAccountsRequest) returns (GetAccountDetailsForAccountsReply) {}

	/// Retrieves the possible strings allowed in the ReceiveInvoiceVia property of the AccountDetails class.
	rpc GetAvailableInvoiceVias (GetAvailableInvoiceViasRequest) returns (GetAvailableInvoiceViasReply) {}

	/// Creates the customer.
	rpc ResellerCreateCustomer (ResellerCreateCustomerRequest) returns (ResellerCreateCustomerReply) {}

	/// Creates the customer.
	rpc CreateCustomer (CreateCustomerRequest) returns (CreateCustomerReply) {}

	/// Checks if customer can create new account.
	rpc CanCreateAccount (CanCreateAccountRequest) returns (CanCreateAccountReply) {}

	/// Gets main subscription of given account or null if subscription is not found.
	rpc GetMainSubscription (GetMainSubscriptionRequest) returns (GetMainSubscriptionReply) {}

	/// Lists all possible origins of termination requests.
	rpc ListTerminationOrigins (ListTerminationOriginsRequest) returns (ListTerminationOriginsReply) {}

	/// Schedules account termination for customers.
	rpc CreateTerminateAccountRequests (CreateTerminateAccountRequestsRequest) returns (CreateTerminateAccountRequestsReply) {}

	/// Reactivates accounts.
	rpc ReactivateAccounts (ReactivateAccountsRequest) returns (ReactivateAccountsReply) {}

	/// Checks if reactivation is possible for customers with given ids.
	rpc IsPossibleToReactivate (IsPossibleToReactivateRequest) returns (IsPossibleToReactivateReply) {}

	/// Checks if customer's account is pending termination.
	rpc IsPendingTermination (IsPendingTerminationRequest) returns (IsPendingTerminationReply) {}

	/// Determines whether customer is over maximum debt.
	rpc IsOverMaxDebt (IsOverMaxDebtRequest) returns (IsOverMaxDebtReply) {}

	/// Checks whether customer accounts are pending termination.
	rpc IsPendingTerminationBulk (IsPendingTerminationBulkRequest) returns (IsPendingTerminationBulkReply) {}

	/// Gets pending termination request for customer with given account id.
	rpc GetPendingTerminationRequest (GetPendingTerminationRequestRequest) returns (GetPendingTerminationRequestReply) {}

	/// Gets the account for user.
	rpc ResellerGetAccountForUser (ResellerGetAccountForUserRequest) returns (ResellerGetAccountForUserReply) {}

	/// Gets the account for user.
	rpc GetAccountForUser (GetAccountForUserRequest) returns (GetAccountForUserReply) {}

	/// Gets the account to which user with the specified username belongs and fills user's details.
	rpc ResellerGetAccountForUserWithDetails (ResellerGetAccountForUserWithDetailsRequest) returns (ResellerGetAccountForUserWithDetailsReply) {}

	/// Gets the account to wich user with the specified username belongs and fills user's details.
	rpc GetAccountForUserWithDetails (GetAccountForUserWithDetailsRequest) returns (GetAccountForUserWithDetailsReply) {}

	/// Gets the account by id.
	rpc GetAccountById (GetAccountByIdRequest) returns (GetAccountByIdReply) {}

	/// Gets the account by name.
	rpc GetAccountByName (GetAccountByNameRequest) returns (GetAccountByNameReply) {}

	/// Gets the language by code.
	rpc GetLanguageByCode (GetLanguageByCodeRequest) returns (GetLanguageByCodeReply) {}

	/// Searches in sub accounts (only one level).
	rpc SearchSubAccounts (SearchSubAccountsRequest) returns (SearchSubAccountsReply) {}

	/// Searches in sub accounts (only one level) and extra accounts.
	rpc ResellerSearchManagableAccounts (ResellerSearchManagableAccountsRequest) returns (ResellerSearchManagableAccountsReply) {}

	/// Gets the theme customization.
	rpc GetThemeCustomization (GetThemeCustomizationRequest) returns (GetThemeCustomizationReply) {}

	/// Lists the resellers with custom prices.
	rpc ListResellersWithCustomPrices (ListResellersWithCustomPricesRequest) returns (ListResellersWithCustomPricesReply) {}

	/// Searches the account details.
	rpc SearchAccountDetails (SearchAccountDetailsRequest) returns (SearchAccountDetailsReply) {}

	/// Adds an entry to the login table.
	rpc ResellerAddExtraUsernameAccount (ResellerAddExtraUsernameAccountRequest) returns (ResellerAddExtraUsernameAccountReply) {}

	/// Removes an entry from the login table.
	rpc ResellerRemoveExtraUsernameAccount (ResellerRemoveExtraUsernameAccountRequest) returns (ResellerRemoveExtraUsernameAccountReply) {}

	/// Lists all logins for the username where the IsOwnAccount is set to false.
	rpc ResellerGetExtraUsernameAccounts (ResellerGetExtraUsernameAccountsRequest) returns (ResellerGetExtraUsernameAccountsReply) {}

	/// Checks if the account id is an extra account for the username.
	rpc ResellerHasExtraUsernameAccount (ResellerHasExtraUsernameAccountRequest) returns (ResellerHasExtraUsernameAccountReply) {}

	/// Gets the available payment methods for given account.
	rpc GetPaymentMethods (GetPaymentMethodsRequest) returns (GetPaymentMethodsReply) {}

	/// Gets all available payment methods in an environment.
	rpc GetAllPaymentMethods (GetAllPaymentMethodsRequest) returns (GetAllPaymentMethodsReply) {}

	/// Gets the default payment method for given account.
	rpc GetDefaultPaymentMethod (GetDefaultPaymentMethodRequest) returns (GetDefaultPaymentMethodReply) {}

	/// Creates a one time login token for the user.
	rpc ResellerCreatetOneTimeLoginToken (ResellerCreatetOneTimeLoginTokenRequest) returns (ResellerCreatetOneTimeLoginTokenReply) {}

	/// Creates the invoice.
	rpc CreateInvoice (CreateInvoiceRequest) returns (CreateInvoiceReply) {}

	/// Creates the invoice from order.
	rpc CreateInvoiceFromOrder (CreateInvoiceFromOrderRequest) returns (CreateInvoiceFromOrderReply) {}

	/// Gets the invoices.
	rpc GetInvoices (GetInvoicesRequest) returns (GetInvoicesReply) {}

	/// Gets the invoices for autocredit.
	rpc ListInvoicesForAutocredit (ListInvoicesForAutocreditRequest) returns (ListInvoicesForAutocreditReply) {}

	/// Gets the invoice by id.
	rpc GetInvoiceById (GetInvoiceByIdRequest) returns (GetInvoiceByIdReply) {}

	/// Gets the invoice by its number for account specified with username.
	rpc ResellerGetInvoiceByNo (ResellerGetInvoiceByNoRequest) returns (ResellerGetInvoiceByNoReply) {}

	/// Gets the invoice by its number for account specified with username.
	rpc GetInvoiceByNo (GetInvoiceByNoRequest) returns (GetInvoiceByNoReply) {}

	/// Gets the paid amount for invoice for a given number and username.
	rpc ResellerGetPaidAmount (ResellerGetPaidAmountRequest) returns (ResellerGetPaidAmountReply) {}

	/// Gets the paid amount for invoice for a given number and username.
	rpc GetPaidAmount (GetPaidAmountRequest) returns (GetPaidAmountReply) {}

	/// Gets the receipt info.
	rpc GetReceiptInfo (GetReceiptInfoRequest) returns (GetReceiptInfoReply) {}

	/// Updates the invoice.
	rpc UpdateInvoice (UpdateInvoiceRequest) returns (UpdateInvoiceReply) {}

	/// Gets the invoice overview.
	rpc GetInvoiceOverview (GetInvoiceOverviewRequest) returns (GetInvoiceOverviewReply) {}

	/// Deletes the invoice.
	rpc DeleteInvoice (DeleteInvoiceRequest) returns (DeleteInvoiceReply) {}

	/// Prints the invoices to file.
	rpc PrintInvoices (PrintInvoicesRequest) returns (PrintInvoicesReply) {}

	/// Prints the invoices to file.
	rpc PrintInvoicesWithPrintOption (PrintInvoicesWithPrintOptionRequest) returns (PrintInvoicesWithPrintOptionReply) {}

	/// Prints the receipts to file.
	rpc PrintReceiptsWithPrintOption (PrintReceiptsWithPrintOptionRequest) returns (PrintReceiptsWithPrintOptionReply) {}

	/// Sends the invoices.
	rpc SendInvoices (SendInvoicesRequest) returns (SendInvoicesReply) {}

	/// Checks the invoice sending order.
	rpc CheckInvoiceOrder (CheckInvoiceOrderRequest) returns (CheckInvoiceOrderReply) {}

	/// Fires OnInvoiceSend event to check invoice sending order.
	rpc CheckInvoiceSendingOrder (CheckInvoiceSendingOrderRequest) returns (CheckInvoiceSendingOrderReply) {}

	/// Creates BulkSendJob for printing and sending selected invoices.
	rpc BulkPrintAndSendInvoices (BulkPrintAndSendInvoicesRequest) returns (BulkPrintAndSendInvoicesReply) {}

	/// Creates BulkSendJob for printing selected invoices.
	rpc BulkPrintInvoices (BulkPrintInvoicesRequest) returns (BulkPrintInvoicesReply) {}

	/// Creates BulkSendJob for sending selected invoices.
	rpc BulkSendInvoices (BulkSendInvoicesRequest) returns (BulkSendInvoicesReply) {}

	/// Creates BulkSendJob for printing selected invoices.
	rpc BulkPrintInvoicesSynchronous (BulkPrintInvoicesSynchronousRequest) returns (BulkPrintInvoicesSynchronousReply) {}

	/// Creates BulkSendJob for sending selected invoices.
	rpc BulkSendInvoicesSynchronous (BulkSendInvoicesSynchronousRequest) returns (BulkSendInvoicesSynchronousReply) {}

	/// Lists unpaid invoices that should be payed before termination.
	rpc ListUnpaidInvoices (ListUnpaidInvoicesRequest) returns (ListUnpaidInvoicesReply) {}

	/// Returns object that encapsulates data needed to print financial obligation notice.
	rpc GetFinancialObligation (GetFinancialObligationRequest) returns (GetFinancialObligationReply) {}

	/// Gets next invoice date for customer.
	rpc GetNextPostpaidInvoiceDate (GetNextPostpaidInvoiceDateRequest) returns (GetNextPostpaidInvoiceDateReply) {}

	/// Determines whether payment for given invoice is possible.
	rpc IsPaymentPossible (IsPaymentPossibleRequest) returns (IsPaymentPossibleReply) {}

	/// Gets the next invoice reminder.
	rpc GetNextInvoiceReminder (GetNextInvoiceReminderRequest) returns (GetNextInvoiceReminderReply) {}

	/// Persists the credited invoice.
	rpc CreateCreditedInvoice (CreateCreditedInvoiceRequest) returns (CreateCreditedInvoiceReply) {}

	/// Creates the credited invoice from invoice.
	rpc CreateCreditedInvoiceFromInvoice (CreateCreditedInvoiceFromInvoiceRequest) returns (CreateCreditedInvoiceFromInvoiceReply) {}

	/// Gets the credited invoices.
	rpc GetCreditedInvoices (GetCreditedInvoicesRequest) returns (GetCreditedInvoicesReply) {}

	/// Gets the credited invoices of invoice.
	rpc GetCreditedInvoicesOfInvoice (GetCreditedInvoicesOfInvoiceRequest) returns (GetCreditedInvoicesOfInvoiceReply) {}

	/// Gets the credited invoice by id.
	rpc GetCreditedInvoiceById (GetCreditedInvoiceByIdRequest) returns (GetCreditedInvoiceByIdReply) {}

	/// Gets the credited invoice by number.
	rpc GetCreditedInvoiceByNo (GetCreditedInvoiceByNoRequest) returns (GetCreditedInvoiceByNoReply) {}

	/// Updates the credited invoice.
	rpc UpdateCreditedInvoice (UpdateCreditedInvoiceRequest) returns (UpdateCreditedInvoiceReply) {}

	/// Calculates the credited invoice totals.
	rpc CalculateCreditedInvoiceTotals (CalculateCreditedInvoiceTotalsRequest) returns (CalculateCreditedInvoiceTotalsReply) {}

	/// Sends the credited invoices.
	rpc SendCreditedInvoices (SendCreditedInvoicesRequest) returns (SendCreditedInvoicesReply) {}

	/// Prints the credited invoices.
	rpc PrintCreditedInvoices (PrintCreditedInvoicesRequest) returns (PrintCreditedInvoicesReply) {}

	/// Prints the credited invoices.
	rpc PrintCreditedInvoicesWithPrintOption (PrintCreditedInvoicesWithPrintOptionRequest) returns (PrintCreditedInvoicesWithPrintOptionReply) {}

	/// Partially credits invoice.
	rpc CreatePartiallyCreditedInvoice (CreatePartiallyCreditedInvoiceRequest) returns (CreatePartiallyCreditedInvoiceReply) {}

	/// Persists bulk job.
	rpc CreateJob (CreateJobRequest) returns (CreateJobReply) {}

	/// Gets the bulk send job by id.
	rpc GetBulkSendJobById (GetBulkSendJobByIdRequest) returns (GetBulkSendJobByIdReply) {}

	/// Updates the bulk send status.
	rpc UpdateBulkSendStatus (UpdateBulkSendStatusRequest) returns (UpdateBulkSendStatusReply) {}

	/// Gets bulk send status by external id.
	rpc GetBulkSendStatusByExternalId (GetBulkSendStatusByExternalIdRequest) returns (GetBulkSendStatusByExternalIdReply) {}

	/// Updates bulk send job.
	rpc UpdateBulkSendJob (UpdateBulkSendJobRequest) returns (UpdateBulkSendJobReply) {}

	/// Get bulk send status by id.
	rpc GetBulkSendStatusById (GetBulkSendStatusByIdRequest) returns (GetBulkSendStatusByIdReply) {}

	/// Search bulk send statuses.
	rpc SearchBulkSendStatuses (SearchBulkSendStatusesRequest) returns (SearchBulkSendStatusesReply) {}

	/// List bulk send statuses for customer
	rpc ListBulkSendStatusesForCustomer (ListBulkSendStatusesForCustomerRequest) returns (ListBulkSendStatusesForCustomerReply) {}

	/// Creates the order.
	rpc CreateOrder (CreateOrderRequest) returns (CreateOrderReply) {}

	/// Creates the order with small set of data - only item ids and quantities.
	rpc MakeOrder (MakeOrderRequest) returns (MakeOrderReply) {}

	/// Creates the order with small set of data - only item ids and quantities and creates a one time login token.
	rpc MakeOrderWithLoginToken (MakeOrderWithLoginTokenRequest) returns (MakeOrderWithLoginTokenReply) {}

	/// Gets the orders.
	rpc GetOrders (GetOrdersRequest) returns (GetOrdersReply) {}

	/// Gets the order by id.
	rpc GetOrderById (GetOrderByIdRequest) returns (GetOrderByIdReply) {}

	/// Gets the order by number.
	rpc GetOrderByNumber (GetOrderByNumberRequest) returns (GetOrderByNumberReply) {}

	/// Gets the orders by invoice number.
	rpc GetOrdersByInvoiceNumber (GetOrdersByInvoiceNumberRequest) returns (GetOrdersByInvoiceNumberReply) {}

	/// Gets the order status of an order.
	rpc GetOrderStatus (GetOrderStatusRequest) returns (GetOrderStatusReply) {}

	/// Updates the order.
	rpc UpdateOrder (UpdateOrderRequest) returns (UpdateOrderReply) {}

	/// Changes the orders statuses.
	rpc ChangeOrderStatus (ChangeOrderStatusRequest) returns (ChangeOrderStatusReply) {}

	/// Processes the public order.
	rpc ProcessPublicOrder (ProcessPublicOrderRequest) returns (ProcessPublicOrderReply) {}

	/// Calculates the order totals.
	rpc CalculateTotals (CalculateTotalsRequest) returns (CalculateTotalsReply) {}

	/// Processes the order.
	rpc ProcessOrder (ProcessOrderRequest) returns (ProcessOrderReply) {}

	/// Gets domains statuses from existing orders.
	rpc CheckDomains (CheckDomainsRequest) returns (CheckDomainsReply) {}

	/// Gets transfered domains statuses from existing subscriptions.
	rpc CheckDomainsForTransfer (CheckDomainsForTransferRequest) returns (CheckDomainsForTransferReply) {}

	/// Creates the subscription.
	rpc CreateSubscription (CreateSubscriptionRequest) returns (CreateSubscriptionReply) {}

	/// Creates multiple subscriptions in one transaction.
	rpc CreateSubscriptions (CreateSubscriptionsRequest) returns (CreateSubscriptionsReply) {}

	/// Updates the subscription.
	rpc UpdateSubscription (UpdateSubscriptionRequest) returns (UpdateSubscriptionReply) {}

	/// Updates the subscription renewal data.
	rpc UpdateSubscriptionRenewalData (UpdateSubscriptionRenewalDataRequest) returns (UpdateSubscriptionRenewalDataReply) {}

	/// Gets the subscriptions.
	rpc GetSubscriptions (GetSubscriptionsRequest) returns (GetSubscriptionsReply) {}

	/// Gets the subscriptions for customer.
	rpc GetSubscriptionsForCustomer (GetSubscriptionsForCustomerRequest) returns (GetSubscriptionsForCustomerReply) {}

	/// Gets the package subscriptions for customer.
	rpc GetPackageSubscriptions (GetPackageSubscriptionsRequest) returns (GetPackageSubscriptionsReply) {}

	/// Gets the subscription by id.
	rpc GetSubscriptionById (GetSubscriptionByIdRequest) returns (GetSubscriptionByIdReply) {}

	/// Gets the subscriptions by ids for language with ISO code
	rpc GetSubscriptionsByIdsAndLanguage (GetSubscriptionsByIdsAndLanguageRequest) returns (GetSubscriptionsByIdsAndLanguageReply) {}

	/// Gets the subscription by friendly id.
	rpc GetSubscriptionByFriendlyId (GetSubscriptionByFriendlyIdRequest) returns (GetSubscriptionByFriendlyIdReply) {}

	/// Gets the subscriptions by friendly identifier.
	rpc GetSubscriptionsByFriendlyId (GetSubscriptionsByFriendlyIdRequest) returns (GetSubscriptionsByFriendlyIdReply) {}

	/// Gets the subscriptions for renewal period.
	rpc GetSubscriptionsForRenewalPeriod (GetSubscriptionsForRenewalPeriodRequest) returns (GetSubscriptionsForRenewalPeriodReply) {}

	/// Terminates the subscription.
	rpc TerminateSubscription (TerminateSubscriptionRequest) returns (TerminateSubscriptionReply) {}

	/// Provisions all subscriptions pending provisioning.
	rpc ProvisionSubscriptions (ProvisionSubscriptionsRequest) returns (ProvisionSubscriptionsReply) {}

	/// Provisions all subscriptions pending provisioning.
	rpc ProvisionSubscriptionsWithStateFilter (ProvisionSubscriptionsWithStateFilterRequest) returns (ProvisionSubscriptionsWithStateFilterReply) {}

	/// Provisions the subscription.
	rpc ProvisionSubscription (ProvisionSubscriptionRequest) returns (ProvisionSubscriptionReply) {}

	/// Counts subscriptions of specified type for customer.
	rpc CountSubscriptionsByType (CountSubscriptionsByTypeRequest) returns (CountSubscriptionsByTypeReply) {}

	/// Counts subscriptions of specified types and states for customer.
	rpc CountSubscriptionsByTypesAndStatuses (CountSubscriptionsByTypesAndStatusesRequest) returns (CountSubscriptionsByTypesAndStatusesReply) {}

	/// Searches the subscriptions.
	rpc SearchSubscriptions (SearchSubscriptionsRequest) returns (SearchSubscriptionsReply) {}

	/// Gets the possible states.
	rpc GetPossibleStates (GetPossibleStatesRequest) returns (GetPossibleStatesReply) {}

	/// Gets all possible states.
	rpc GetPossibleStateRules (GetPossibleStateRulesRequest) returns (GetPossibleStateRulesReply) {}

	/// Searches sheduled tasks (tasks to run).
	rpc SearchTasksToRun (SearchTasksToRunRequest) returns (SearchTasksToRunReply) {}

	/// Gets an overview of all tasks to run in the system.
	rpc GetTasksToRunOverview (GetTasksToRunOverviewRequest) returns (GetTasksToRunOverviewReply) {}

	/// Gets the number of tasks that can be updated (approved).
	rpc GetNumTasksPossibleToUpdate (GetNumTasksPossibleToUpdateRequest) returns (GetNumTasksPossibleToUpdateReply) {}

	/// Changes tasks status to new status.
	rpc ChangeTasksToRunStatus (ChangeTasksToRunStatusRequest) returns (ChangeTasksToRunStatusReply) {}

	/// Changes the subscription status.
	rpc ChangeSubscriptionStatus (ChangeSubscriptionStatusRequest) returns (ChangeSubscriptionStatusReply) {}

	/// Determines whether [is possible state] [the specified current state].
	rpc IsPossibleState (IsPossibleStateRequest) returns (IsPossibleStateReply) {}

	/// Binds the subscriptions to invoice.
	rpc BindSubscriptionsToInvoice (BindSubscriptionsToInvoiceRequest) returns (BindSubscriptionsToInvoiceReply) {}

	/// Checks if invoice exists.
	rpc InvoiceExists (InvoiceExistsRequest) returns (InvoiceExistsReply) {}

	/// Determines whether [is subscription termination possible] [the specified subscription id].
	rpc IsSubscriptionTerminationPossible (IsSubscriptionTerminationPossibleRequest) returns (IsSubscriptionTerminationPossibleReply) {}

	/// For each given account id, gets a list of status to which that account can be transfered.
	rpc GetAccountsAllowedStatuses (GetAccountsAllowedStatusesRequest) returns (GetAccountsAllowedStatusesReply) {}

	/// Gets the domain transfer status.
	rpc GetDomainTransferStatus (GetDomainTransferStatusRequest) returns (GetDomainTransferStatusReply) {}

	/// Resets the provisioning status.
	rpc ResetProvisioningStatus (ResetProvisioningStatusRequest) returns (ResetProvisioningStatusReply) {}

	/// Extends the subscription.
	rpc ExtendSubscription (ExtendSubscriptionRequest) returns (ExtendSubscriptionReply) {}

	/// Changes the subscription product.
	rpc ChangeSubscriptionProduct (ChangeSubscriptionProductRequest) returns (ChangeSubscriptionProductReply) {}

	/// Gets the domains reg status local.
	rpc GetDomainsRegStatusLocal (GetDomainsRegStatusLocalRequest) returns (GetDomainsRegStatusLocalReply) {}

	/// Check if quantity can be changed.
	rpc IsQtyChangePossible (IsQtyChangePossibleRequest) returns (IsQtyChangePossibleReply) {}

	/// Get provisioning actions for subscriptions.
	rpc GetProvisioningActionsForSubscriptions (GetProvisioningActionsForSubscriptionsRequest) returns (GetProvisioningActionsForSubscriptionsReply) {}

	/// Lists the pending subscription termination requests.
	rpc ListPendingSubscriptionTerminationRequests (ListPendingSubscriptionTerminationRequestsRequest) returns (ListPendingSubscriptionTerminationRequestsReply) {}

	/// Creates the currency.
	rpc CreateCurrency (CreateCurrencyRequest) returns (CreateCurrencyReply) {}

	/// Updates the currency.
	rpc UpdateCurrency (UpdateCurrencyRequest) returns (UpdateCurrencyReply) {}

	/// Gets the currencies.
	rpc GetCurrencies (GetCurrenciesRequest) returns (GetCurrenciesReply) {}

	/// Gets the active currencies.
	rpc GetActiveCurrencies (GetActiveCurrenciesRequest) returns (GetActiveCurrenciesReply) {}

	/// Gets the currency by its id.
	rpc GetCurrency (GetCurrencyRequest) returns (GetCurrencyReply) {}

	/// Gets the currency by code.
	rpc GetCurrencyByCode (GetCurrencyByCodeRequest) returns (GetCurrencyByCodeReply) {}

	/// Creates the item.
	rpc CreateItem (CreateItemRequest) returns (CreateItemReply) {}

	/// Updates the item.
	rpc UpdateItem (UpdateItemRequest) returns (UpdateItemReply) {}

	/// Updates the item and reseller prices for all subresellers of given reseller id.
	rpc UpdateItemWithResellerPrices (UpdateItemWithResellerPricesRequest) returns (UpdateItemWithResellerPricesReply) {}

	/// Deactivates the item.
	rpc DeactivateItem (DeactivateItemRequest) returns (DeactivateItemReply) {}

	/// Activates the item.
	rpc ActivateItem (ActivateItemRequest) returns (ActivateItemReply) {}

	/// Gets the item by id.
	rpc GetItem (GetItemRequest) returns (GetItemReply) {}

	/// Gets the item details.
	rpc GetItemDetails (GetItemDetailsRequest) returns (GetItemDetailsReply) {}

	/// Gets the items by ids for language with ISO code
	rpc GetItemsByIdsAndLanguage (GetItemsByIdsAndLanguageRequest) returns (GetItemsByIdsAndLanguageReply) {}

	/// Gets the item by article number.
	rpc GetItemByArticleNumber (GetItemByArticleNumberRequest) returns (GetItemByArticleNumberReply) {}

	/// Gets the items.
	rpc GetItems (GetItemsRequest) returns (GetItemsReply) {}

	/// Gets the items for public order.
	rpc GetItemsForPublicOrder (GetItemsForPublicOrderRequest) returns (GetItemsForPublicOrderReply) {}

	/// Gets the available items from all the parent resellers.
	rpc GetAvailableItems (GetAvailableItemsRequest) returns (GetAvailableItemsReply) {}

	/// Gets the account default currency.
	rpc GetAccountDefaultCurrency (GetAccountDefaultCurrencyRequest) returns (GetAccountDefaultCurrencyReply) {}

	/// Gets the available provisioning services.
	rpc GetProvisioningServices (GetProvisioningServicesRequest) returns (GetProvisioningServicesReply) {}

	/// Gets the item categories.
	rpc GetItemCategories (GetItemCategoriesRequest) returns (GetItemCategoriesReply) {}

	/// Gets the available tax rules plugins.
	rpc GetAvailableTaxRules (GetAvailableTaxRulesRequest) returns (GetAvailableTaxRulesReply) {}

	/// Gets the tax rule result.
	rpc GetTaxRuleResult (GetTaxRuleResultRequest) returns (GetTaxRuleResultReply) {}

	/// Gets the tax rule results for items.
	rpc GetTaxRuleResultBulk (GetTaxRuleResultBulkRequest) returns (GetTaxRuleResultBulkReply) {}

	/// Gets the items by provisioning service.
	rpc GetItemsByProvisioningService (GetItemsByProvisioningServiceRequest) returns (GetItemsByProvisioningServiceReply) {}

	/// Lists the items with details.
	rpc ListItemsWithDetails (ListItemsWithDetailsRequest) returns (ListItemsWithDetailsReply) {}

	/// Lists items with prices for specified reseller.
	rpc ListItemsForReseller (ListItemsForResellerRequest) returns (ListItemsForResellerReply) {}

	/// List items which have defined prices for given currency and disjunctions/conjunctions condition. If currency is not set then list items regards to disjunctions/conjunctions condition only.
	rpc GetItemsForCurrency (GetItemsForCurrencyRequest) returns (GetItemsForCurrencyReply) {}

	/// Gets counter types for given article numbers with prices for specified customer.
	rpc GetCounterTypesWithPrices (GetCounterTypesWithPricesRequest) returns (GetCounterTypesWithPricesReply) {}

	/// Gets the items by their article numbers for specified customer.
	rpc GetItemsByArticleNumber (GetItemsByArticleNumberRequest) returns (GetItemsByArticleNumberReply) {}

	/// Gets usage report for given customer id for period of time.
	rpc GetUsageReport (GetUsageReportRequest) returns (GetUsageReportReply) {}

	/// Gets usage report for given customer id for period of time and subscription.
	rpc GetUsageReportSubscription (GetUsageReportSubscriptionRequest) returns (GetUsageReportSubscriptionReply) {}

	/// Gets summary usage report for given customer id for period of time.
	rpc GetSummaryUsageReport (GetSummaryUsageReportRequest) returns (GetSummaryUsageReportReply) {}

	/// Uploads usage report.
	rpc UploadUsageReport (UploadUsageReportRequest) returns (UploadUsageReportReply) {}

	/// Gets the price list owner id.
	rpc GetPriceListOwnerId (GetPriceListOwnerIdRequest) returns (GetPriceListOwnerIdReply) {}

	/// Gets the price list owner id.
	rpc GetPriceListOwners (GetPriceListOwnersRequest) returns (GetPriceListOwnersReply) {}

	/// Flushes the items cache.
	rpc FlushItemsCache (FlushItemsCacheRequest) returns (FlushItemsCacheReply) {}

	/// Gets the items cache flush time.
	rpc GetItemsCacheFlushTime (GetItemsCacheFlushTimeRequest) returns (GetItemsCacheFlushTimeReply) {}

	/// Gets the provisioning package.
	rpc GetProvisioningPackage (GetProvisioningPackageRequest) returns (GetProvisioningPackageReply) {}

	/// Lists the provisioning packages.
	rpc ListProvisioningPackages (ListProvisioningPackagesRequest) returns (ListProvisioningPackagesReply) {}

	/// Adds provisioning package which exists in provisioning description.
	rpc AddProvisioningPackage (AddProvisioningPackageRequest) returns (AddProvisioningPackageReply) {}

	/// Updates provisioning package which exists in provisioning description.
	rpc UpdateProvisioningPackage (UpdateProvisioningPackageRequest) returns (UpdateProvisioningPackageReply) {}

	/// Deletes provisioning package from billing.
	rpc DeleteProvisioningPackage (DeleteProvisioningPackageRequest) returns (DeleteProvisioningPackageReply) {}

	/// Gets the provisioning service.
	rpc GetProvisioningService (GetProvisioningServiceRequest) returns (GetProvisioningServiceReply) {}

	/// Lists the provisioning services.
	rpc ListProvisioningServices (ListProvisioningServicesRequest) returns (ListProvisioningServicesReply) {}

	/// Adds provisioning service which exists in provisioning description.
	rpc AddProvisioningService (AddProvisioningServiceRequest) returns (AddProvisioningServiceReply) {}

	/// Updates provisioning service which exists in provisioning description.
	rpc UpdateProvisioningService (UpdateProvisioningServiceRequest) returns (UpdateProvisioningServiceReply) {}

	/// Deletes provisioning service from billing.
	rpc DeleteProvisioningService (DeleteProvisioningServiceRequest) returns (DeleteProvisioningServiceReply) {}

	/// Gets the package configuration.
	rpc GetPackageConfiguration (GetPackageConfigurationRequest) returns (GetPackageConfigurationReply) {}

	/// Lists the package configurations.
	rpc ListPackageConfigurations (ListPackageConfigurationsRequest) returns (ListPackageConfigurationsReply) {}

	/// Adds the package configuration.
	rpc AddPackageConfiguration (AddPackageConfigurationRequest) returns (AddPackageConfigurationReply) {}

	/// Updates package configuration.
	rpc UpdatePackageConfiguration (UpdatePackageConfigurationRequest) returns (UpdatePackageConfigurationReply) {}

	/// Deletes package configuration from billing.
	rpc DeletePackageConfiguration (DeletePackageConfigurationRequest) returns (DeletePackageConfigurationReply) {}

	/// Gets the default shop for reseller.
	rpc GetDefaultShopForReseller (GetDefaultShopForResellerRequest) returns (GetDefaultShopForResellerReply) {}

	/// Gets the active shop by name for reseller.
	rpc GetActiveShopByNameForReseller (GetActiveShopByNameForResellerRequest) returns (GetActiveShopByNameForResellerReply) {}

	/// Gets the shop by identifier.
	rpc GetShopById (GetShopByIdRequest) returns (GetShopByIdReply) {}

	/// Lists the shops by reseller.
	rpc ListShopsByReseller (ListShopsByResellerRequest) returns (ListShopsByResellerReply) {}

	/// Creates the shop.
	rpc CreateShop (CreateShopRequest) returns (CreateShopReply) {}

	/// Creates cloned shop.
	rpc CreateClonedShop (CreateClonedShopRequest) returns (CreateClonedShopReply) {}

	/// Updates the shop.
	rpc UpdateShop (UpdateShopRequest) returns (UpdateShopReply) {}

	/// Validates the shop.
	rpc ValidateShop (ValidateShopRequest) returns (ValidateShopReply) {}

	/// Deletes the shop.
	rpc DeleteShop (DeleteShopRequest) returns (DeleteShopReply) {}

	/// Searches shops for a reseller.
	rpc SearchShops (SearchShopsRequest) returns (SearchShopsReply) {}

	/// Gets the shop products.
	rpc GetDefaultShopProducts (GetDefaultShopProductsRequest) returns (GetDefaultShopProductsReply) {}

	/// Gets the shop products.
	rpc GetShopProducts (GetShopProductsRequest) returns (GetShopProductsReply) {}

	/// Lists the shop item categories.
	rpc ListShopItemCategories (ListShopItemCategoriesRequest) returns (ListShopItemCategoriesReply) {}

	/// Gets the shop item category by identifier.
	rpc GetShopItemCategoryById (GetShopItemCategoryByIdRequest) returns (GetShopItemCategoryByIdReply) {}

	/// Adds the shop item category.
	rpc AddShopItemCategory (AddShopItemCategoryRequest) returns (AddShopItemCategoryReply) {}

	/// Updates shop item category.
	rpc UpdateShopItemCategory (UpdateShopItemCategoryRequest) returns (UpdateShopItemCategoryReply) {}

	/// Deletes shop item category.
	rpc DeleteShopItemCategory (DeleteShopItemCategoryRequest) returns (DeleteShopItemCategoryReply) {}

	/// Adds the shop item to existing shop.
	rpc AddShopItem (AddShopItemRequest) returns (AddShopItemReply) {}

	/// Updates existing shop item.
	rpc UpdateShopItem (UpdateShopItemRequest) returns (UpdateShopItemReply) {}

	/// Deletes existing shop item.
	rpc DeleteShopItem (DeleteShopItemRequest) returns (DeleteShopItemReply) {}

	/// Returns the shop item for given article number.
	rpc FindShopItem (FindShopItemRequest) returns (FindShopItemReply) {}

	/// Creates the payments.
	rpc CreatePayment (CreatePaymentRequest) returns (CreatePaymentReply) {}

	/// Gets the payment invoices joined with the payments and invoices.
	rpc GetPayments (GetPaymentsRequest) returns (GetPaymentsReply) {}

	/// Gets the payment by id.
	rpc GetPaymentById (GetPaymentByIdRequest) returns (GetPaymentByIdReply) {}

	/// Updates the payment.
	rpc UpdatePayment (UpdatePaymentRequest) returns (UpdatePaymentReply) {}

	/// Deletes a payment.
	rpc DeletePayment (DeletePaymentRequest) returns (DeletePaymentReply) {}

	/// Applies the payment rule associated to the logged in account and gets the payment rule result.
	rpc GetPaymentRuleResult (GetPaymentRuleResultRequest) returns (GetPaymentRuleResultReply) {}

	/// Gets the payment overview for an account.
	rpc GetPaymentOverview (GetPaymentOverviewRequest) returns (GetPaymentOverviewReply) {}

	/// Queries all plugins and parses payment file if there is plugin for that type.
	rpc ParsePaymentFile (ParsePaymentFileRequest) returns (ParsePaymentFileReply) {}

	/// Queries all plugins and parses payment file if there is plugin for that type.
	rpc ParsePaymentFileForReseller (ParsePaymentFileForResellerRequest) returns (ParsePaymentFileForResellerReply) {}

	/// Lists the pay file records.
	rpc ListPayFileRecords (ListPayFileRecordsRequest) returns (ListPayFileRecordsReply) {}

	/// Gets the pay file record by identifier.
	rpc GetPayFileRecordById (GetPayFileRecordByIdRequest) returns (GetPayFileRecordByIdReply) {}

	/// Updates the pay file record.
	rpc UpdatePayFileRecord (UpdatePayFileRecordRequest) returns (UpdatePayFileRecordReply) {}

	/// Binds the pay file record to invoice.
	rpc BindPayFileRecordToInvoice (BindPayFileRecordToInvoiceRequest) returns (BindPayFileRecordToInvoiceReply) {}

	/// Gets the payment match result.
	rpc GetPaymentMatchResult (GetPaymentMatchResultRequest) returns (GetPaymentMatchResultReply) {}

	/// Processes the pay file records.
	rpc ProcessPayFileRecords (ProcessPayFileRecordsRequest) returns (ProcessPayFileRecordsReply) {}

	/// Gets the financial records: Payments or Refunds.
	rpc GetFinancialRecords (GetFinancialRecordsRequest) returns (GetFinancialRecordsReply) {}

	/// Create refund.
	rpc CreateRefund (CreateRefundRequest) returns (CreateRefundReply) {}

	/// Gets the refund by id.
	rpc GetRefundById (GetRefundByIdRequest) returns (GetRefundByIdReply) {}

	/// Gets the refund overview for an account.
	rpc GetRefundOverview (GetRefundOverviewRequest) returns (GetRefundOverviewReply) {}

	/// Gets payments that are associated with refunds.
	rpc GetRefundedPayments (GetRefundedPaymentsRequest) returns (GetRefundedPaymentsReply) {}

	/// Updates the refund.
	rpc UpdateRefund (UpdateRefundRequest) returns (UpdateRefundReply) {}

	/// Get payments that have not yet been refunded for specified invoice.
	rpc GetRefundablePayments (GetRefundablePaymentsRequest) returns (GetRefundablePaymentsReply) {}

	/// Creates the refund from a credited invoice.
	rpc CreateRefundFromCreditedInvoice (CreateRefundFromCreditedInvoiceRequest) returns (CreateRefundFromCreditedInvoiceReply) {}

	/// Refund payment and optionally create a credit invoice.
	rpc CreateRefundFromPaymentId (CreateRefundFromPaymentIdRequest) returns (CreateRefundFromPaymentIdReply) {}

	/// Change status of refunds.
	rpc ChangeRefundStatus (ChangeRefundStatusRequest) returns (ChangeRefundStatusReply) {}

	/// Creates the prepaid credit record.
	rpc CreatePrepaidCreditRecords (CreatePrepaidCreditRecordsRequest) returns (CreatePrepaidCreditRecordsReply) {}

	/// Gets the prepaid credit records joined with the invoices.
	rpc GetPrepaidCreditRecords (GetPrepaidCreditRecordsRequest) returns (GetPrepaidCreditRecordsReply) {}

	/// Gets the prepaid credit record by id.
	rpc GetPrepaidCreditRecordById (GetPrepaidCreditRecordByIdRequest) returns (GetPrepaidCreditRecordByIdReply) {}

	/// Gets the prepaid credit amount for account.
	rpc GetPrepaidCreditAmountForAccount (GetPrepaidCreditAmountForAccountRequest) returns (GetPrepaidCreditAmountForAccountReply) {}

	/// Gets the prepaid credit balance for account.
	rpc GetPrepaidCreditBalance (GetPrepaidCreditBalanceRequest) returns (GetPrepaidCreditBalanceReply) {}

	/// Gets the account data for the currently signed in user.
	rpc GetAccount (GetAccountRequest) returns (GetAccountReply) {}

	/// Gets the logins for the account specified with id.
	rpc ListLogins (ListLoginsRequest) returns (ListLoginsReply) {}

	/// Lists the operations available in the API.
	rpc ListOperations (ListOperationsRequest) returns (ListOperationsReply) {}

	/// Allows the user to access operation.
	rpc AllowUser (AllowUserRequest) returns (AllowUserReply) {}

	/// Denies the user to access operation.
	rpc DenyUser (DenyUserRequest) returns (DenyUserReply) {}

	/// Allows the role to access operation.
	rpc AllowRole (AllowRoleRequest) returns (AllowRoleReply) {}

	/// Denies the role to access operation.
	rpc DenyRole (DenyRoleRequest) returns (DenyRoleReply) {}

	/// Gets the allowed operations for role.
	rpc GetAllowedOperationsRole (GetAllowedOperationsRoleRequest) returns (GetAllowedOperationsRoleReply) {}

	/// Gets the allowed operations for user.
	rpc GetAllowedOperationsUser (GetAllowedOperationsUserRequest) returns (GetAllowedOperationsUserReply) {}

	/// Gets the allowed objects.
	rpc GetAllowedObjects (GetAllowedObjectsRequest) returns (GetAllowedObjectsReply) {}

	/// Creates the plugin configuration.
	rpc CreatePluginConfiguration (CreatePluginConfigurationRequest) returns (CreatePluginConfigurationReply) {}

	/// Get list of plugins.
	rpc ListPlugins (ListPluginsRequest) returns (ListPluginsReply) {}

	/// Gets a plugin by id.
	rpc GetPluginById (GetPluginByIdRequest) returns (GetPluginByIdReply) {}

	/// Gets a plugin by configuration id.
	rpc GetPluginByConfigurationId (GetPluginByConfigurationIdRequest) returns (GetPluginByConfigurationIdReply) {}

	/// Gets a plugin configuration schema by plugin id.
	rpc GetPluginConfigurationSchema (GetPluginConfigurationSchemaRequest) returns (GetPluginConfigurationSchemaReply) {}

	/// Update plugin configuration value by plugin configuration id.
	rpc UpdatePluginConfigurationValueById (UpdatePluginConfigurationValueByIdRequest) returns (UpdatePluginConfigurationValueByIdReply) {}

	/// Enables the plugin.
	rpc EnablePlugin (EnablePluginRequest) returns (EnablePluginReply) {}

	/// Disables the plugin.
	rpc DisablePlugin (DisablePluginRequest) returns (DisablePluginReply) {}

	/// Updates the plugin configuration.
	rpc UpdatePluginConfiguration (UpdatePluginConfigurationRequest) returns (UpdatePluginConfigurationReply) {}

	/// Gets the plugin configuration by id.
	rpc GetPluginConfigurationById (GetPluginConfigurationByIdRequest) returns (GetPluginConfigurationByIdReply) {}

	/// Gets the plugin configuration by key for reseller and plugin with specified name.
	rpc GetPluginConfigurationByKey (GetPluginConfigurationByKeyRequest) returns (GetPluginConfigurationByKeyReply) {}

	/// Deletes the plugin configuration.
	rpc DeletePluginConfiguration (DeletePluginConfigurationRequest) returns (DeletePluginConfigurationReply) {}

	/// Creates the schedule.
	rpc CreateSchedule (CreateScheduleRequest) returns (CreateScheduleReply) {}

	/// Gets the next working day from date.
	rpc GetNextWorkingDay (GetNextWorkingDayRequest) returns (GetNextWorkingDayReply) {}

	/// Raises heart beat event.
	rpc HeartBeat (HeartBeatRequest) returns (HeartBeatReply) {}

	/// Searches sheduled tasks.
	rpc SearchScheduledTasks (SearchScheduledTasksRequest) returns (SearchScheduledTasksReply) {}

	/// Updates a scheduled task.
	rpc UpdateScheduledTask (UpdateScheduledTaskRequest) returns (UpdateScheduledTaskReply) {}

	/// Updates multiple scheduled tasks.
	rpc UpdateScheduledTasks (UpdateScheduledTasksRequest) returns (UpdateScheduledTasksReply) {}

	/// Deletes a scheduled task.
	rpc DeleteScheduledTask (DeleteScheduledTaskRequest) returns (DeleteScheduledTaskReply) {}

	/// Search the scheduled task run table.
	rpc SearchScheduledTaskRuns (SearchScheduledTaskRunsRequest) returns (SearchScheduledTaskRunsReply) {}

	/// Search the scheduled task run table.
	rpc HasUnpaidInvoices (HasUnpaidInvoicesRequest) returns (HasUnpaidInvoicesReply) {}

	/// Gets the upgrade options for subscription.
	rpc GetUpgradeOptions (GetUpgradeOptionsRequest) returns (GetUpgradeOptionsReply) {}

	/// Checks if subscriptions are upgradeable or downgradeable.
	rpc IsUpgradeableOrDowngradeable (IsUpgradeableOrDowngradeableRequest) returns (IsUpgradeableOrDowngradeableReply) {}

	/// Creates the upgrade invoice.
	rpc CreateUpgradeInvoice (CreateUpgradeInvoiceRequest) returns (CreateUpgradeInvoiceReply) {}

	/// Creates the upgrade order.
	rpc CreateUpgradeOrder (CreateUpgradeOrderRequest) returns (CreateUpgradeOrderReply) {}

	/// Downgrades the subscription.
	rpc DowngradeSubscription (DowngradeSubscriptionRequest) returns (DowngradeSubscriptionReply) {}

	/// Downgrades the subscription to the cheapest package available.
	rpc DowngradeSubscriptionToCheapestPackage (DowngradeSubscriptionToCheapestPackageRequest) returns (DowngradeSubscriptionToCheapestPackageReply) {}

	/// Upgrades the subscription.
	rpc UpgradeSubscription (UpgradeSubscriptionRequest) returns (UpgradeSubscriptionReply) {}

	/// Upgrades the group member check downgrade option.
	rpc UpgradeGroupMemberCheckDowngradeOption (UpgradeGroupMemberCheckDowngradeOptionRequest) returns (UpgradeGroupMemberCheckDowngradeOptionReply) {}

	/// Creates the upgrade/downgrade group.
	rpc CreateUpgradeGroup (CreateUpgradeGroupRequest) returns (CreateUpgradeGroupReply) {}

	/// Updates the upgrade/downgrade group.
	rpc UpdateUpgradeGroup (UpdateUpgradeGroupRequest) returns (UpdateUpgradeGroupReply) {}

	/// Deletes the upgrade/downgrade group.
	rpc DeleteUpgradeGroup (DeleteUpgradeGroupRequest) returns (DeleteUpgradeGroupReply) {}

	/// Gets the upgrade group by id.
	rpc GetUpgradeGroup (GetUpgradeGroupRequest) returns (GetUpgradeGroupReply) {}

	/// Gets the upgrade groups containing item (identified by id).
	rpc GetUpgradeGroups (GetUpgradeGroupsRequest) returns (GetUpgradeGroupsReply) {}

	/// Gets all upgrade groups.
	rpc GetAllUpgradeGroups (GetAllUpgradeGroupsRequest) returns (GetAllUpgradeGroupsReply) {}

	/// Gets current version info.
	rpc GetVersionInfo (GetVersionInfoRequest) returns (GetVersionInfoReply) {}

	/// Adds the payment profile.
	rpc AddPaymentProfile (AddPaymentProfileRequest) returns (AddPaymentProfileReply) {}

	/// Deletes the payment profile.
	rpc DeletePaymentProfile (DeletePaymentProfileRequest) returns (DeletePaymentProfileReply) {}

	/// Modifies the payment profile. Only payment profiles with no transactions can be modified.
	rpc UpdatePaymentProfile (UpdatePaymentProfileRequest) returns (UpdatePaymentProfileReply) {}

	/// Gets the payment profiles.
	rpc GetPaymentProfiles (GetPaymentProfilesRequest) returns (GetPaymentProfilesReply) {}

	/// Gets the available payment methods.
	rpc GetAvailablePaymentMethods (GetAvailablePaymentMethodsRequest) returns (GetAvailablePaymentMethodsReply) {}

	/// Gets the payment diagnostics.
	rpc GetPaymentDiagnostics (GetPaymentDiagnosticsRequest) returns (GetPaymentDiagnosticsReply) {}

	/// Makes the payment by creating transaction on the payment gateway.
	rpc MakePayment (MakePaymentRequest) returns (MakePaymentReply) {}

	/// Updates payment transaction. Used to finish payment transaction.
	rpc UpdatePaymentTransaction (UpdatePaymentTransactionRequest) returns (UpdatePaymentTransactionReply) {}

	/// Updates payment transaction.
	rpc UpdatePaymentTransactionObject (UpdatePaymentTransactionObjectRequest) returns (UpdatePaymentTransactionObjectReply) {}

	/// Gets the payment transaction by id.
	rpc GetPaymentTransactionById (GetPaymentTransactionByIdRequest) returns (GetPaymentTransactionByIdReply) {}

	/// Gets the payment transaction by initial identifier.
	rpc GetPaymentTransactionByInitialId (GetPaymentTransactionByInitialIdRequest) returns (GetPaymentTransactionByInitialIdReply) {}

	/// Gets the payment transactions by ids.
	rpc GetPaymentTransactionsByIds (GetPaymentTransactionsByIdsRequest) returns (GetPaymentTransactionsByIdsReply) {}

	/// Finishes the payment by closing appropriate transactions, marking invoices as paid.
	rpc FinishPayment (FinishPaymentRequest) returns (FinishPaymentReply) {}

	/// Gets all countries.
	rpc GetCountries (GetCountriesRequest) returns (GetCountriesReply) {}

	/// Gets searchable objects.
	rpc GetSearchableObjects (GetSearchableObjectsRequest) returns (GetSearchableObjectsReply) {}

	/// Searches system for specified search string and returns results.
	rpc Search (SearchRequest) returns (SearchReply) {}

	/// Adds the tax profile.
	rpc AddTaxProfile (AddTaxProfileRequest) returns (AddTaxProfileReply) {}

	/// Updates the tax profiles.
	rpc UpdateTaxProfiles (UpdateTaxProfilesRequest) returns (UpdateTaxProfilesReply) {}

	/// Validates the VAT number.
	rpc ValidateVatNumber (ValidateVatNumberRequest) returns (ValidateVatNumberReply) {}

	/// Gets the campaigns.
	rpc GetCampaigns (GetCampaignsRequest) returns (GetCampaignsReply) {}

	/// Gets the campaign by its Id.
	rpc GetCampaignById (GetCampaignByIdRequest) returns (GetCampaignByIdReply) {}

	/// Delete multiple campaings in one call.
	rpc DeleteCampaignsBulk (DeleteCampaignsBulkRequest) returns (DeleteCampaignsBulkReply) {}

	/// Delete single campaign.
	rpc DeleteCampaign (DeleteCampaignRequest) returns (DeleteCampaignReply) {}

	/// Add new campaign.
	rpc AddCampaign (AddCampaignRequest) returns (AddCampaignReply) {}

	/// Update campaign.
	rpc UpdateCampaign (UpdateCampaignRequest) returns (UpdateCampaignReply) {}

	/// Gets promo codes for campaign or promo code set.
	rpc GetPromoCodes (GetPromoCodesRequest) returns (GetPromoCodesReply) {}

	/// Generate promo codes for campaign and promo code set, based on campaignCodesGeneratorSettings.
	rpc PromoCodesGenerator (PromoCodesGeneratorRequest) returns (PromoCodesGeneratorReply) {}

	/// Delete multiple campaing promo codes in one call.
	rpc CampaignPromoCodesBulkDelete (CampaignPromoCodesBulkDeleteRequest) returns (CampaignPromoCodesBulkDeleteReply) {}

	/// Checks if any campaign with code in the system is active.
	rpc IsAnyCampaignWithCodeActive (IsAnyCampaignWithCodeActiveRequest) returns (IsAnyCampaignWithCodeActiveReply) {}

	/// Gets a customer reminder.
	rpc GetCustomerReminder (GetCustomerReminderRequest) returns (GetCustomerReminderReply) {}

	/// Updates a customer reminder.
	rpc UpdateCustomerReminder (UpdateCustomerReminderRequest) returns (UpdateCustomerReminderReply) {}

	/// Gets the maximum renewal period.
	rpc GetMaximumRenewalPeriod (GetMaximumRenewalPeriodRequest) returns (GetMaximumRenewalPeriodReply) {}

	/// Gets the remaining renewal period.
	rpc GetRemainingRenewalPeriod (GetRemainingRenewalPeriodRequest) returns (GetRemainingRenewalPeriodReply) {}

	/// Gets the mailing list by id.
	rpc GetMailingListById (GetMailingListByIdRequest) returns (GetMailingListByIdReply) {}

	/// Gets the mailing list by its name.
	rpc GetMailingListByName (GetMailingListByNameRequest) returns (GetMailingListByNameReply) {}

	/// Adds the mailing list.
	rpc AddMailingList (AddMailingListRequest) returns (AddMailingListReply) {}

	/// Lists the mailing lists.
	rpc ListMailingLists (ListMailingListsRequest) returns (ListMailingListsReply) {}

	/// Updates the mailing list.
	rpc UpdateMailingList (UpdateMailingListRequest) returns (UpdateMailingListReply) {}

	/// Gets the unsubscribe hash data.
	rpc GetUnsubscribeHashData (GetUnsubscribeHashDataRequest) returns (GetUnsubscribeHashDataReply) {}

	/// Gets the mailing list subscription.
	rpc GetMailingListSubscription (GetMailingListSubscriptionRequest) returns (GetMailingListSubscriptionReply) {}

	/// Unsubscribes from mailing list.
	rpc UnsubscribeFromMailingList (UnsubscribeFromMailingListRequest) returns (UnsubscribeFromMailingListReply) {}

	/// Lists the languages.
	rpc ListLanguages (ListLanguagesRequest) returns (ListLanguagesReply) {}

	/// Gets the prioritiy of the order statuses.
	rpc GetOrderStatusPriorities (GetOrderStatusPrioritiesRequest) returns (GetOrderStatusPrioritiesReply) {}

	/// Gets the attachment for specific account by attachment id.
	rpc GetAttachment (GetAttachmentRequest) returns (GetAttachmentReply) {}

	/// Get all available categories.
	rpc GetPerformanceCategories (GetPerformanceCategoriesRequest) returns (GetPerformanceCategoriesReply) {}

	/// Returns the value of the performance counter.
	rpc GetPerformanceCounter (GetPerformanceCounterRequest) returns (GetPerformanceCounterReply) {}

	/// Returns the value of the performance counter instance.
	rpc GetPerformanceCounterInstance (GetPerformanceCounterInstanceRequest) returns (GetPerformanceCounterInstanceReply) {}

	/// Returns the average value of a multi instance performance counter.
	rpc GetMultiInstancePerformanceCounterAverage (GetMultiInstancePerformanceCounterAverageRequest) returns (GetMultiInstancePerformanceCounterAverageReply) {}

	/// Searches the performance log.
	rpc SearchPerformanceLog (SearchPerformanceLogRequest) returns (SearchPerformanceLogReply) {}

	/// Retrieves data from the performance log.
	rpc GetPerformanceLog (GetPerformanceLogRequest) returns (GetPerformanceLogReply) {}

	/// Get currently executing methods and scheduled tasks.
	rpc GetExecutingMethods (GetExecutingMethodsRequest) returns (GetExecutingMethodsReply) {}

	/// Creates the message.
	rpc CreateMessage (CreateMessageRequest) returns (CreateMessageReply) {}

	/// Updates the message.
	rpc UpdateMessage (UpdateMessageRequest) returns (UpdateMessageReply) {}

	/// Gets the message by identifier.
	rpc GetMessageById (GetMessageByIdRequest) returns (GetMessageByIdReply) {}

	/// Lists the messages by customer id.
	rpc ListMessagesByCustomer (ListMessagesByCustomerRequest) returns (ListMessagesByCustomerReply) {}

	/// Lists the messages.
	rpc ListMessages (ListMessagesRequest) returns (ListMessagesReply) {}

	/// Gets the reseller commission summary.
	rpc GetResellerCommissionSummary (GetResellerCommissionSummaryRequest) returns (GetResellerCommissionSummaryReply) {}

	/// Updates the reseller commission status.
	rpc UpdateResellerCommissionStatus (UpdateResellerCommissionStatusRequest) returns (UpdateResellerCommissionStatusReply) {}

	/// Lists all contacts for account.
	rpc GetContacts (GetContactsRequest) returns (GetContactsReply) {}

	/// Lists the resource locations.
	rpc ListResourceLocations (ListResourceLocationsRequest) returns (ListResourceLocationsReply) {}

	/// Gets the setting value using the name of the setting.
	rpc GetSetting (GetSettingRequest) returns (GetSettingReply) {}

	/// Updates the setting.
	rpc UpdateSetting (UpdateSettingRequest) returns (UpdateSettingReply) {}
}

// Request and replies

/**
 * The Echo method request.
 */
message EchoRequest {
	string message = 1; /// The message.
}

/**
 * The Echo method reply.
 */
message EchoReply {
	string message = 1; /// The echoed message.
}

/**
 * The GetAddressInfo method request.
 */
message GetAddressInfoRequest {
	string identifier = 1; /// The identifier to search for in the configured provider.
	Guid resellerId = 2; /// The reseller to use plugin settings for when connecting to the provider.

	/**
	 * Entity type enumeration.
	 */
	enum EntityType {
		Company = 0; /// Entity is a company.
		Person = 1; /// Entity is a person.
	}
	EntityType entityType = 3; /// Type of requested entity.
}

/**
 * The GetAddressInfo method reply.
 */
message GetAddressInfoReply {
	AddressInfo addressInfo = 1; /// The address information for the entity.
}

/**
 * The SendEmail method request.
 */
message SendEmailRequest {
	string from = 1; /// Email address of the sender.
	string to = 2; /// Email address of the receiver.
	string subject = 3; /// The message subject.
	string body = 4; /// The body of the message.
	repeated MailAttachment attachments = 5; /// The list of attachments.
}

/**
 * The SendEmail method reply.
 */
message SendMailReply {
}

/**
 * The SendMailToAccountOwner method request.
 */
message SendMailToAccountOwnerRequest {
	string accountName = 1; /// Account name.
	string templateName = 2; /// Name of the template to use.
	map<string, string> templateProperties = 3; /// Template properties to replace.
}

/**
 * The SendMailToAccountOwner method reply.
 */
message SendMailToAccountOwnerReply {
}

/**
 * The ResellerCheckEmail method request.
 */
message ResellerCheckEmailRequest {
	string id = 1; /// Customer id.
	string email = 2; /// Email address to be checked.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerCheckEmail method reply.
 */
message ResellerCheckEmailReply {
	bool value = 1; /// true if customer with passed email exists, otherwise false.
}

/**
 * The CheckEmail method request.
 */
message CheckEmailRequest {
	string id = 1; /// Customer id.
	string email = 2; /// Email address to be checked.
}

/**
 * The CheckEmail method reply.
 */
message CheckEmailReply {
	bool value = 1; /// true if customer with passed email exists, otherwise false.
}

/**
 * The ResellerGetCustomerPackagesByEmail method request.
 */
message ResellerGetCustomerPackagesByEmailRequest {
	string email = 1; /// Email address.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The ResellerGetCustomerPackagesByEmail method reply.
 */
message ResellerGetCustomerPackagesByEmailReply {
	repeated ProvisioningUnit provisioningUnit = 1; /// The customer packages, if customer exists.
}

/**
 * The GetCustomerPackagesByEmail method request.
 */
message GetCustomerPackagesByEmailRequest {
	string email = 1; /// Email address.
}

/**
 * The GetCustomerPackagesByEmail method reply.
 */
message GetCustomerPackagesByEmailReply {
	repeated ProvisioningUnit provisioningUnit = 1; /// The customer packages, if customer exists.
}

/**
 * The AddTemplate method request.
 */
message AddTemplateRequest {
	Template template = 1; /// Template to be added.
	Guid accountId = 2; /// Account for which template is added.
	Guid languageId = 3; /// Account's language.
}

/**
 * The AddTemplate method reply.
 */
message AddTemplateReply {
	Template template = 1; /// Inserted template.
}

/**
 * The UpdateTemplate method request.
 */
message UpdateTemplateRequest {
	Template template = 1; /// Template to be updated.
}

/**
 * The UpdateTemplate method reply.
 */
message UpdateTemplateReply {
}

/**
 * The DeleteTemplate method request.
 */
message DeleteTemplateRequest {
	Guid templateId = 1; /// The template id.
}

/**
 * The DeleteTemplate method reply.
 */
message DeleteTemplateReply {
}

/**
 * The GetTemplates method request.
 */
message GetTemplatesRequest {
	Guid accountId = 1; /// Id of account for which templates are filtered.
}

/**
 * The GetTemplates method reply.
 */
message GetTemplatesReply {
	repeated Template templates = 1; /// List of templates filtered by account id.
}

/**
 * The GetTemplate method request.
 */
message GetTemplateRequest {
	string templateName = 1; /// Requested template's name.
	Guid languageId = 2; /// The language id.
	Guid accountId = 3; /// The account id.
}

message GetTemplateReply {
	Template template = 1; /// Requested template or null if not found.
}

/**
 * The SearchTemplates method request.
 */
message SearchTemplatesRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// Size of the page.
	string order = 3; /// The order type (asc or desc).
	string propertyNameToOrder = 4; /// The property to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchTemplates method reply.
 */
message SearchTemplatesReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Template templates = 2; /// The list of templates.
}

/**
 * The PreviewTemplate method request.
 */
message PreviewTemplateRequest {
}

/**
 * The PreviewTemplate method reply.
 */
message PreviewTemplateReply {
}

/**
 * The GetTemplatesForExport method request.
 */
message GetTemplatesForExportRequest {
	string searchString = 1; /// The search string.
	int32 firstRow = 2; /// The first row.
	int32 pageSize = 3; /// Size of the page.
	string order = 4; /// The order.
	string propertyNameToOrder = 5; /// The property name to order.
}

/**
 * The GetTemplatesForExport method reply.
 */
message GetTemplatesForExportReply {
	int32 totalRows = 1;  /// The total number of rows.
	repeated TemplateExport templateExports = 2; /// The list of template exports.
}

/**
 * The AddAccountDetails method request.
 */
message AddAccountDetailsRequest {
	AccountDetails accountDetails = 1; /// Account details to be added to system.
}

/**
 * The AddAccountDetails method reply.
 */
message AddAccountDetailsReply {
	AccountDetails accountDetails = 1; /// The added account details.
}

/**
 * The TerminateAccount method request.
 */
message TerminateAccountRequest {
	Guid accountId = 1; /// Id of account to be terminated.
	string reason = 2; /// Reason for termination.
}

/**
 * The TerminateAccount method reply.
 */
message TerminateAccountReply {
}

/**
 * The TerminateAccountAfterRequest method request.
 */
message TerminateAccountAfterRequestRequest {
	Guid accountId = 1; /// Id of account to be terminated.
}

/**
 * The TerminateAccountAfterRequest method reply.
 */
message TerminateAccountAfterRequestReply {
}

/**
 * The ChangeAccountStatus method request.
 */
message ChangeAccountStatusRequest {
	repeated Guid accountIds = 1; /// Ids of accounts for status change.
	string newStatus = 2; /// New status.
	string reason = 3; /// Reason for status change.
}

/**
 * The ChangeAccountStatus method reply.
 */
message ChangeAccountStatusReply {
	int32 value = 1; /// Number of accounts with status changed.
}

/**
 * The UpdateAccountDetails method request.
 */
message UpdateAccountDetailsRequest {
	AccountDetails accountDetails = 1; /// Account details.
}

/**
 * The UpdateAccountDetails method reply.
 */
message UpdateAccountDetailsReply {
}

/**
 * The UpdateAccountAddresses method request.
 */
message UpdateAccountAddressesRequest {
	Guid accountId = 1; /// Account's id.
	AccountAddress mainAddress = 2; /// Account's main address
	AccountAddress billingAddress = 3; /// Account's billing address.
	AccountAddress shippingAddress = 4; /// Account's shipping address.
}

/**
 * The UpdateAccountAddresses method reply.
 */
message UpdateAccountAddressesReply {
}

/**
 * The GetAccountDetails method request.
 */
message GetAccountDetailsRequest {
	Guid accountId = 1; /// Account id.
}

/**
 * The GetAccountDetails method reply.
 */
message GetAccountDetailsReply {
	AccountDetails accountDetails = 1; /// Requested account details or null if not found.
}

/**
 * The GetAccountDetailsByHash method request.
 */
message GetAccountDetailsByHashRequest {
	string accountHash = 1; /// The account hash.
}

/**
 * The GetAccountDetailsByHash method reply.
 */
message GetAccountDetailsByHashReply {
	AccountDetails accountDetails = 1; /// Requested account details or null> if not found.
}

/**
 * The GetAccountDetailsForAccounts method request.
 */
message GetAccountDetailsForAccountsRequest {
	repeated Guid accountIds = 1; /// Array of account ids.
}

/**
 * The GetAccountDetailsForAccounts method reply.
 */
message GetAccountDetailsForAccountsReply {
	repeated AccountDetails accountDetails = 1; /// An array of account details or null if not found.
}

/**
 * The GetAvailableInvoiceVias method request.
 */
message GetAvailableInvoiceViasRequest {
}

/**
 * The GetAvailableInvoiceVias method reply.
 */
message GetAvailableInvoiceViasReply {
	repeated string invoices = 1; /// A string array with ReceiveInvoiceVia options.
}

/**
 * The ResellerCreateCustomer method request.
 */
message ResellerCreateCustomerRequest {
	Account account = 1; /// The account.
	Login login = 2; /// The login.
	string password = 3; /// The password.
	repeated string roles = 4; /// The roles.
	AccountAddress mainAccountAddress = 5; /// The main address.
	AccountAddress billingAccountAddress = 6; /// The billing address.
	AccountAddress shipppingAccountAddress = 7; /// The shipping address.
	AccountDetails accountDetails = 8; /// The account details.
	string orderNumber = 9; /// The order number.
	string resellerRootDomain = 10; /// The reseller root domain.
}

/**
 * The ResellerCreateCustomer method reply.
 */
message ResellerCreateCustomerReply {
	Guid id = 1; /// Created customer's id.
}

/**
 * The CreateCustomer method request.
 */
message CreateCustomerRequest {
	Account account = 1; /// The account.
	Login login = 2; /// The login.
	string password = 3; /// The password.
	repeated string roles = 4; /// The roles.
	AccountAddress mainAccountAddress = 5; /// The main address.
	AccountAddress billingAccountAddress = 6; /// The billing address.
	AccountAddress shipppingAccountAddress = 7; /// The shipping address.
	AccountDetails accountDetails = 8; /// The account details.
	string orderNumber = 9; /// The order number.
}

/**
 * The CreateCustomer method reply.
 */
message CreateCustomerReply {
	Guid id = 1; /// Created customer's id.
}

/**
 * The CanCreateAccount method request.
 */
message CanCreateAccountRequest {
	string companyNumber = 1; /// Customer's personal/company number.
}

/**
 * The CanCreateAccount method reply.
 */
message CanCreateAccountReply {
	bool value = 1; /// true if customer can create account, false otherwise.
}

/**
 * The GetMainSubscription method request.
 */
message GetMainSubscriptionRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetMainSubscription method reply.
 */
message GetMainSubscriptionReply {
	Subscription subscription = 1; /// Main subscription of given account or null if subscription is not found.
}

/**
 * The ListTerminationOrigins method request.
 */
message ListTerminationOriginsRequest {
}

/**
 * The ListTerminationOrigins method reply.
 */
message ListTerminationOriginsReply {
	repeated TerminationOrigin terminationOrigins = 1; /// List of all possible origins of termination requests.
}

/**
 * The CreateTerminateAccountRequests method request.
 */
message CreateTerminateAccountRequestsRequest {
	repeated AccountTerminationRequest requests = 1; /// The account termination requests.
}

/**
 * The CreateTerminateAccountRequests method reply.
 */
message CreateTerminateAccountRequestsReply {
	repeated GuidBoolDict results = 1; /// Dictionary with results for all accounts. Result is true if termination request is created, otherwise false.
}

/**
 * The ReactivateAccounts method request.
 */
message ReactivateAccountsRequest {
	repeated AccountReactivationRequest	requests = 1; /// The account reactivation requests.
}

/**
 * The ReactivateAccounts method reply.
 */
message ReactivateAccountsReply {
	repeated GuidBoolDict results = 1; /// Dictionary with results for all accounts. Result is true if reactivation is done, otherwise false.
}

/**
 * The IsPossibleToReactivate method request.
 */
message IsPossibleToReactivateRequest {
	repeated Guid accountIds = 1; /// The account ids.
}

/**
 * The IsPossibleToReactivate method reply.
 */
message IsPossibleToReactivateReply {
	repeated GuidBoolDict results = 1; /// Dictionary with results for all accounts. Result is true if reactivation is allowed, otherwise false.
}

/**
 * The IsPendingTermination method request.
 */
message IsPendingTerminationRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The IsPendingTermination method reply.
 */
message IsPendingTerminationReply {
	bool value = 1; /// true if account is scheduled for termination, otherwise false.
}

/**
 * The IsOverMaxDebt method request.
 */
message IsOverMaxDebtRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The IsOverMaxDebt method reply.
 */
message IsOverMaxDebtReply {
	bool value = 1; /// Value which shows whether customer is over maximum debt or not.
}

/**
 * The IsPendingTerminationBulk method request.
 */
message IsPendingTerminationBulkRequest {
	repeated Guid accountIds = 1; /// The list of account ids.
}

/**
 * The IsPendingTerminationBulk method reply.
 */
message IsPendingTerminationBulkReply {
	repeated GuidBoolDict results = 1; /// true if account is scheduled for termination, otherwise false, for every account id.
}

/**
 * The GetPendingTerminationRequest method request.
 */
message GetPendingTerminationRequestRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetPendingTerminationRequest method reply.
 */
message GetPendingTerminationRequestReply {
	AccountTerminationRequest accountTerminationRequest = 1; /// Termination request or null if customer is not pending termination.
}

/**
 * The ResellerGetAccountForUser method request.
 */
message ResellerGetAccountForUserRequest {
	string email = 1; /// The email.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The ResellerGetAccountForUser method reply.
 */
message ResellerGetAccountForUserReply {
	Account account = 1; /// Account of provided user login.
}

/**
 * The GetAccountForUser method request.
 */
message GetAccountForUserRequest {
	string email = 1; /// The email.
}

/**
 * The GetAccountForUser method reply.
 */
message GetAccountForUserReply {
	Account account = 1; /// Account of provided user login.
}

/**
 * The ResellerGetAccountForUserWithDetails method request.
 */
message ResellerGetAccountForUserWithDetailsRequest {
	string username = 1; /// The username.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The ResellerGetAccountForUserWithDetails method reply.
 */
message ResellerGetAccountForUserWithDetailsReply {
	Account account = 1; /// Account for given username.
	Language language = 2; /// The language.
	int32 subAccountsCount = 3; /// The subaccounts count.
}

/**
 * The GetAccountForUserWithDetails method request.
 */
message GetAccountForUserWithDetailsRequest {
	string username = 1; /// The username.
}

/**
 * The GetAccountForUserWithDetails method reply.
 */
message GetAccountForUserWithDetailsReply {
	Account account = 1; /// Account for given username.
	Language language = 2; /// The language.
	int32 subAccountsCount = 3; /// The subaccounts count.
}

/**
 * The GetAccountById method request.
 */
message GetAccountByIdRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetAccountById method reply.
 */
message GetAccountByIdReply {
	Account account = 1; /// The requested account.
}

/**
 * The GetAccountByName method request.
 */
message GetAccountByNameRequest {
	string accountName = 1; /// The account name.
}

/**
 * The GetAccountByName method reply.
 */
message GetAccountByNameReply {
	Account account = 1; /// The requested account.
}

/**
 * The GetLanguageByCode method request.
 */
message GetLanguageByCodeRequest {
	string code = 1; /// The language code.
}

/**
 * The GetLanguageByCode method reply.
 */
message GetLanguageByCodeReply {
	Language language = 1; /// The requested language.
}

/**
 * The SearchSubAccounts method request.
 */
message SearchSubAccountsRequest {
	int32 pageIndex = 1; /// Index of the page.
	int32 pageSize = 2; /// Size of the page.
	string searchPattern = 3; /// The search pattern. Method does searching in: Name, FirstName, LastName, CompanyName.
	repeated string allowedTypes = 4; /// The allowed types. Can be Reseller or Customer.
	repeated string allowedStatuses = 5; /// The allowed statuses.
	repeated string sortColumns = 6; /// The sort column. Can be either Id or CompanyName.
	string sortingDirection = 7; /// The sorting direction, can be asc or desc.
	Guid accountId = 8; /// The account id for which we want subaccounts.
	bool includeAccount = 9; /// If set to true, include account.
}

/**
 * The SearchSubAccounts method reply.
 */
message SearchSubAccountsReply {
	int32 total = 1; /// The total number of rows.
	repeated Account accounts = 2; /// Filtered list of accounts.
}

/**
 * The ResellerSearchManagableAccounts method request.
 */
message ResellerSearchManagableAccountsRequest {
	int32 pageIndex = 1; /// Index of the page.
	int32 pageSize = 2; /// Size of the page.
	string searchPattern = 3; /// The search pattern. Method does searching in: Name, FirstName, LastName and CompanyName.
	repeated string allowedTypes = 4; /// The allowed types. Can be Reseller or Customer.
	repeated string allowedStatuses = 5; /// The allowed statuses.
	repeated string sortColumns = 6; /// The sort column. Can be either Id or CompanyName.
	string sortingDirection = 7; /// The sorting direction, can be asc or desc.
	bool includeAccount = 8; /// If set to true, include account.
	string resellerRootDomain = 9; /// The reseller root domain.
}

/**
 * The ResellerSearchManagableAccounts method reply.
 */
message ResellerSearchManagableAccountsReply {
	int32 total = 1; /// The total number of rows.
	repeated Account accounts = 2; /// Filtered list of accounts.
}

/**
 * The GetThemeCustomization method request.
 */
message GetThemeCustomizationRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetThemeCustomization method reply.
 */
message GetThemeCustomizationReply {
	ThemeCustomization themeCustomization = 1; /// Theme customization for given account id or null if there aren't any.
}

/**
 * The ListResellersWithCustomPrices method request.
 */
message ListResellersWithCustomPricesRequest {
}

/**
 * The ListResellersWithCustomPrices method reply.
 */
message ListResellersWithCustomPricesReply {
	repeated Account accounts = 1; /// List of resellers.
}

/**
 * The SearchAccountDetails method request.
 */
message SearchAccountDetailsRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// Size of the page.
	string order = 3; /// The order type (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchAccountDetails method reply.
 */
message SearchAccountDetailsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated AccountDetails accountDetails = 2; /// Fileterd list of account details.
}

/**
 * The ResellerAddExtraUsernameAccount method request.
 */
message ResellerAddExtraUsernameAccountRequest {
	string username = 1; /// The username.
	Guid accountId = 2; /// The account id.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerAddExtraUsernameAccount method reply.
 */
message ResellerAddExtraUsernameAccountReply {
}

/**
 * The ResellerRemoveExtraUsernameAccount method request.
 */
message ResellerRemoveExtraUsernameAccountRequest {
	string username = 1; /// The username.
	Guid accountId = 2; /// The account id.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerRemoveExtraUsernameAccount method reply.
 */
message ResellerRemoveExtraUsernameAccountReply {
}

/**
 * The ResellerGetExtraUsernameAccounts method request.
 */
message ResellerGetExtraUsernameAccountsRequest {
	string username = 1; /// The username.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The ResellerGetExtraUsernameAccounts method reply.
 */
message ResellerGetExtraUsernameAccountsReply {
	repeated Guid accountIds = 1; /// A list of account ids that the username has access to.
}

/**
 * The ResellerHasExtraUsernameAccount method request.
 */
message ResellerHasExtraUsernameAccountRequest {
	string username = 1; /// The username
	Guid accountId = 2; /// The account id.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerHasExtraUsernameAccount method reply.
 */
message ResellerHasExtraUsernameAccountReply {
	bool value = 1; /// True if the username has access to the account id, otherwise false.
}

/**
 * The GetPaymentMethods method request.
 */
message GetPaymentMethodsRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetPaymentMethods method reply.
 */
message GetPaymentMethodsReply {
	repeated PaymentMethod paymentMethods = 1; /// List of available payment methods.
}

/**
 * The GetAllPaymentMethods method request.
 */
message GetAllPaymentMethodsRequest {
}

/**
 * The GetAllPaymentMethods method reply.
 */
message GetAllPaymentMethodsReply {
	repeated PaymentMethod paymentMethods = 1; /// List of available payment methods.
}

/**
 * The GetDefaultPaymentMethod method request.
 */
message GetDefaultPaymentMethodRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetDefaultPaymentMethod method reply.
 */
message GetDefaultPaymentMethodReply {
	PaymentMethod paymentMethod = 1; /// The default payment method.
}

/**
 * The ResellerCreatetOneTimeLoginToken method request.
 */
message ResellerCreatetOneTimeLoginTokenRequest {
	string username = 1; /// The username.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The ResellerCreatetOneTimeLoginToken method reply.
 */
message ResellerCreatetOneTimeLoginTokenReply {
	string token = 1; /// The one time login token or an empty string of something went wrong.
}

/**
 * The CreateInvoice method request.
 */
message CreateInvoiceRequest {
	Invoice invoice = 1; /// The invoice.
	bool appendToUnsent = 2; /// If set to true invoice will be appended to unsent invoice.
}

/**
 * The CreateInvoice method reply.
 */
message CreateInvoiceReply {
	Invoice invoice = 1; /// The created invoice.
}

/**
 * The CreateInvoiceFromOrder method request.
 */
message CreateInvoiceFromOrderRequest {
	Order order = 1; /// The order.
	bool appendToUnsent = 2; /// If set to true invoice will be appended to unsent invoice.
}

/**
 * The CreateInvoiceFromOrder method reply.
 */
message CreateInvoiceFromOrderReply {
	Invoice invoice = 1; /// The created invoice.
}

/**
 * The GetInvoices method request.
 */
message GetInvoicesRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// Order of the results (asc or desc).
	string propertyNameToOrder = 4; /// Property to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetInvoices method reply.
 */
message GetInvoicesReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Invoice invoices = 2; /// The list of invoices.
	repeated string CustomObjects = 3; /// The list of custom objects.
}

/**
 * The ListInvoicesForAutocredit method request.
 */
message ListInvoicesForAutocreditRequest {
	Subscription subscription = 1; /// The subscription.
	bool isTerminated = 2; /// If set to true subscription is terminated (not upgraded nor downgraded).
}

/**
 * The ListInvoicesForAutocredit method reply.
 */
message ListInvoicesForAutocreditReply {
	repeated string invoicesForAutocredit = 1; /// Array of numbers of invoices that will be autocredited.
}

/**
 * The GetInvoiceById method request.
 */
message GetInvoiceByIdRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The GetInvoiceById method reply.
 */
message GetInvoiceByIdReply {
	Invoice invoice = 1; /// The requested invoice.
}

/**
 * The ResellerGetInvoiceByNo method request.
 */
message ResellerGetInvoiceByNoRequest {
	string invoiceNo = 1; /// The invoice number.
	string username = 2; /// The username.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerGetInvoiceByNo method reply.
 */
message ResellerGetInvoiceByNoReply {
	Invoice invoice = 1; /// The requested invoice.
}

/**
 * The GetInvoiceByNo method request.
 */
message GetInvoiceByNoRequest {
	string invoiceNo = 1; /// The invoice number.
	string username = 2; /// The username.
}

/**
 * The GetInvoiceByNo method reply.
 */
message GetInvoiceByNoReply {
	Invoice invoice = 1; /// The requested invoice.
}

/**
 * The ResellerGetPaidAmount method request.
 */
message ResellerGetPaidAmountRequest {
	string invoiceNo = 1; /// The invoice number.
	string username = 2; /// The username.
	string resellerRootDomain = 3; /// The reseller root domain.
}

/**
 * The ResellerGetPaidAmount method reply.
 */
message ResellerGetPaidAmountReply {
	Decimal paidAmount = 1; /// The paid amount for the invoice.
}

/**
 * The GetPaidAmount method request.
 */
message GetPaidAmountRequest {
	string invoiceNo = 1; /// The invoice number.
	string username = 2; /// The username.
}

/**
 * The GetPaidAmount method reply.
 */
message GetPaidAmountReply {
	Decimal paidAmount = 1; /// The paid amount for the invoice.
}

/**
 * The GetReceiptInfo method request.
 */
message GetReceiptInfoRequest {
	Invoice invoice = 1; /// The invoice.
}

/**
 * The GetReceiptInfo method reply.
 */
message GetReceiptInfoReply {
	Invoice invoice = 1; /// Invoice with custom attributes filled with transaction number and timestamp.
}

/**
 * The UpdateInvoice method request.
 */
message UpdateInvoiceRequest {
	Invoice invoice = 1; /// The invoice.
}

/**
 * The UpdateInvoice method reply.
 */
message UpdateInvoiceReply {
}

/**
 * The GetInvoiceOverview method request.
 */
message GetInvoiceOverviewRequest {
	Guid accountId = 1; /// The account id.
	Guid customerId = 2; /// The customer id.
}

/**
 * The GetInvoiceOverview method reply.
 */
message GetInvoiceOverviewReply {
	repeated InvoiceOverview invoiceOverviews = 1; /// The invoice overview.
}

/**
 * The DeleteInvoice method request.
 */
message DeleteInvoiceRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The DeleteInvoice method reply.
 */
message DeleteInvoiceReply {
}

/**
 * The PrintInvoices method request.
 */
message PrintInvoicesRequest {
	repeated Guid invoiceIds = 1; /// Ids of invoices for printing.
}

/**
 * The PrintInvoices method reply.
 */
message PrintInvoicesReply {
	bytes data = 1; /// A byte stream of the PDF file with the printed invoices.
}

/**
 * The PrintInvoicesWithPrintOption method request.
 */
message PrintInvoicesWithPrintOptionRequest {
	repeated Guid invoiceIds = 1; /// Ids of invoices for printing.
	/**
	 * Print option descriptor.
	 */
	enum PrintOption {
		FullGraphics = 0; /// Full graphics print option.
		NoBackground = 1; /// No background print option.
		Default = 2; /// Full graphics print option.
	}
	PrintOption printOption = 2; /// The print option.
}

/**
 * The PrintInvoicesWithPrintOption method reply.
 */
message PrintInvoicesWithPrintOptionReply {
	bytes data = 1; /// A byte stream of the PDF file with the printed invoices.
}

/**
 * The PrintReceiptsWithPrintOption method request.
 */
message PrintReceiptsWithPrintOptionRequest {
	repeated Guid invoiceIds = 1; /// Ids of invoices for printing.
	/**
	 * Print option descriptor.
	 */
	enum PrintOption {
		FullGraphics = 0; /// Full graphics print option.
		NoBackground = 1; /// No background print option.
		Default = 2; /// Full graphics print option.
	}
	PrintOption printOption = 2; /// The print option.
}

/**
 * The PrintReceiptsWithPrintOption method reply.
 */
message PrintReceiptsWithPrintOptionReply {
	bytes data = 1; /// A byte stream of the PDF file with the printed invoices.
}

/**
 * The SendInvoices method request.
 */
message SendInvoicesRequest {
	repeated Guid invoiceIds = 1; /// Ids of invoices for sending.
	BulkSendJob job = 2; /// Bulk job used for sending invoices.
}

/**
 * The SendInvoices method reply.
 */
message SendInvoicesReply {
	BulkSendJob job = 1; /// Created/updated bulk job for sending invoices.
}

/**
 * The CheckInvoiceOrder method request.
 */
message CheckInvoiceOrderRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The CheckInvoiceOrder method reply.
 */
message CheckInvoiceOrderReply {
	bool value = 1; /// true if sending order is ok, false otherwise.
}

/**
 * The CheckInvoiceSendingOrder method request.
 */
message CheckInvoiceSendingOrderRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The CheckInvoiceSendingOrder method reply.
 */
message CheckInvoiceSendingOrderReply {
	bool value = 1; /// Result of the event handler.
}

/**
 * The BulkPrintAndSendInvoices method request.
 */
message BulkPrintAndSendInvoicesRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The BulkPrintAndSendInvoices method request.
 */
message BulkPrintAndSendInvoicesReply {
	Guid id = 1; /// The created BulkSendJob ID.
}

/**
 * The BulkPrintInvoices method request.
 */
message BulkPrintInvoicesRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The BulkPrintInvoices method reply.
 */
message BulkPrintInvoicesReply {
	Guid id = 1; /// The created BulkSendJob ID.
}

/**
 * The BulkSendInvoices method request.
 */
message BulkSendInvoicesRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The BulkSendInvoices method reply.
 */
message BulkSendInvoicesReply {
	Guid id = 1; /// The created BulkSendJob ID.
}

/**
 * The BulkPrintInvoicesSynchronous method request.
 */
message BulkPrintInvoicesSynchronousRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The BulkPrintInvoicesSynchronous method reply.
 */
message BulkPrintInvoicesSynchronousReply {
	Guid id = 1; /// The created BulkSendJob ID.
}

/**
 * The BulkSendInvoicesSynchronous method request.
 */
message BulkSendInvoicesSynchronousRequest {
	repeated Guid invoiceIds = 1; /// The invoice ids.
}

/**
 * The BulkSendInvoicesSynchronous method reply.
 */
message BulkSendInvoicesSynchronousReply {
	Guid id = 1; /// The created BulkSendJob ID.
}

/**
 * The ListUnpaidInvoices method request.
 */
message ListUnpaidInvoicesRequest {
	Guid customerId = 1; /// The customer id.

	/**
	 * Termination option enumeration.
	 */
	enum TerminationOption {
		Immediate = 0; /// Immediate termination option.
		EndOfCurrentSubscription = 1; /// Termination by the end of current subscription option.
	}
	TerminationOption terminationOption = 2; /// The termination option.
	int32 firstRow = 3; /// The first row.
	int32 pageSize = 4; /// The page size.
	string order = 5; /// The order (asc or desc).
	string propertyNameToOrder = 6; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 7; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 8; /// The conjunctions.
}

/**
 * The ListUnpaidInvoices method reply.
 */
message ListUnpaidInvoicesReply {
	int32 totalRows = 1;  /// The total number of rows.
	repeated Invoice invoices = 2; /// The list of unpaid invoices.
}

/**
 * The GetFinancialObligation method request.
 */
message GetFinancialObligationRequest {
	Guid customerId = 1; /// The customer id.
	/**
	 * Termination option enumeration.
	 */
	enum TerminationOption {
		Immediate = 0; /// Immediate termination option.
		EndOfCurrentSubscription = 1; /// Termination by the end of current subscription option.
	}
	TerminationOption terminationOption = 2; /// The termination option.
}

/**
 * The GetFinancialObligation method reply.
 */
message GetFinancialObligationReply {
	FinancialObligation financialObligation = 1; /// Object that encapsulates data needed to print financial obligation notice.
}

/**
 * The GetNextPostpaidInvoiceDate method request.
 */
message GetNextPostpaidInvoiceDateRequest {
	Guid customerId = 1; /// The customer id.
}

/**
 * The GetNextPostpaidInvoiceDate method reply.
 */
message GetNextPostpaidInvoiceDateReply {
	UnixTime nextDate = 1; /// The next invoice date.
}

/**
 * The IsPaymentPossible method request.
 */
message IsPaymentPossibleRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The IsPaymentPossible method reply.
 */
message IsPaymentPossibleReply {
	bool value = 1; /// True if a payment is possible on the invoice, otherwise false.
}

/**
 * The GetNextInvoiceReminder method request.
 */
message GetNextInvoiceReminderRequest {
	Invoice invoice = 1; /// The invoice.
}

/**
 * The GetNextInvoiceReminder method reply.
 */
message GetNextInvoiceReminderReply {
	InvoiceReminder invoiceReminder = 1; /// The next invoice reminder.
}

/**
 * The CreateCreditedInvoice method request.
 */
message CreateCreditedInvoiceRequest {
	CreditedInvoice invoice = 1; /// The credited invoice to be persisted.
	bool appendToUnsent = 2; /// If set to true invoice will be appended to unsent invoice.
}

/**
 * The CreateCreditedInvoice method reply.
 */
message CreateCreditedInvoiceReply {
	CreditedInvoice invoice = 1; /// The persisted invoice.
}

/**
 * The CreateCreditedInvoiceFromInvoice method request.
 */
message CreateCreditedInvoiceFromInvoiceRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The CreateCreditedInvoiceFromInvoice method reply.
 */
message CreateCreditedInvoiceFromInvoiceReply {
	CreditedInvoice invoice = 1; /// The created credited invoice.
}

/**
 * The GetCreditedInvoices method request.
 */
message GetCreditedInvoicesRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The sorting order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetCreditedInvoices method reply.
 */
message GetCreditedInvoicesReply {
	int32 totalRows = 1;  /// The total number of rows.
	repeated CreditedInvoice creditedInvoices = 2; /// The list of credit invoices.
}

/**
 * The GetCreditedInvoicesOfInvoice method request.
 */
message GetCreditedInvoicesOfInvoiceRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The GetCreditedInvoicesOfInvoice method reply.
 */
message GetCreditedInvoicesOfInvoiceReply {
	repeated CreditedInvoice creditedInvoices = 1; /// The list of credited invoices.
}

/**
 * The GetCreditedInvoiceById method request.
 */
message GetCreditedInvoiceByIdRequest {
	Guid invoiceId = 1; /// The invoice id.
}

/**
 * The GetCreditedInvoiceById method reply.
 */
message GetCreditedInvoiceByIdReply {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice.
}

/**
 * The GetCreditedInvoiceByNo method request.
 */
message GetCreditedInvoiceByNoRequest {
	string invoiceNo = 1; /// The invoice number.
}

/**
 * The GetCreditedInvoiceByNo method reply.
 */
message GetCreditedInvoiceByNoReply {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice.
}

/**
 * The UpdateCreditedInvoice method request.
 */
message UpdateCreditedInvoiceRequest {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice to be updated.
}

/**
 * The UpdateCreditedInvoice method reply.
 */
message UpdateCreditedInvoiceReply {
}

/**
 * The CalculateCreditedInvoiceTotals method request.
 */
message CalculateCreditedInvoiceTotalsRequest {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice.
}

/**
 * The CalculateCreditedInvoiceTotals method reply.
 */
message CalculateCreditedInvoiceTotalsReply {
	CreditedInvoice creditedInvoice = 1; /// Credited invoice with updated totals.
}

/**
 * The SendCreditedInvoices method request.
 */
message SendCreditedInvoicesRequest {
	repeated Guid invoiceIds = 1; /// Ids of credited invoices for sending.
	BulkSendJob job = 2; /// Bulk job used for sending invoices.
}

/**
 * The SendCreditedInvoices method reply.
 */
message SendCreditedInvoicesReply {
	BulkSendJob job = 1; /// Created/updated bulk job for sending invoices.
}

/**
 * The PrintCreditedInvoices method request.
 */
message PrintCreditedInvoicesRequest {
	repeated Guid invoiceIds = 1; /// Ids of credited invoices for printing.
}

/**
 * The PrintCreditedInvoices method reply.
 */
message PrintCreditedInvoicesReply {
	bytes data = 1; /// A byte stream of the PDF file with the printed credited invoices.
}

/**
 * The PrintCreditedInvoicesWithPrintOption method request.
 */
message PrintCreditedInvoicesWithPrintOptionRequest {
	repeated Guid invoiceIds = 1; /// Ids of credited invoices for printing.
	/**
	 * Print option descriptor.
	 */
	enum PrintOption {
		FullGraphics = 0; /// Full graphics print option.
		NoBackground = 1; /// No background print option.
		Default = 2; /// Full graphics print option.
	}
	PrintOption printOption = 2; /// The print option.
}

/**
 * The PrintCreditedInvoicesWithPrintOption method reply.
 */
message PrintCreditedInvoicesWithPrintOptionReply {
	bytes data = 1; /// A byte stream of the PDF file with the printed credited invoices.
}

/**
 * The CreatePartiallyCreditedInvoice method request.
 */
message CreatePartiallyCreditedInvoiceRequest {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice to be persisted. 
	repeated Guid nonCreditedLinesIds = 2; /// The non credited lines ids.
}

/**
 * The CreatePartiallyCreditedInvoice method reply.
 */
message CreatePartiallyCreditedInvoiceReply {
	CreditedInvoice creditedInvoice = 1; /// Created credited invoice.
}

/**
 * The CreateJob method request.
 */
message CreateJobRequest {
	BulkSendJob job = 1; /// The bulk send job.
}

/**
 * The CreateJob method reply.
 */
message CreateJobReply {
	BulkSendJob job = 1; /// The created bulk send job.
}

/**
 * The GetBulkSendJobById method request.
 */
message GetBulkSendJobByIdRequest {
	Guid jobId = 1; /// The bulk send job id.
}

/**
 * The GetBulkSendJobById method reply.
 */
message GetBulkSendJobByIdReply {
	BulkSendJob job = 1; /// The bulk send job.
}

/**
 * The UpdateBulkSendStatus method request.
 */
message UpdateBulkSendStatusRequest {
	BulkSendStatus bulkStatus = 1; /// The bulk send status.
}

/**
 * The UpdateBulkSendStatus method reply.
 */
message UpdateBulkSendStatusReply {
}

/**
 * The GetBulkSendStatusByExternalId method request.
 */
message GetBulkSendStatusByExternalIdRequest {
	Guid externalId = 1; /// The external id.
}

/**
 * The GetBulkSendStatusByExternalId method reply.
 */
message GetBulkSendStatusByExternalIdReply {
	BulkSendStatus bulkStatus = 1; /// Requsted bulk send status.
}

/**
 * The UpdateBulkSendJob method request.
 */
message UpdateBulkSendJobRequest {
	BulkSendJob job = 1; /// Bulk send job to be updated.
}

/**
 * The UpdateBulkSendJob method reply.
 */
message UpdateBulkSendJobReply {
	BulkSendJob job = 1; /// Updated bulk send job.
}

/**
 * The GetBulkSendStatusById method request.
 */
message GetBulkSendStatusByIdRequest {
	Guid id = 1; /// The bulk send status id.
}

/**
 * The GetBulkSendStatusById method reply.
 */
message GetBulkSendStatusByIdReply {
	BulkSendStatus bulkStatus = 1; /// The bulk send status.
}

/**
 * The SearchBulkSendStatuses method request.
 */
message SearchBulkSendStatusesRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchBulkSendStatuses method reply.
 */
message SearchBulkSendStatusesReply {
	int32 totalRows = 1;  /// The total number of rows.
	repeated BulkSendStatus bulkSendStatuses = 2; /// A list of bulk send statuses.
}

/**
 * The ListBulkSendStatusesForCustomer method request.
 */
message ListBulkSendStatusesForCustomerRequest {
	string searchString = 1; /// The search string.
	int32 firstRow = 2; /// The first row.
	int32 pageSize = 3; /// The page size.
	string order = 4; /// The order (asc or desc).
	string propertyNameToOrder = 5; /// The property name to order by.
	Guid customerId = 6; /// The customer id.
	NullableUnixTime dateFrom = 7; /// Date from.
	NullableUnixTime dateTo = 8; /// Date to.
	repeated string statuses = 9; /// Statuses list.
}

/**
 * The ListBulkSendStatusesForCustomer method reply.
 */
message ListBulkSendStatusesForCustomerReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated BulkSendStatus bulkSendStatuses = 2; /// A list of bulk send statuses.
}

/**
 * The CreateOrder method request.
 */
message CreateOrderRequest {
	Order order = 1; /// The order.
}

/**
 * The CreateOrder method reply.
 */
message CreateOrderReply {
	Order order = 1; /// The created order.
}

/**
 * The MakeOrder method request.
 */
message MakeOrderRequest {
	Order order = 1; /// The order.
}

/**
 * The MakeOrder method reply.
 */
message MakeOrderReply {
	Order order = 1; /// The created order.
}

/**
 * The MakeOrderWithLoginToken method request.
 */
message MakeOrderWithLoginTokenRequest {
	Order order = 1; /// The order.
	string resellerRootDomain = 2; /// The reseller root domain.
}

/**
 * The MakeOrderWithLoginToken method reply.
 */
message MakeOrderWithLoginTokenReply {
	Order order = 1; /// The created order.
	string token = 2; /// The login token.
}

/**
 * The GetOrders method request.
 */
message GetOrdersRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetOrders method reply.
 */
message GetOrdersReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Order orders = 2; /// The list of orders.
}

/**
 * The GetOrderById method request.
 */
message GetOrderByIdRequest {
	Guid orderId = 1; /// The order id.
}

/**
 * The GetOrderById method reply.
 */
message GetOrderByIdReply {
	Order order = 1; /// The requested order.
}

/**
 * The GetOrderByNumber method request.
 */
message GetOrderByNumberRequest {
	string orderNumber = 1; /// The order number.
	Guid resellerId = 2; /// The reseller id.
}

/**
 * The GetOrderByNumber method reply.
 */
message GetOrderByNumberReply {
	Order order = 1; /// The requested order.
}

/**
 * The GetOrdersByInvoiceNumber method request.
 */
message GetOrdersByInvoiceNumberRequest {
	string invoiceNumber = 1; /// The invoice number.
	Guid resellerId = 2; /// The reseller id.
}

/**
 * The GetOrdersByInvoiceNumber method reply.
 */
message GetOrdersByInvoiceNumberReply {
	repeated Order orders = 1; /// The list of orders tied to the invoice.
}

/**
 * The GetOrderStatus method request.
 */
message GetOrderStatusRequest {
	Guid orderId = 1; /// The order id.
}

/**
 * The GetOrderStatus method reply.
 */
message GetOrderStatusReply {
	/**
	 * Order status enumeration.
	 */
	enum OrderStatus {
		PlacementFailed = 0; /// Placement failed.
		PlacementOk = 1; /// Placement Ok.
		ProcessingFailed = 2; /// Processing failed.
		ManualReviewWanted = 3; /// Manual review wanted.
		ProcessedOk = 4; /// Processed Ok.
		ReviewOk = 5; /// Review Ok.
		Deleted = 6; /// Deleted.
		TimedOut = 7; /// Timed out.
		PendingPayment = 8; /// Pending payment.
		Processing = 9; /// Processing.
		CustomerOverDebtLimit = 10; /// Customer over debt limit.
	}
	OrderStatus orderStatus = 1; /// The order status.
}

/**
 * The UpdateOrder method request.
 */
message UpdateOrderRequest {
	Order order = 1; /// The order to update.
}

/**
 * The UpdateOrder method reply.
 */
message UpdateOrderReply {
}

/**
 * The ChangeOrderStatus method request.
 */
message ChangeOrderStatusRequest {
	repeated Guid orderIds = 1; /// The order ids.
	/**
	 * Order status enumeration.
	 */
	enum OrderStatus {
		PlacementFailed = 0; /// Placement failed.
		PlacementOk = 1; /// Placement Ok.
		ProcessingFailed = 2; /// Processing failed.
		ManualReviewWanted = 3; /// Manual review wanted.
		ProcessedOk = 4; /// Processed Ok.
		ReviewOk = 5; /// Review Ok.
		Deleted = 6; /// Deleted.
		TimedOut = 7; /// Timed out.
		PendingPayment = 8; /// Pending payment.
		Processing = 9; /// Processing.
		CustomerOverDebtLimit = 10; /// Customer over debt limit.
	}
	OrderStatus orderStatus = 2; /// The order status.
}

/**
 * The ChangeOrderStatus method reply.
 */
message ChangeOrderStatusReply {
	int32 value = 1; /// Number of orders with changed statuses.
}

/**
 * The ProcessPublicOrder method request.
 */
message ProcessPublicOrderRequest {
	Order order = 1; /// The order.
	Guid resellerId = 2; /// The reseller id.
}

/**
 * The ProcessPublicOrder method reply.
 */
message ProcessPublicOrderReply {
	Order order = 1; /// The order.
}

/**
 * The CalculateTotals method request.
 */
message CalculateTotalsRequest {
	Order order = 1; /// The order.
}

/**
 * The CalculateTotals method reply.
 */
message CalculateTotalsReply {
	Order order = 1; /// The order with updated totals.
}

/**
 * The ProcessOrder method request.
 */
message ProcessOrderRequest {
	Order order = 1; /// The order to process.
}

/**
 * The ProcessOrder method reply.
 */
message ProcessOrderReply {
}

/**
 * The CheckDomains method request.
 */
message CheckDomainsRequest {
	repeated string domains = 1; /// Domains to be checked.
}

/**
 * The CheckDomains method reply.
 */
message CheckDomainsReply {
	repeated AttributeData attributeData = 1; /// Domain statuses.
}

/**
 * The CheckDomainsForTransfer method request.
 */
message CheckDomainsForTransferRequest {
	repeated string domains = 1; /// Domains to be checked.
}

/**
 * The CheckDomainsForTransfer method reply.
 */
message CheckDomainsForTransferReply {
	repeated AttributeData attributeData = 1; /// Domain statuses.
}

/**
 * The CreateSubscription method request.
 */
message CreateSubscriptionRequest {
	Subscription subscription = 1; /// The subscription to be created.
	Subscription oldSubscription = 2; /// The previous subscription (used in upgrade/downgrade process).
	bool doInvoicing = 3; /// If set to true subscription creation process will also create invoice for that subscription.
}

/**
 * The CreateSubscription method reply.
 */
message CreateSubscriptionReply {
	Subscription subscription = 1; /// The created subscription.
}

/**
 * The CreateSubscriptions method request.
 */
message CreateSubscriptionsRequest {
	repeated Subscription subscriptions = 1; /// The subscriptions
	repeated Subscription oldSubscriptions = 2; /// The previous subscriptions (used in upgrade/downgrade process).
	bool doInvoicing = 3; /// If set to true subscription creation process will also create invoice for that subscription.
}

/**
 * The CreateSubscriptions method reply.
 */
message CreateSubscriptionsReply {
	repeated Subscription subscriptions = 1; /// The created subscriptions.
}

/**
 * The UpdateSubscription method request.
 */
message UpdateSubscriptionRequest {
	Subscription subscription = 1; /// The subscription to update.
}

/**
 * The UpdateSubscription method reply.
 */
message UpdateSubscriptionReply {
}

/**
 * The UpdateSubscriptionRenewalData method request.
 */
message UpdateSubscriptionRenewalDataRequest {
	Guid subscriptionId = 1; /// The subscription id.
	bool recurring = 2; /// The recurring flag.
	UnixTime nextRenewalDate = 3; /// The next renewal date.
}

/**
 * The UpdateSubscriptionRenewalData method reply.
 */
message UpdateSubscriptionRenewalDataReply {
}

/**
 * The GetSubscriptions method request.
 */
message GetSubscriptionsRequest {
	Account account = 1; /// The account.
	repeated string allowedStates = 2; /// The allowed states.
	repeated string notAllowedStates = 3; /// Not allowed states.
}

/**
 * The GetSubscriptions method reply.
 */
message GetSubscriptionsReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions.
}

/**
 * The GetSubscriptionsForCustomer method request.
 */
message GetSubscriptionsForCustomerRequest {
	Account customer = 1; /// The customer.
	repeated string allowedStates = 2; /// The allowed states.
	repeated string notAllowedStates = 3; /// Not allowed states.
}

/**
 * The GetSubscriptionsForCustomer method reply.
 */
message GetSubscriptionsForCustomerReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions for the customer.
}

/**
 * The GetPackageSubscriptions method request.
 */
message GetPackageSubscriptionsRequest {
	Account customer = 1; /// The customer.
	repeated string allowedStates = 2; /// The allowed states.
	repeated string notAllowedStates = 3; /// Not allowed states.
}

/**
 * The GetPackageSubscriptions method reply.
 */
message GetPackageSubscriptionsReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions.
}

/**
 * The GetSubscriptionById method request.
 */
message GetSubscriptionByIdRequest {
	Guid subscriptionId = 1; /// The subscription id.
	Account account = 2; /// The account.
}

/**
 * The GetSubscriptionById method reply.
 */
message GetSubscriptionByIdReply {
	Subscription subscription = 1; /// The subscription.
}

/**
 * The GetSubscriptionsByIdsAndLanguage method request.
 */
message GetSubscriptionsByIdsAndLanguageRequest {
	repeated Guid subscriptionIds = 1; /// The subscription ids.
	string languageIsoCode = 2; /// The language ISO code.
}

/**
 * The GetSubscriptionsByIdsAndLanguage method reply.
 */
message GetSubscriptionsByIdsAndLanguageReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions.
}

/**
 * The GetSubscriptionByFriendlyId method request.
 */
message GetSubscriptionByFriendlyIdRequest {
	string subscriptionFriendlyId = 1; /// The friendly id of the subscription.
	Account account = 2; /// The account.
}

/**
 * The GetSubscriptionByFriendlyId method reply.
 */
message GetSubscriptionByFriendlyIdReply {
	Subscription subscription = 1; /// The subscription
}

/**
 * The GetSubscriptionsByFriendlyId method request.
 */
message GetSubscriptionsByFriendlyIdRequest {
	string subscriptionFriendlyId = 1; /// The friendly id of the subscription.
	Account account = 2; /// The account.
}

/**
 * The GetSubscriptionsByFriendlyId method reply.
 */
message GetSubscriptionsByFriendlyIdReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions.
}

/**
 * The GetSubscriptionsForRenewalPeriod method request.
 */
message GetSubscriptionsForRenewalPeriodRequest {
	Guid renewalPeriodId = 1; /// The renewal period id.
	string languageIsoCode = 2; /// The language ISO code.
	repeated string allowedStates = 3; /// The allowed states.
	repeated string notAllowedStates = 4; /// Not allowed states.
}

/**
 * The GetSubscriptionsForRenewalPeriod method reply.
 */
message GetSubscriptionsForRenewalPeriodReply {
	repeated Subscription subscriptions = 1; /// The list of subscriptions.
}

/**
 * The TerminateSubscription method request.
 */
message TerminateSubscriptionRequest {
	Guid subscriptionId = 1; /// The subscription id.
	string reason = 2; /// The reason.
}

/**
 * The TerminateSubscription method reply.
 */
message TerminateSubscriptionReply {
}

/**
 * The ProvisionSubscriptions method request.
 */
message ProvisionSubscriptionsRequest {
}

/**
 * The ProvisionSubscriptions method reply.
 */
message ProvisionSubscriptionsReply {
}

/**
 * The ProvisionSubscriptionsWithStateFilter method request.
 */
message ProvisionSubscriptionsWithStateFilterRequest {
	repeated string subscriptionStates = 1; /// A list of states that should be used when fetching subscriptions to provision. 
}

/**
 * The ProvisionSubscriptionsWithStateFilter method reply.
 */
message ProvisionSubscriptionsWithStateFilterReply {
}

/**
 * The ProvisionSubscription method request.
 */
message ProvisionSubscriptionRequest {
	Subscription subscription = 1; /// The subscription to provision.
}

/**
 * The ProvisionSubscription method reply.
 */
message ProvisionSubscriptionReply {
	Subscription subscription = 1; /// The provisioned subscription.
}

/**
 * The CountSubscriptionsByType method request.
 */
message CountSubscriptionsByTypeRequest {
	string type = 1; /// The subscription type.
	Guid customerId = 2; /// The customer id.
}

/**
 * The CountSubscriptionsByType method reply.
 */
message CountSubscriptionsByTypeReply {
	int32 numberOfSubscriptions = 1; /// Number of subscriptions of passed type for passed customer.
}

/**
 * The CountSubscriptionsByTypesAndStatuses method request.
 */
message CountSubscriptionsByTypesAndStatusesRequest {
	Guid customerId = 1; /// The customer id.
	repeated string subscriptionTypes = 2; /// The subscription types.
	repeated string allowedStates = 3; /// The allowed states.
	repeated string notAllowedStates = 4; /// Not allowed states.
	repeated string provisioningStatuses = 5; /// The provisioning statuses.
	NullableBool recurring = 6; /// The recurring flag. Set to null to include both recurring and non-recurring subscriptions.
}

/**
 * The CountSubscriptionsByTypesAndStatuses method reply.
 */
message CountSubscriptionsByTypesAndStatusesReply {
	int32 numberOfSubscriptions = 1; /// Number of subscriptions.
}

/**
 * The SearchSubscriptions method request.
 */
message SearchSubscriptionsRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchSubscriptions method reply.
 */
message SearchSubscriptionsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Subscription subscriptions = 2; /// The list of subscriptions.
}

/**
 * The GetPossibleStates method request.
 */
message GetPossibleStatesRequest {
	string currentState = 1; /// The current state
}

/**
 * The GetPossibleStates method reply.
 */
message GetPossibleStatesReply {
	repeated string possibleStates = 1; /// List of possible states.
}

/**
 * The GetPossibleStateRules method request.
 */
message GetPossibleStateRulesRequest {
}

/**
 * The GetPossibleStateRules method reply.
 */
message GetPossibleStateRulesReply {
	repeated StrStrArrDict stateRules = 1; /// Possible states.
}

/**
 * The SearchTasksToRun method request.
 */
message SearchTasksToRunRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6;	/// The conjunctions.
}

/**
 * The SearchTasksToRun method reply.
 */
message SearchTasksToRunReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated TasksToRun tasksToRun = 2; /// The list of tasks to run.
}

/**
 * The GetTasksToRunOverview method request.
 */
message GetTasksToRunOverviewRequest {
}

/**
 * The GetTasksToRunOverview method reply.
 */
message GetTasksToRunOverviewReply {
	repeated TasksToRunOverview tasksToRunOverview = 1; /// A list of type TasksToRunOverview.
}

/**
 * The GetNumTasksPossibleToUpdate method request.
 */
message GetNumTasksPossibleToUpdateRequest {
	repeated Guid guids = 1; /// Ids of tasks to be checked.
	string status = 2; /// Tasks status.
}

/**
 * The GetNumTasksPossibleToUpdate method reply.
 */
message GetNumTasksPossibleToUpdateReply {
	int32 numberOfTasks = 1; /// Number of tasks that can be updated (approved).
}

/**
 * The ChangeTasksToRunStatus method request.
 */
message ChangeTasksToRunStatusRequest {
	repeated Guid guids = 1; /// Ids of tasks which will be updated.
	string newStatus = 2; /// The new status.
}

/**
 * The ChangeTasksToRunStatus method reply.
 */
message ChangeTasksToRunStatusReply {
	int32 value = 1; /// Number of updated tasks.
}

/**
 * The ChangeSubscriptionStatus method request.
 */
message ChangeSubscriptionStatusRequest {
	repeated Guid subscriptionIds = 1; /// The subscription ids.
	string newStatus = 2; /// The new status.
	string reason = 3; /// The reason.
}

/**
 * The ChangeSubscriptionStatus method reply.
 */
message ChangeSubscriptionStatusReply {
	int32 value = 1; /// Number of updated subscriptions.
}

/**
 * The IsPossibleState method request.
 */
message IsPossibleStateRequest {
	string currentState = 1; /// The current state.
	string newState = 2; /// The new state.
}

/**
 * The IsPossibleState method reply.
 */
message IsPossibleStateReply {
	bool value = 1; /// true if the state change is possible, otherwise false.
}

/**
 * The BindSubscriptionsToInvoice method request.
 */
message BindSubscriptionsToInvoiceRequest {
	repeated Guid subscriptionIds = 1; /// The subscription ids.
	string invoiceFriendlyId = 2; /// The invoie friendly id.
}

/**
 * The BindSubscriptionsToInvoice method reply.
 */
message BindSubscriptionsToInvoiceReply {
	int32 numberOfSubscriptions = 1; /// Number of updated subscriptions.
}

/**
 * The InvoiceExists method request.
 */
message InvoiceExistsRequest {
	string invoiceNumber = 1; /// The invoice number.
}

/**
 * The InvoiceExists method reply.
 */
message InvoiceExistsReply {
	bool value = 1; /// true if the invoice exists, otherwise false.
}

/**
 * The IsSubscriptionTerminationPossible method request.
 */
message IsSubscriptionTerminationPossibleRequest {
	repeated Guid subscriptionIds = 1; /// The list of subscription ids.
}

/**
 * The IsSubscriptionTerminationPossible method reply.
 */
message IsSubscriptionTerminationPossibleReply {
	repeated bool isTerminationPossible = 1; /// true if termination is possible, otherwise false.
}

/**
 * The GetAccountsAllowedStatuses method request.
 */
message GetAccountsAllowedStatusesRequest {
	repeated Guid accountGuids = 1; /// List of account ids.
}

/**
 * The GetAccountsAllowedStatuses method reply.
 */
message GetAccountsAllowedStatusesReply {
	repeated StrArr statuses = 1; /// List of available statuses for each account.
}

/**
 * The GetDomainTransferStatus method request.
 */
message GetDomainTransferStatusRequest {
	Subscription subscription = 1; /// The subscription.
}

/**
 * The GetDomainTransferStatus method reply.
 */
message GetDomainTransferStatusReply {
	string status = 1; /// The domain transfer status for the subscription.
}

/**
 * The ResetProvisioningStatus method request.
 */
message ResetProvisioningStatusRequest {
	Guid subscriptionId = 1; /// The subscription id.
}

/**
 * The ResetProvisioningStatus method reply.
 */
message ResetProvisioningStatusReply {
	bool status = 1; /// true if the reset was successful, otherwise false.
}

/**
 * The ExtendSubscription method request.
 */
message ExtendSubscriptionRequest {
	Subscription subscription = 1; /// The subscription to extend.
}

/**
 * The ExtendSubscription method reply.
 */
message ExtendSubscriptionReply {
	Subscription subscription = 1; /// The extended subscription.
}

/**
 * The ChangeSubscriptionProduct method request.
 */
message ChangeSubscriptionProductRequest {
	Subscription subscription = 1; /// The subscription.
	Item item = 2; /// The item.
}

/**
 * The ChangeSubscriptionProduct method reply.
 */
message ChangeSubscriptionProductReply {
	Subscription subscription = 1; /// The changed subscription.
}

/**
 * The GetDomainsRegStatusLocal method request.
 */
message GetDomainsRegStatusLocalRequest {
	repeated Subscription subscriptions = 1; /// List of domain subscriptions.
}

/**
 * The GetDomainsRegStatusLocal method reply.
 */
message GetDomainsRegStatusLocalReply {
	repeated GuidInt32Dict statuses = 1; /// Dictionary - key = subscription id; value = 1 if domain is still registered, 0 if transferred away.
}

/**
 * The IsQtyChangePossible method request.
 */
message IsQtyChangePossibleRequest {
	Subscription subscription = 1; /// The subscription.
	string quantity = 2; /// The quantity.
}

/**
 * The IsQtyChangePossible method reply.
 */
message IsQtyChangePossibleReply {
	bool value = 1; /// true if the change is possible, otherwise false.
}

/**
 * The GetProvisioningActionsForSubscriptions method request.
 */
message GetProvisioningActionsForSubscriptionsRequest {
	repeated Guid subscriptionIds = 1; /// List of subscription ids.
}

/**
 * The GetProvisioningActionsForSubscriptions method reply.
 */
message GetProvisioningActionsForSubscriptionsReply {
	repeated ProvisioningAction provisioningActions = 1; /// List of provisioning actions.
}

/**
 * The ListPendingSubscriptionTerminationRequests method request.
 */
message ListPendingSubscriptionTerminationRequestsRequest {
	repeated Guid subscriptionIds = 1; /// List of subscription ids.
}

/**
 * The ListPendingSubscriptionTerminationRequests method reply.
 */
message ListPendingSubscriptionTerminationRequestsReply {
	repeated SubscriptionTerminationRequest subscriptionTerminationRequests = 1; /// List of pending termination requests for given subscriptions.
}

/**
 * The CreateCurrency method request.
 */
message CreateCurrencyRequest {
	Currency currency = 1; /// The currency to create.
}

/**
 * The CreateCurrency method reply.
 */
message CreateCurrencyReply {
	Currency currency = 1; /// The created currency.
}

/**
 * The UpdateCurrency method request.
 */
message UpdateCurrencyRequest {
	Currency currency = 1; /// The currency to update.
}

/**
 * The UpdateCurrency method reply.
 */
message UpdateCurrencyReply {
}

/**
 * The GetCurrencies method request.
 */
message GetCurrenciesRequest {
	string query = 1; /// The query.
}

/**
 * The GetCurrencies method reply.
 */
message GetCurrenciesReply {
	repeated Currency currencies = 1; /// Filtered list of currencies.
}

/**
 * The GetActiveCurrencies method request.
 */
message GetActiveCurrenciesRequest {
}

/**
 * The GetActiveCurrencies method reply.
 */
message GetActiveCurrenciesReply {
	repeated Currency currencies = 1; /// List of active currencies.
}

/**
 * The GetCurrency method request.
 */
message GetCurrencyRequest {
	Guid currencyId = 1; /// The currency id.
}

/**
 * The GetCurrency method reply.
 */
message GetCurrencyReply {
	Currency currency = 1; /// The requested currency.
}

/**
 * The GetCurrencyByCode method request.
 */
message GetCurrencyByCodeRequest {
	string code = 1; /// The currency code.
}

/**
 * The GetCurrencyByCode method reply.
 */
message GetCurrencyByCodeReply {
	Currency currency = 1; /// The requested currency.
}

/**
 * The CreateItem method request.
 */
message CreateItemRequest {
	Item item = 1; /// The item to be created.
	Account account = 2; /// The account.
}

/**
 * The CreateItem method reply.
 */
message CreateItemReply {
	Item item = 1; /// The created item.
}

/**
 * The UpdateItem method request.
 */
message UpdateItemRequest {
	Item item = 1; /// The item to be updated.
}

/**
 * The UpdateItem method reply.
 */
message UpdateItemReply {
}

/**
 * The UpdateItemWithResellerPrices method request.
 */
message UpdateItemWithResellerPricesRequest {
	Item item = 1; /// The item to update.
	Guid resellerId = 2; /// The reseller id.
}

/**
 * The UpdateItemWithResellerPrices method reply.
 */
message UpdateItemWithResellerPricesReply {
}

/**
 * The DeactivateItem method request.
 */
message DeactivateItemRequest {
	Guid itemId = 1; /// The item id.
}

/**
 * The DeactivateItem method reply.
 */
message DeactivateItemReply {
}

/**
 * The ActivateItem method request.
 */
message ActivateItemRequest {
	Guid itemId = 1; /// The item id.
}

/**
 * The ActivateItem method reply.
 */
message ActivateItemReply {
}

/**
 * The GetItem method request.
 */
message GetItemRequest {
	Guid itemId = 1; /// The item id.
}

/**
 * The GetItem method reply.
 */
message GetItemReply {
	Item item = 1; /// The requested item.
}

/**
 * The GetItemDetails method request.
 */
message GetItemDetailsRequest {
	Guid itemId = 1; /// The item id.
	Guid resellerId = 2; /// The reseller id.
	string countryCode = 3; /// The country code.
	Guid currencyId = 4; /// The currency id.
	string vatNumber = 5; /// The vat number.
}

/**
 * The GetItemDetails method reply.
 */
message GetItemDetailsReply {
	Item item = 1; /// The requested item.
}

/**
 * The GetItemsByIdsAndLanguage method request.
 */
message GetItemsByIdsAndLanguageRequest {
	repeated Guid itemIds = 1; /// The list of item ids.
	string languageIsoCode = 2; /// The language ISO code.
}

/**
 * The GetItemsByIdsAndLanguage method reply.
 */
message GetItemsByIdsAndLanguageReply {
	repeated Item items = 1; /// The list of requested items.
}

/**
 * The GetItemByArticleNumber method request.
 */
message GetItemByArticleNumberRequest {
	string itemNumber = 1; /// The item number.
}

/**
 * The GetItemByArticleNumber method reply.
 */
message GetItemByArticleNumberReply {
	Item item = 1; /// The requested item.
}

/**
 * The GetItems method request.
 */
message GetItemsRequest {
	Account account = 1; /// The account.
	int32 pageSize = 2; /// The page size.
	int32 rowStart = 3; /// The start row.
	string order = 4; /// The order (asc or desc).
	string propertyNameToOrder = 5; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 6; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 7; /// The conjunction.
}

/**
 * The GetItems method reply.
 */
message GetItemsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Item items = 2; /// The list of items.
}

/**
 * The GetItemsForPublicOrder method request.
 */
message GetItemsForPublicOrderRequest {
	Guid accountId = 1; /// The account id.
	int32 pageSize = 2; /// The page size.
	int32 rowStart = 3; /// The start row.
	string order = 4; /// The order (asc or desc).
	string propertyNameToOrder = 5; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 6; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 7; /// The conjunctions.
	string languageIsoCode = 8; /// The language ISO code.
}

/**
 * The GetItemsForPublicOrder method reply.
 */
message GetItemsForPublicOrderReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Item items = 2; /// The list of items.
}

/**
 * The GetAvailableItems method request.
 */
message GetAvailableItemsRequest {
	Account account = 1; /// The account for which to get items.
}

/**
 * The GetAvailableItems method reply.
 */
message GetAvailableItemsReply {
	repeated Item items = 1; /// The list of items.
}

/**
 * The GetAccountDefaultCurrency method request.
 */
message GetAccountDefaultCurrencyRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetAccountDefaultCurrency method reply.
 */
message GetAccountDefaultCurrencyReply {
	Currency currency = 1; /// The default currency for the account.
}

/**
 * The GetProvisioningServices method request.
 */
message GetProvisioningServicesRequest {
}

/**
 * The GetProvisioningServices method reply.
 */
message GetProvisioningServicesReply {
	repeated ProvisioningUnit provisioningUnits = 1; /// List of available provisioning services.
}

/**
 * The GetItemCategories method request.
 */
message GetItemCategoriesRequest {
}

/**
 * The GetItemCategories method reply.
 */
message GetItemCategoriesReply {
	repeated ItemCat itemCategories = 1; /// A list of item categories.
}

/**
 * The GetAvailableTaxRules method request.
 */
message GetAvailableTaxRulesRequest {
}

/**
 * The GetAvailableTaxRules method reply.
 */
message GetAvailableTaxRulesReply {
	repeated string taxRules = 1; /// List of the available tax rules.
}

/**
 * The GetTaxRuleResult method request.
 */
message GetTaxRuleResultRequest {
	string taxRuleName = 1; /// The tax rule name.
	/**
	 * Tax rule type enum.
	 */
	enum TaxPartType {
		Tax1 = 0; /// Tax1 rule type.
		Tax2 = 1; /// Tax2 rule type.
	}
	TaxPartType taxPart = 2; /// The tax part.
	Guid resellerId = 3; /// The reseller id.
	Guid customerId = 4; /// The customer id.
	Guid itemId = 5; /// The item id.
	string countryCode = 6; /// The country code.
	string countryState = 7; /// The country state.
	string legalNumber = 8; /// The legal number.
}

/**
 * The GetTaxRuleResult method reply.
 */
message GetTaxRuleResultReply {
	TaxRuleResult taxRuleResult = 1; /// The tax rule result.
}

/**
 * The GetTaxRuleResultBulk method request.
 */
message GetTaxRuleResultBulkRequest {
	repeated Guid itemIds = 1; /// The list of item ids.
	Guid resellerId = 2; /// The reseller id.
	Guid customerId = 3; /// The customer id.
	string countryCode = 4; /// The country code.
	string countryState = 5; /// The country state.
	string legalNumber = 6; /// The legal number.
}

/**
 * The GetTaxRuleResultBulk method reply.
 */
message GetTaxRuleResultBulkReply {
	repeated ItemTaxRuleResult itemTaxRuleResults = 1; /// List of item tax rule result.
}

/**
 * The GetItemsByProvisioningService method request.
 */
message GetItemsByProvisioningServiceRequest {
	string provisioningService = 1; /// The provisioning service.
}

/**
 * The GetItemsByProvisioningService method reply.
 */
message GetItemsByProvisioningServiceReply {
	repeated Item items = 1; /// The list of items.
}

/**
 * The ListItemsWithDetails method request.
 */
message ListItemsWithDetailsRequest {
	Guid resellerId = 1; /// The reseller id.
	Guid customerId = 2; /// The customer id.
	int32 pageSize = 3; /// The page size.
	int32 rowStart = 4; /// The row start.
	string order = 5; /// The order (asc or desc).
	string orderByPropertyName = 6; /// The property to order by.
	repeated StrSearchRestrictionDict disjunctions = 7; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 8; /// The conjunctions.
	string countryCode = 9; /// The country code.
	string languageCode = 10; /// The language code.
	string currencyCode = 11; /// The currency code.
}

/**
 * The ListItemsWithDetails method reply.
 */
message ListItemsWithDetailsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Item items = 2; /// The list of items.
}

/**
 * The ListItemsForReseller method request.
 */
message ListItemsForResellerRequest {
	Guid resellerId = 1; /// The reseller id.
	Guid customerId = 2; /// The customer id.
	int32 pageSize = 3; /// The page size.
	int32 rowStart = 4; /// The start row.
	string order = 5; /// The order (asc or desc).
	string orderByPropertyName = 6; /// The property to order by.
	repeated StrSearchRestrictionDict disjunctions = 7; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 8; /// The conjunctions.
	string countryCode = 9; /// The country code.
	string languageCode = 10; /// The language code.
}

/**
 * The ListItemsForReseller method reply.
 */
message ListItemsForResellerReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Item items = 2; /// The list of items.
}

/**
 * The GetItemsForCurrency method request.
 */
message GetItemsForCurrencyRequest {
	Account account = 1; /// The account.
	int32 pageSize = 2; /// The page size.
	int32 rowStart = 3; /// The row start.
	string order = 4; /// The order (asc or desc).
	string propertyNameToOrder = 5; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 6; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 7; /// The conjunctions.
	Guid currencyId = 8; /// The currency id.
}

/**
 * The GetItemsForCurrency method reply.
 */
message GetItemsForCurrencyReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Item items = 2; /// The list of items.
}

/**
 * The GetCounterTypesWithPrices method request.
 */
message GetCounterTypesWithPricesRequest {
	repeated string articleNumbers = 1; /// List of article numbers.
	Guid customerId = 2; /// The customer id.
}

/**
 * The GetCounterTypesWithPrices method reply.
 */
message GetCounterTypesWithPricesReply {
	repeated StrCounterTypeDict counterTypesWithPrices = 1; /// Counter types with prices.
}

/**
 * A protobuf implementation of the C# KeyValuePair<string, List<CounterType>> type.
 *
 * This type should always be used together with the repeated keyword since the
 * purpose of the type is to mimic the Dictionary<string, List<CounterType>> C# type.
 */
message StrCounterTypeDict {
	string key = 1; /// The key.
	repeated CounterType values = 2; /// The values.
}

/**
 * The GetItemsByArticleNumber method request.
 */
message GetItemsByArticleNumberRequest {
	repeated string articleNumbers = 1; /// List of article numbers.
	Guid customerId = 2; /// The customer id.
}

/**
 * The GetItemsByArticleNumber method reply.
 */
message GetItemsByArticleNumberReply {
	repeated Item items = 1; /// List of items.
}

/**
 * The GetUsageReport method request.
 */
message GetUsageReportRequest {
	Guid customerId = 1; /// The customer id.
	UnixTime startDate = 2; /// The start date.
	UnixTime endDate = 3; /// The end date.
}

/**
 * The GetUsageReport method reply.
 */
message GetUsageReportReply {
	UsageReport usageReport = 1; /// The usage report.
}

/**
 * The GetUsageReportSubscription method request.
 */
message GetUsageReportSubscriptionRequest {
	Guid customerId = 1; /// The customer id.
	Guid subscriptionId = 2; /// The subscription id.
	UnixTime startDate = 3; /// The start date.
	UnixTime endDate = 4; /// The end date.
}

/**
 * The GetUsageReportSubscription method reply.
 */
message GetUsageReportSubscriptionReply {
	UsageReport usageReport = 1; /// The usage report.
}

/**
 * The GetSummaryUsageReport method request.
 */
message GetSummaryUsageReportRequest {
	Guid customerId = 1; /// The customer id.
	UnixTime startDate = 2; /// The start date.
	UnixTime endDate = 3; /// The end date.
}

/**
 * The GetSummaryUsageReport method reply.
 */
message GetSummaryUsageReportReply {
	UsageReport usageReport = 1; /// The usage report.
}

/**
 * The UploadUsageReport method request.
 */
message UploadUsageReportRequest {
	string reportData = 1; /// The report data.
}

/**
 * The UploadUsageReport method reply.
 */
message UploadUsageReportReply {
}

/**
 * The GetPriceListOwnerId method request.
 */
message GetPriceListOwnerIdRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The GetPriceListOwnerId method reply.
 */
message GetPriceListOwnerIdReply {
	Guid priceListOwnerId = 1; /// The price list owner id.
}

/**
 * The GetPriceListOwners method request.
 */
message GetPriceListOwnersRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The GetPriceListOwners method request.
 */
message GetPriceListOwnersReply {
	PriceListOwners priceListOwners = 1; /// The price list owners.
}

/**
 * The FlushItemsCache method request.
 */
message FlushItemsCacheRequest {
}

/**
 * The FlushItemsCache method reply.
 */
message FlushItemsCacheReply {
}

/**
 * The GetItemsCacheFlushTime method request.
 */
message GetItemsCacheFlushTimeRequest {
}

/**
 * The GetItemsCacheFlushTime method reply.
 */
message GetItemsCacheFlushTimeReply {
	UnixTime flushTime = 1; /// Timestamp of the last items cache flush.
}

/**
 * The GetProvisioningPackage method request.
 */
message GetProvisioningPackageRequest {
	Guid packageId = 1; /// The package id.
}

/**
 * The GetProvisioningPackage method reply.
 */
message GetProvisioningPackageReply {
	ProvisioningDescriptionPackage provisioningDescriptionPackage = 1; /// The provisioning package.
}

/**
 * The ListProvisioningPackages method request.
 */
message ListProvisioningPackagesRequest {
}

/**
 * The ListProvisioningPackages method reply.
 */
message ListProvisioningPackagesReply {
	repeated ProvisioningDescriptionPackage provisioningDescriptionPackages = 1; /// List of provisioning packages. 
}

/**
 * The AddProvisioningPackage method request.
 */
message AddProvisioningPackageRequest {
	ProvisioningDescriptionPackage provisioningDescriptionPackage = 1; /// The package.
}

/**
 * The AddProvisioningPackage method reply.
 */
message AddProvisioningPackageReply {
	ProvisioningDescriptionPackage provisioningDescriptionPackage = 1; /// The created package.
}

/**
 * The UpdateProvisioningPackage method request.
 */
message UpdateProvisioningPackageRequest {
	ProvisioningDescriptionPackage provisioningDescriptionPackage = 1; /// The package to update.
}

/**
 * The UpdateProvisioningPackage method reply.
 */
message UpdateProvisioningPackageReply {
	ProvisioningDescriptionPackage provisioningDescriptionPackage = 1; /// The updated package.
}

/**
 * The DeleteProvisioningPackage method request.
 */
message DeleteProvisioningPackageRequest {
	Guid packageId = 1; /// The package id to delete.
}

/**
 * The DeleteProvisioningPackage method reply.
 */
message DeleteProvisioningPackageReply {
	bool status = 1; /// true if the package was deleted, otherwise false.
}

/**
 * The GetProvisioningService method request.
 */
message GetProvisioningServiceRequest {
	Guid serviceId = 1; /// The service id.
}

/**
 * The GetProvisioningService method reply.
 */
message GetProvisioningServiceReply {
	Service service = 1; /// The requested service.
}

/**
 * The ListProvisioningServices method request.
 */
message ListProvisioningServicesRequest {
}

/**
 * The ListProvisioningServices method reply.
 */
message ListProvisioningServicesReply {
	repeated Service services = 1; /// List of services.
}

/**
 * The AddProvisioningService method request.
 */
message AddProvisioningServiceRequest {
	Service service = 1; /// The service to add.
}

/**
 * The AddProvisioningService method reply.
 */
message AddProvisioningServiceReply {
	Service service = 1; /// The added service.
}

/**
 * The UpdateProvisioningService method request.
 */
message UpdateProvisioningServiceRequest {
	Service service = 1; /// The service to update.
}

/**
 * The UpdateProvisioningService method reply.
 */
message UpdateProvisioningServiceReply {
	Service service = 1; /// The updated service.
}

/**
 * The DeleteProvisioningService method request.
 */
message DeleteProvisioningServiceRequest {
	Guid serviceId = 1; /// The service id to delete.
}

/**
 * The DeleteProvisioningService method reply.
 */
message DeleteProvisioningServiceReply {
	bool status = 1; /// true if the service was deleted, otherwise false.
}

/**
 * The GetPackageConfiguration method request.
 */
message GetPackageConfigurationRequest {
	Guid packageConfigurationId = 1; /// The package configuration id.
}

/**
 * The GetPackageConfiguration method reply.
 */
message GetPackageConfigurationReply {
	PackageConfiguration packageConfiguration = 1; /// The package configuration.
}

/**
 * The ListPackageConfigurations method request.
 */
message ListPackageConfigurationsRequest {
}

/**
 * The ListPackageConfigurations method reply.
 */
message ListPackageConfigurationsReply {
	repeated PackageConfiguration packageConfigurations = 1; /// List of package configurations.
}

/**
 * The AddPackageConfiguration method request.
 */
message AddPackageConfigurationRequest {
	PackageConfiguration packageConfiguration = 1; /// The package configuration to add.
}

/**
 * The AddPackageConfiguration method reply.
 */
message AddPackageConfigurationReply {
	PackageConfiguration packageConfiguration = 1; /// The added package configuration.
}

/**
 * The UpdatePackageConfiguration method request.
 */
message UpdatePackageConfigurationRequest {
	PackageConfiguration packageConfiguration = 1; /// The package configuration to update.
}

/**
 * The UpdatePackageConfiguration method reply.
 */
message UpdatePackageConfigurationReply {
	PackageConfiguration packageConfiguration = 1; /// The updated package configuration.
}

/**
 * The DeletePackageConfiguration method request.
 */
message DeletePackageConfigurationRequest {
	Guid packageId = 1; /// The id of the package configuration to delete.
}

/**
 * The DeletePackageConfiguration method reply.
 */
message DeletePackageConfigurationReply {
	bool status = 1; /// true if the package configuration were deleted, otherwise false.
}

/**
 * The GetDefaultShopForReseller method request.
 */
message GetDefaultShopForResellerRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The GetDefaultShopForReseller method reply.
 */
message GetDefaultShopForResellerReply {
	Shop shop = 1; /// The default shop for the reseller.
}

/**
 * The GetActiveShopByNameForReseller method request.
 */
message GetActiveShopByNameForResellerRequest {
	string shopName = 1; /// The shop name.
	Guid resellerId = 2; /// The reseller id.
}

/**
 * The GetActiveShopByNameForReseller method reply.
 */
message GetActiveShopByNameForResellerReply {
	Shop shop = 1; /// The requested shop.
}

/**
 * The GetShopById method request.
 */
message GetShopByIdRequest {
	Guid shopId = 1; /// The shop id.
}

/**
 * The GetShopById method reply.
 */
message GetShopByIdReply {
	Shop shop = 1; /// The requested shop.
}

/**
 * The ListShopsByReseller method request.
 */
message ListShopsByResellerRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The ListShopsByReseller method reply.
 */
message ListShopsByResellerReply {
	repeated Shop shops = 1; /// The list of shops.
}

/**
 * The CreateShop method request.
 */
message CreateShopRequest {
	Shop shop = 1; /// The shop to be created.
}

/**
 * The CreateShop method reply.
 */
message CreateShopReply {
	Shop shop = 1; /// The created shop.
}

/**
 * The CreateClonedShop method request.
 */
message CreateClonedShopRequest {
	Shop shop = 1; /// The shop.
}

/**
 * The CreateClonedShop method reply.
 */
message CreateClonedShopReply {
	Shop shop = 1; /// The created shop.
}

/**
 * The UpdateShop method request.
 */
message UpdateShopRequest {
	Shop shop = 1; /// The shop to update.
}

/**
 * The UpdateShop method reply.
 */
message UpdateShopReply {
	Shop shop = 1; /// The updated shop.
}

/**
 * The ValidateShop method request.
 */
message ValidateShopRequest {
	Shop shop = 1; /// The shop to validate.
}

/**
 * The ValidateShop method reply.
 */
message ValidateShopReply {
	ShopValidationResult shopValidationResult = 1; /// The validation results for the shop.
}

/**
 * The DeleteShop method request.
 */
message DeleteShopRequest {
	Guid shopId = 1; /// The id of the shop to delete.
}

/**
 * The DeleteShop method reply.
 */
message DeleteShopReply {
	bool status = 1; /// true if the shop were deleted, otherwise false.
}

/**
 * The SearchShops method request.
 */
message SearchShopsRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
	Guid resellerId = 7; /// The reseller id.
}

/**
 * The SearchShops method reply.
 */
message SearchShopsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Shop shops = 2; /// List of shops.
}

/**
 * The GetDefaultShopProducts method request.
 */
message GetDefaultShopProductsRequest {
	Guid resellerId = 1; /// The reseller id.
	Guid customerId = 2; /// The customer id.
	string countryCode = 3; /// The country code.
}

/**
 * The GetDefaultShopProducts method reply.
 */
message GetDefaultShopProductsReply {
	repeated Item items = 1; /// List of items.
}

/**
 * The GetShopProducts method request.
 */
message GetShopProductsRequest {
	Guid resellerId = 1; /// The reseller id.
	Guid customerId = 2; /// The customer id.
	string shopName = 3; /// The shop name.
	string countryCode = 4; /// The country code.
}

/**
 * The GetShopProducts method reply.
 */
message GetShopProductsReply {
	repeated Item items = 1; /// The list of items.
}

/**
 * The ListShopItemCategories method request.
 */
message ListShopItemCategoriesRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The ListShopItemCategories method reply.
 */
message ListShopItemCategoriesReply {
	repeated ShopItemCategory shopItemCategories = 1; /// List of shop item categories.
}

/**
 * The GetShopItemCategoryById method request.
 */
message GetShopItemCategoryByIdRequest {
	Guid categoryId = 1; /// The category id.
}

/**
 * The GetShopItemCategoryById method reply.
 */
message GetShopItemCategoryByIdReply {
	ShopItemCategory shopItemCategory = 1; /// The shop item category.
}

/**
 * The AddShopItemCategory method request.
 */
message AddShopItemCategoryRequest {
	ShopItemCategory category = 1; /// The shop item category to add.
}

/**
 * The AddShopItemCategoryReply method reply.
 */
message AddShopItemCategoryReply {
	ShopItemCategory category = 1; /// The added shop item category.
}

/**
 * The UpdateShopItemCategory method request.
 */
message UpdateShopItemCategoryRequest {
	ShopItemCategory category = 1; /// The shop item category to update.
}

/**
 * The UpdateShopItemCategory method reply.
 */
message UpdateShopItemCategoryReply {
	ShopItemCategory category = 1; /// The updated shop item category.
}

/**
 * The DeleteShopItemCategory method request.
 */
message DeleteShopItemCategoryRequest {
	ShopItemCategory category = 1; /// The shop item category to delete.
}

/**
 * The DeleteShopItemCategory method reply.
 */
message DeleteShopItemCategoryReply {
}

/**
 * The AddShopItem method request.
 */
message AddShopItemRequest {
	Guid shopId = 1; /// The shop id.
	ShopItem shopItem = 2; /// The shop item to add.
}

/**
 * The AddShopItem method reply.
 */
message AddShopItemReply {
	ShopItem shopItem = 1; /// The added shop item.
}

/**
 * The UpdateShopItem method request.
 */
message UpdateShopItemRequest {
	Guid shopId = 1; /// The shop id.
	ShopItem shopItem = 2; /// The shop item to update.
}

/**
 * The UpdateShopItem method reply.
 */
message UpdateShopItemReply {
	ShopItem shopItem = 1; /// The updated shop item.
}

/**
 * The DeleteShopItem method request.
 */
message DeleteShopItemRequest {
	Guid shopItemId = 1; /// The id of the shop item to delete.
}

/**
 * The DeleteShopItem method reply.
 */
message DeleteShopItemReply {
}

/**
 * The FindShopItem method request.
 */
message FindShopItemRequest {
	Guid shopId = 1; /// The shop id.
	string articleNumber = 2; /// The article number of the item to find.
}

/**
 * The FindShopItem method reply.
 */
message FindShopItemReply {
	ShopItem shopItem = 1; /// The requested shop item.
}

/**
 * The CreatePayment method request.
 */
message CreatePaymentRequest {
	Guid accountId = 1; /// The account id.
	repeated Payment payments = 2; /// The payments to create.
}

/**
 * The CreatePayment method reply.
 */
message CreatePaymentReply {
}

/**
 * The GetPayments method request.
 */
message GetPaymentsRequest {
	int32 pageSize = 1; /// The page size.
	int32 rowStart = 2; /// The start row.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetPayments method reply.
 */
message GetPaymentsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Payment payments = 2; /// List of payments.
}

/**
 * The GetPaymentById method request.
 */
message GetPaymentByIdRequest {
	Guid paymentId = 1; /// The payment id.
}

/**
 * The GetPaymentById method reply.
 */
message GetPaymentByIdReply {
	Payment payment = 1; /// The requested payment.
}

/**
 * The UpdatePayment method request.
 */
message UpdatePaymentRequest {
	Payment payment = 1; /// The payment to update.
}

/**
 * The UpdatePayment method reply.
 */
message UpdatePaymentReply {
}

/**
 * The DeletePayment method request.
 */
message DeletePaymentRequest {
	Guid paymentId = 1; /// The id of the payment to delete.
}

/**
 * The DeletePayment method reply.
 */
message DeletePaymentReply {
}

/**
 * The GetPaymentRuleResult method request.
 */
message GetPaymentRuleResultRequest {
	Guid accountId = 1; /// The account id.
	Invoice invoice = 2; /// The invoice.
	Payment payment = 3; /// The paymenet.
	map<string, string> additionalData = 4; /// The additional data (which can be interpreted by some rule).
}

/**
 * The GetPaymentRuleResult method reply.
 */
message GetPaymentRuleResultReply {
	PaymentRuleResult paymentRuleResult = 1; /// The payment rule result.
}

/**
 * The GetPaymentOverview method request.
 */
message GetPaymentOverviewRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetPaymentOverview method reply.
 */
message GetPaymentOverviewReply {
	repeated PaymentOverview paymentOverviews = 1; /// List of payment overviews.
}

/**
 * The ParsePaymentFile method request.
 */
message ParsePaymentFileRequest {
	string filePath = 1; /// The file path.
	string batchTimestampPart = 2; /// Timestamp part for current batch.
}

/**
 * The ParsePaymentFile method reply.
 */
message ParsePaymentFileReply {
	ParsePaymentFileResult parsePaymentFileResult = 1; /// Result of payment file parsing.
}

/**
 * The ParsePaymentFileForReseller method request.
 */
message ParsePaymentFileForResellerRequest {
	string filePath = 1; /// The file path.
	string batchTimestampPart = 2; /// Timestamp part for current batch.
	Account reseller = 3; /// The reseller account.
}

/**
 * The ParsePaymentFileForReseller method reply.
 */
message ParsePaymentFileForResellerReply {
	ParsePaymentFileResult parsePaymentFileResult = 1; /// Result of payment file parsing.
}

/**
 * The ListPayFileRecords method request.
 */
message ListPayFileRecordsRequest {
	int32 pageSize = 1; /// The page size.
	int32 rowStart = 2; /// The start row.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The ListPayFileRecords method reply.
 */
message ListPayFileRecordsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated PayFileRecord payFileRecords = 2; /// The pay file records.
}

/**
 * The GetPayFileRecordById method request.
 */
message GetPayFileRecordByIdRequest {
	Guid payFileRecordId = 1; /// The pay file record id.
}

/**
 * The GetPayFileRecordById method reply.
 */
message GetPayFileRecordByIdReply {
	PayFileRecord payFileRecord = 1; /// The pay file record.
}

/**
 * The UpdatePayFileRecord method request.
 */
message UpdatePayFileRecordRequest {
	PayFileRecord payFileRecord = 1; /// The pay file record to update.
}

/**
 * The UpdatePayFileRecord method reply.
 */
message UpdatePayFileRecordReply {
	PayFileRecord payFileRecord = 1; /// The updated pay file record.
}

/**
 * The BindPayFileRecordToInvoice method request.
 */
message BindPayFileRecordToInvoiceRequest {
	Guid payFileRecordId = 1; /// The pay file record id.
	string invoiceReferenceNumber = 2; /// The invoice reference number.
}

/**
 * The BindPayFileRecordToInvoice method reply.
 */
message BindPayFileRecordToInvoiceReply {
	PayFileRecord payFileRecord = 1; /// The updated pay file record.
}

/**
 * The GetPaymentMatchResult method request.
 */
message GetPaymentMatchResultRequest {
	PayFileRecord payFileRecord = 1; /// The pay file record.
}

/**
 * The GetPaymentMatchResult method reply.
 */
message GetPaymentMatchResultReply {
	PaymentMatchResult paymentMatchResult = 1; /// Payment match result object.
}

/**
 * The ProcessPayFileRecords method request.
 */
message ProcessPayFileRecordsRequest {
	repeated Guid recordIds = 1; /// The list of pay file record ids.
	Account resellerAccount = 2; /// The reseller account.
}

/**
 * The ProcessPayFileRecords method reply.
 */
message ProcessPayFileRecordsReply {
	int32 processed = 1; /// Number of processed pay file records.
}

/**
 * The GetFinancialRecords method request.
 */
message GetFinancialRecordsRequest {
	int32 pageSize = 1; /// The page size.
	int32 rowStart = 2; /// The start row.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetFinancialRecords method reply.
 */
message GetFinancialRecordsReply {
	int32 totalRows = 1; /// The total number of rows.
	FinancialRecord financialRecords = 2; /// The list of financial records.
}

/**
 * The CreateRefund method request.
 */
message CreateRefundRequest {
	Guid accountId = 1; /// The account id.
	repeated Refund refunds = 2; /// List of refunds.
}

/**
 * The CreateRefund method reply.
 */
message CreateRefundReply {
}

/**
 * The GetRefundById method request.
 */
message GetRefundByIdRequest {
	Guid refundId = 1; /// The refund id.
}

/**
 * The GetRefundById method reply.
 */
message GetRefundByIdReply {
	Refund refund = 1; /// The requested refund.
}

/**
 * The GetRefundOverview method request.
 */
message GetRefundOverviewRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The GetRefundOverview method reply.
 */
message GetRefundOverviewReply {
	repeated RefundOverview refundOverviews = 1; /// List of refund overviews for the account.
}

/**
 * The GetRefundedPayments method request.
 */
message GetRefundedPaymentsRequest {
	repeated Guid paymentIds = 1; /// List of payment ids.
}

/**
 * The GetRefundedPayments method reply.
 */
message GetRefundedPaymentsReply {
	repeated Payment payments = 1; /// List of payments.
}

/**
 * The UpdateRefund method request.
 */
message UpdateRefundRequest {
	Refund refund = 1; /// The refund to update.
}

/**
 * The UpdateRefund method reply.
 */
message UpdateRefundReply {
}

/**
 * The GetRefundablePayments method request.
 */
message GetRefundablePaymentsRequest {
	string invoiceReferenceNumber = 1; /// The invoice reference number.
}

/**
 * The GetRefundablePayments method reply.
 */
message GetRefundablePaymentsReply {
	repeated Payment payments = 1; /// List of payments.
}

/**
 * The CreateRefundFromCreditedInvoice method request.
 */
message CreateRefundFromCreditedInvoiceRequest {
	CreditedInvoice creditedInvoice = 1; /// The credited invoice.
	bool putToCredits = 2; /// If the refund should be put to prepaid credits or not.
}

/**
 * The CreateRefundFromCreditedInvoice method reply.
 */
message CreateRefundFromCreditedInvoiceReply {
}

/**
 * The CreateRefundFromPaymentId method request.
 */
message CreateRefundFromPaymentIdRequest {
	Guid paymentId = 1; /// The payment id.
	/**
	 * Refund status type.
	 */
	enum RefundStatusType {
		Pending = 0; /// Pending.
		DoneManual = 1; /// Done manual.
		DonePrepaidCredits = 2; /// Done prepaid credits.
		DoneAutomatic = 3; /// Done automtic.
		FailedAutomatic = -1; /// Failed automatic.
	}
	RefundStatusType initialStatus = 2; /// The initial refund status.
	bool createCreditedInvoice = 3; /// If a credited invoice should be created or not.
}

/**
 * The CreateRefundFromPaymentId method reply.
 */
message CreateRefundFromPaymentIdReply {
	Refund refund = 1; /// The created refund.
}

/**
 * The ChangeRefundStatus method request.
 */
message ChangeRefundStatusRequest {
	repeated Guid refundPaymentIds = 1; /// List of refund ids.
	/**
	 * Refund status type.
	 */
	enum RefundStatusType {
		Pending = 0; /// Pending.
		DoneManual = 1; /// Done manual.
		DonePrepaidCredits = 2; /// Done prepaid credits.
		DoneAutomatic = 3; /// Done automtic.
		FailedAutomatic = -1; /// Failed automatic.
	}
	RefundStatusType status = 2; /// The status to be set.
}

/**
 * The ChangeRefundStatus method reply.
 */
message ChangeRefundStatusReply {
	int32 changed = 1; /// Number of refunds that were changed.
}

/**
 * The CreatePrepaidCreditRecords method request.
 */
message CreatePrepaidCreditRecordsRequest {
	Guid accountId = 1; /// The account id.
	repeated PrepaidCredit records = 2; /// List of prepaid credit records.
}

/**
 * The CreatePrepaidCreditRecords method reply.
 */
message CreatePrepaidCreditRecordsReply {
}

/**
 * The GetPrepaidCreditRecords method request.
 */
message GetPrepaidCreditRecordsRequest {
	int32 pageSize = 1; /// The page size.
	int32 rowStart = 2; /// The start row.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetPrepaidCreditRecords method reply.
 */
message GetPrepaidCreditRecordsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated PrepaidCredit prepaidCredits = 2; /// The list of prepaid credits.
}

/**
 * The GetPrepaidCreditRecordById method request.
 */
message GetPrepaidCreditRecordByIdRequest {
	Guid recordId = 1; /// The record id.
}

/**
 * The GetPrepaidCreditRecordById method reply.
 */
message GetPrepaidCreditRecordByIdReply {
	PrepaidCredit prepaidCredit = 2; /// Requested prepaid credit record or null if not found.
}

/**
 * The GetPrepaidCreditAmountForAccount method request.
 */
message GetPrepaidCreditAmountForAccountRequest {
	Guid accountId = 1; /// The account id.
	Guid currencyId = 2; /// The currency id.
}

/**
 * The GetPrepaidCreditAmountForAccount method reply.
 */
message GetPrepaidCreditAmountForAccountReply {
	Decimal value = 1; /// The prepaid credit amount for the account.
}

/**
 * The GetPrepaidCreditBalance method request.
 */
message GetPrepaidCreditBalanceRequest {
	Guid accountId = 1; /// The account id.
	Guid currencyId = 2; /// The currency id.
	bool useResellersPrepaidCredit = 3; /// if set to true and invoice is sent to reseller then return reseller's prepaid credit balance.
}

/**
 * The GetPrepaidCreditBalance method reply.
 */
message GetPrepaidCreditBalanceReply {
	Decimal value = 1; /// The prepaid credit amount for the account.
}

/**
 * The GetAccount method request.
 */
message GetAccountRequest {
}

/**
 * The GetAccount method reply.
 */
message GetAccountReply {
	Account account = 1; /// Account data of currently signed in user.
}

/**
 * The ListLogins method request.
 */
message ListLoginsRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The ListLogins method reply.
 */
message ListLoginsReply {
	repeated string logins = 1; /// List of usernames.
}

/**
 * The ListOperations method request.
 */
message ListOperationsRequest {
}

/**
 * The ListOperations method reply.
 */
message ListOperationsReply {
	repeated string operations = 1; /// List of operations.
}

/**
 * The AllowUser method request.
 */
message AllowUserRequest {
	string username = 1; /// The username.
	string operationName = 2; /// The operation name.
	Guid accountId = 3; /// The account id.
}

/**
 * The AllowUser method reply.
 */
message AllowUserReply {
}

/**
 * The DenyUser method request.
 */
message DenyUserRequest {
	string username = 1; /// The username.
	string operationName = 2; /// The operation name.
	Guid accountId = 3; /// The account id.
}

/**
 * The DenyUser method reply.
 */
message DenyUserReply {
}

/**
 * The AllowRole method request.
 */
message AllowRoleRequest {
	string role = 1; /// The role name.
	string operationName = 2; /// The operation name.
	Guid accountId = 3; /// The account id.
}

/**
 * The AllowRole method reply.
 */
message AllowRoleReply {
}

/**
 * The DenyRole method request.
 */
message DenyRoleRequest {
	string role = 1; /// The role name,
	string operationName = 2; /// The operation name.
	Guid accountId = 3; /// The account id.
}

/**
 * The DenyRole method reply.
 */
message DenyRoleReply {
}

/**
 * The GetAllowedOperationsRole method request.
 */
message GetAllowedOperationsRoleRequest {
	string role = 1; /// The role name.
	Guid accountId = 2; /// The account id.
}

/**
 * The GetAllowedOperationsRole method reply.
 */
message GetAllowedOperationsRoleReply {
	repeated string operations = 1; /// List of operations.
}

/**
 * The GetAllowedOperationsUser method request.
 */
message GetAllowedOperationsUserRequest {
	string username = 1; /// The username.
	Guid accountId = 2; /// The account id.
}

/**
 * The GetAllowedOperationsUser method reply.
 */
message GetAllowedOperationsUserReply {
	repeated string operations = 1; /// List of operations.
}

/**
 * The GetAllowedObjects method request.
 */
message GetAllowedObjectsRequest {
	repeated AuthorizationSchemaObject objects = 1; /// The objects
}

/**
 * The GetAllowedObjects method reply.
 */
message GetAllowedObjectsReply {
	repeated AuthorizationSchemaObject objects = 1; /// List of objects.
}

/**
 * The CreatePluginConfiguration method request.
 */
message CreatePluginConfigurationRequest {
	PluginConfiguration pluginConfiguration = 1; /// The plugin configuration to create.
}

/**
 * The CreatePluginConfiguration method reply.
 */
message CreatePluginConfigurationReply {
	PluginConfiguration pluginConfiguration = 1; /// The created plugin configuration.
}

/**
 * The ListPlugins method request.
 */
message ListPluginsRequest {
}

/**
 * The ListPlugins method reply.
 */
message ListPluginsReply {
	repeated Plugin plugins = 1; /// List of plugins.
}

/**
 * The GetPluginById method request.
 */
message GetPluginByIdRequest {
	Guid pluginId = 1; /// The plugin id.
}

/**
 * The GetPluginById method reply.
 */
message GetPluginByIdReply {
	Plugin plugin = 1; /// The requested plugin.
}

/**
 * The GetPluginByConfigurationId method request.
 */
message GetPluginByConfigurationIdRequest {
	Guid pluginConfigurationId = 1; /// The plugin configuration id.
}

/**
 * The GetPluginByConfigurationId method reply.
 */
message GetPluginByConfigurationIdReply {
	Plugin plugin = 1; /// The requested plugin.
}

/**
 * The GetPluginConfigurationSchema method request.
 */
message GetPluginConfigurationSchemaRequest {
	Guid pluginId = 1; /// The plugin id.
}

/**
 * The GetPluginConfigurationSchema method reply.
 */
message GetPluginConfigurationSchemaReply {
	string configuration = 1; /// The plugin configuration schema.
}

/**
 * The UpdatePluginConfigurationValueById method request.
 */
message UpdatePluginConfigurationValueByIdRequest {
	Guid pluginConfigurationId = 1; /// The plugin configuration id.
	string value = 2; /// The value.
}

/**
 * The UpdatePluginConfigurationValueById method reply.
 */
message UpdatePluginConfigurationValueByIdReply {
}

/**
 * The EnablePlugin method request.
 */
message EnablePluginRequest {
	Guid pluginId = 1; /// The plugin id.
}

/**
 * The EnablePlugin method reply.
 */
message EnablePluginReply {
}

/**
 * The DisablePlugin method request.
 */
message DisablePluginRequest {
	Guid pluginId = 1; /// The plugin id.
}

/**
 * The DisablePlugin method reply.
 */
message DisablePluginReply {
}

/**
 * The UpdatePluginConfiguration method request.
 */
message UpdatePluginConfigurationRequest {
	string key = 1; /// The key.
	string newValue = 2; /// The new value.
	string pluginName = 3; /// The plugin name.
	Guid resellerId = 4; /// The reseller id.
}

/**
 * The UpdatePluginConfiguration method reply.
 */
message UpdatePluginConfigurationReply {
}

/**
 * The GetPluginConfigurationById method request.
 */
message GetPluginConfigurationByIdRequest {
	Guid pluginConfigurationId = 1; /// The plugin configuration id.
}

/**
 * The GetPluginConfigurationById method reply.
 */
message GetPluginConfigurationByIdReply {
	PluginConfiguration pluginConfiguration = 1; /// The requested plugin configuration.
}

/**
 * The GetPluginConfigurationByKey method request.
 */
message GetPluginConfigurationByKeyRequest {
	string key = 1; /// The key.
	Guid resellerId = 2; /// The reseller id.
	string pluginName = 3; /// The plugin name.
}

/**
 * The GetPluginConfigurationByKey method reply.
 */
message GetPluginConfigurationByKeyReply {
	PluginConfiguration pluginConfiguration = 1; /// The requested plugin configuration.
}

/**
 * The DeletePluginConfiguration method request.
 */
message DeletePluginConfigurationRequest {
	Guid pluginConfigurationId = 1; /// The plugin configuration id.
}

/**
 * The DeletePluginConfiguration method reply.
 */
message DeletePluginConfigurationReply {
}

/**
 * The CreateSchedule method request.
 */
message CreateScheduleRequest {
	ScheduledTask scheduledTask = 1; /// The scheduled task to create.
}

/**
 * The CreateSchedule method reply.
 */
message CreateScheduleReply {
	ScheduledTask scheduledTask = 1; /// The created scheduled task.
}

/**
 * The GetNextWorkingDay method request.
 */
message GetNextWorkingDayRequest {
	UnixTime date = 1; /// The starting date.
}

/**
 * The GetNextWorkingDay method reply.
 */
message GetNextWorkingDayReply {
	UnixTime date = 1; /// Date of next working day from the passed date.
}

/**
 * The HeartBeat method request.
 */
message HeartBeatRequest {
}

/**
 * The HeartBeat method reply.
 */
message HeartBeatReply {
}

/**
 * The SearchScheduledTasks method request.
 */
message SearchScheduledTasksRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchScheduledTasks method request.
 */
message SearchScheduledTasksReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated ScheduledTask scheduledTasks = 2; /// List of scheduled tasks.
}

/**
 * The UpdateScheduledTask method request.
 */
message UpdateScheduledTaskRequest {
	ScheduledTask scheduledTask = 1; /// Scheduled task to update.
}

/**
 * The UpdateScheduledTask method reply.
 */
message UpdateScheduledTaskReply {
}

/**
 * The UpdateScheduledTasks method request.
 */
message UpdateScheduledTasksRequest {
	repeated ScheduledTask scheduledTasks = 1; /// List of scheduled tasks to update.
}

/**
 * The UpdateScheduledTasks method reply.
 */
message UpdateScheduledTasksReply {
}

/**
 * The DeleteScheduledTask method request.
 */
message DeleteScheduledTaskRequest {
	ScheduledTask scheduledTask = 1; /// Scheduled task to delete.
}

/**
 * The DeleteScheduledTask method reply.
 */
message DeleteScheduledTaskReply {
}

/**
 * The SearchScheduledTaskRuns method request.
 */
message SearchScheduledTaskRunsRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The SearchScheduledTaskRuns method reply.
 */
message SearchScheduledTaskRunsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated ScheduledTaskRun scheduledTaskRuns = 2; /// List of scheduled task runs.
}

/**
 * The HasUnpaidInvoices method request.
 */
message HasUnpaidInvoicesRequest {
	Guid customerId = 1; /// The customer id.
}

/**
 * The HasUnpaidInvoices method reply.
 */
message HasUnpaidInvoicesReply {
	bool status = 1; /// true if the customer has unpaid invoices, otherwise false.
}

/**
 * The GetUpgradeOptions method request.
 */
message GetUpgradeOptionsRequest {
	Subscription subscription = 1; /// The subscription.
}

/**
 * The GetUpgradeOptions method reply.
 */
message GetUpgradeOptionsReply {
	repeated UpgradeGroupMember upgradeGroupMembers = 1; /// List of available upgrade options.
}

/**
 * The IsUpgradeableOrDowngradeable method request.
 */
message IsUpgradeableOrDowngradeableRequest {
	Account account = 1; /// The account.
	repeated Guid subscriptionIds = 2; /// The list of subscription ids to check.
}

/**
 * The IsUpgradeableOrDowngradeable method reply.
 */
message IsUpgradeableOrDowngradeableReply {
	repeated GuidBoolDict reply = 1; /// Results map.
}

/**
 * The CreateUpgradeInvoice method request.
 */
message CreateUpgradeInvoiceRequest {
	Subscription currentSubscription = 1; /// The current subscription.
	Subscription newSubscription = 2; /// The new subscription.
}

/**
 * The CreateUpgradeInvoice method reply.
 */
message CreateUpgradeInvoiceReply {
	Invoice invoice = 1; /// The created invoice.
}

/**
 * The CreateUpgradeOrder method request.
 */
message CreateUpgradeOrderRequest {
	Subscription currentSubscription = 1; /// The current subscription.
	Subscription newSubscription = 2; /// The new subscription.
}

/**
 * The CreateUpgradeOrder method reply.
 */
message CreateUpgradeOrderReply {
	Order order = 1; /// The created order.
}

/**
 * The DowngradeSubscription method request.
 */
message DowngradeSubscriptionRequest {
	Subscription currentSubscription = 1; /// The current subscription.
	Subscription newSubscription = 2; /// The new subscription.
}

/**
 * The DowngradeSubscription method reply.
 */
message DowngradeSubscriptionReply {
	Subscription subscription = 1; /// The created subscription.
}

/**
 * The DowngradeSubscriptionToCheapestPackage method request.
 */
message DowngradeSubscriptionToCheapestPackageRequest {
	Subscription currentSubscription = 1; /// The current subscription.
}

/**
 * The DowngradeSubscriptionToCheapestPackage method reply.
 */
message DowngradeSubscriptionToCheapestPackageReply {
	Subscription subscription = 1; /// The downgraded subscription.
}

/**
 * The UpgradeSubscription method request.
 */
message UpgradeSubscriptionRequest {
	Subscription currentSubscription = 1; /// The current subscription.
	Subscription newSubscription = 2; /// The new subscription.
}

/**
 * The UpgradeSubscription method reply.
 */
message UpgradeSubscriptionReply {
	Subscription subscription = 1; /// The upgraded subscription.
}

/**
 * The UpgradeGroupMemberCheckDowngradeOption method request.
 */
message UpgradeGroupMemberCheckDowngradeOptionRequest {
	Subscription currentSubscription = 1; /// The current subscription.
	Item newSubscriptionItem = 2; /// The new subscription item.
}

/**
 * The UpgradeGroupMemberCheckDowngradeOption method reply.
 */
message UpgradeGroupMemberCheckDowngradeOptionReply {
	UpgradeDowngradeCheckStatus upgradeDowngradeCheckStatus = 1; /// UpgradeDowngradeCheck status which indicates whether the change is possible.
}

/**
 * The CreateUpgradeGroup method request.
 */
message CreateUpgradeGroupRequest {
	UpgradeGroup upgradeGroup = 1; /// The upgrade group to create.
}

/**
 * The CreateUpgradeGroup method reply.
 */
message CreateUpgradeGroupReply {
	UpgradeGroup upgradeGroup = 1; /// The created upgrade group.
}

/**
 * The UpdateUpgradeGroup method request.
 */
message UpdateUpgradeGroupRequest {
	UpgradeGroup upgradeGroup = 1; /// The upgrade group to update.
}

/**
 * The UpdateUpgradeGroup method reply.
 */
message UpdateUpgradeGroupReply {
}

/**
 * The DeleteUpgradeGroup method request.
 */
message DeleteUpgradeGroupRequest {
	UpgradeGroup upgradeGroup = 1; /// The upgrade group to delete.
}

/**
 * The DeleteUpgradeGroup method reply.
 */
message DeleteUpgradeGroupReply {
}

/**
 * The GetUpgradeGroup method request.
 */
message GetUpgradeGroupRequest {
	Guid upgradeGroupId = 1; /// The upgrade group id.
}

/**
 * The GetUpgradeGroup method reply.
 */
message GetUpgradeGroupReply {
	UpgradeGroup upgradeGroup = 1; /// The requested upgrade group.
}

/**
 * The GetUpgradeGroups method request.
 */
message GetUpgradeGroupsRequest {
	Item item = 1; /// The item.
}

/**
 * The GetUpgradeGroups method reply.
 */
message GetUpgradeGroupsReply {
	repeated UpgradeGroup upgradeGroups = 1; /// List of matching groups.
}

/**
 * The GetAllUpgradeGroups method request.
 */
message GetAllUpgradeGroupsRequest {
}

/**
 * The GetAllUpgradeGroups method reply.
 */
message GetAllUpgradeGroupsReply {
	repeated UpgradeGroup upgradeGroups = 1; /// List containing all upgrade groups.
}

/**
 * The GetVersionInfo method request.
 */
message GetVersionInfoRequest {
}

/**
 * The GetVersionInfo method reply.
 */
message GetVersionInfoReply {
	repeated StrVersionInfoDict versions = 1; /// The current versions of the applications.
}

/**
 * The AddPaymentProfile method request.
 */
message AddPaymentProfileRequest {
	Guid accountId = 1; /// The account id.
	string paymentMethodName = 2; /// The payment method name.
	map<string, string> attributes = 3; /// The attributes.
}

/**
 * The AddPaymentProfile method reply.
 */
message AddPaymentProfileReply {
	Guid id = 1; /// The id of the created payment profile.
}

/**
 * The DeletePaymentProfile method request.
 */
message DeletePaymentProfileRequest {
	Guid paymentProfileId = 1; /// Id of the payment profile to remove.
}

/**
 * The DeletePaymentProfile method reply.
 */
message DeletePaymentProfileReply {
}

/**
 * The UpdatePaymentProfile method request.
 */
message UpdatePaymentProfileRequest {
	Guid paymentProfileId = 1; /// The payment profile id.
	/**
	 * Defines the PaymentProfileStatus type.
	 */
	enum PaymentProfileStatus {
		NotUsed = 0; /// Not used.
        Active = 1; /// Active.
		Inactive = 2; /// Inactive.
        DefaultForRenewals = 3; /// Default for renewals.
        ActiveForCustomersOnly = 4; /// Active for customers only.
		ActiveForPublicOrdersOnly = 5; /// Active for public orders only.
    }
	PaymentProfileStatus newStatus = 2; /// New payment profile status.
	map<string, string> attributes = 3; /// The attributes.
}

/**
 * The UpdatePaymentProfile method reply.
 */
message UpdatePaymentProfileReply {
}

/**
 * The GetPaymentProfiles method request.
 */
message GetPaymentProfilesRequest {
	Guid accountId = 1; /// The account id.
	/**
	 * Defines the PaymentProfileStatus type.
	 */
	enum PaymentProfileStatus {
		NotUsed = 0; /// Not used.
        Active = 1; /// Active.
		Inactive = 2; /// Inactive.
        DefaultForRenewals = 3; /// Default for renewals.
        ActiveForCustomersOnly = 4; /// Active for customers only.
		ActiveForPublicOrdersOnly = 5; /// Active for public orders only.
    }
	repeated PaymentProfileStatus allowedStatuses = 2; /// Allowed statuses.
}

/**
 * The GetPaymentProfiles method reply.
 */
message GetPaymentProfilesReply {
	repeated PaymentProfile paymentProfiles = 1; /// List of payment profiles.
}

/**
 * The GetAvailablePaymentMethods method request.
 */
message GetAvailablePaymentMethodsRequest {
}

/**
 * The GetAvailablePaymentMethods method reply.
 */
message GetAvailablePaymentMethodsReply {
	repeated string paymentMethods = 1; /// List of all the available payment methods.
}

/**
 * The GetPaymentDiagnostics method request.
 */
message GetPaymentDiagnosticsRequest {
}

/**
 * The GetPaymentDiagnostics method reply.
 */
message GetPaymentDiagnosticsReply {
	PaymentDiagnostics paymentDiagnostics = 1; /// The payment diagnostics.
}

/**
 * The MakePayment method request.
 */
message MakePaymentRequest {
	PaymentTransaction paymentTransaction = 1; /// The transaction. Transaction reference id and type should be filled up, together with payment profile.
}

/**
 * The MakePayment method reply.
 */
message MakePaymentReply {
	PaymentTransaction paymentTransaction = 1; /// Transaction for performed payment.
}

/**
 * The UpdatePaymentTransaction method request.
 */
message UpdatePaymentTransactionRequest {
	string transactionId = 1; /// The transaction id.
	string newStatus = 2; /// The new status.
	string newStatusCode = 3; /// The new status code.
	string newStatusCodeDescription = 4; /// The new status code description.
	map<string, string> attributes = 5; /// The transaction attributes.
}

/**
 * The UpdatePaymentTransaction method reply.
 */
message UpdatePaymentTransactionReply {
}

/**
 * The UpdatePaymentTransactionObject method request.
 */
message UpdatePaymentTransactionObjectRequest {
	PaymentTransaction paymentTransaction = 1; /// The payment transaction to update.
}

/**
 * The UpdatePaymentTransactionObject method reply.
 */
message UpdatePaymentTransactionObjectReply {
}

/**
 * The GetPaymentTransactionById method request.
 */
message GetPaymentTransactionByIdRequest {
	string transactionId = 1; /// The transaction id.
}

/**
 * The GetPaymentTransactionById method reply.
 */
message GetPaymentTransactionByIdReply {
	PaymentTransaction paymentTransaction = 1; /// The requested payment transaction.
}

/**
 * The GetPaymentTransactionByInitialId method request.
 */
message GetPaymentTransactionByInitialIdRequest {
	string initialTransactionId = 1; /// Initial transaction id.
}

/**
 * The GetPaymentTransactionByInitialId method reply.
 */
message GetPaymentTransactionByInitialIdReply {
	PaymentTransaction paymentTransaction = 1; /// The requested payment transaction.
}

/**
 * The GetPaymentTransactionsByIds method request.
 */
message GetPaymentTransactionsByIdsRequest {
	repeated string paymentTransactionsIds = 1; /// List of payment transaction ids.
}

/**
 * The GetPaymentTransactionsByIds method reply.
 */
message GetPaymentTransactionsByIdsReply {
	repeated PaymentTransaction paymentTransactions = 1; /// List of payment transactions.
}

/**
 * The FinishPayment method request.
 */
message FinishPaymentRequest {
	string transactionId = 1; /// The transaction id.
}

/**
 * The FinishPayment method reply.
 */
message FinishPaymentReply {
	PaymentTransaction paymentTransaction = 1; /// The closed payment transaction.
}

/**
 * The GetCountries method request.
 */
message GetCountriesRequest {
}

/**
 * The GetCountries method reply.
 */
message GetCountriesReply {
	repeated Country countries = 1; /// List of all countries.
}

/**
 * The GetSearchableObjects method request.
 */
message GetSearchableObjectsRequest {
}

/**
 * The GetSearchableObjects method reply.
 */
message GetSearchableObjectsReply {
	repeated string searchableObjects = 1; /// List of searchable objects.
}

/**
 * The Search method request.
 */
message SearchRequest {
	string searchString = 1; /// The search string.
	repeated string objectsToSearch = 2; /// The objects to search.
	int32 startRecord = 3; /// The start record.
	int32 itemsPerPage = 4; /// Items per page.
}

/**
 * The Search method reply.
 */
message SearchReply {
	int32 totalResultsCount = 1; /// Total number of results produced by search.
	repeated GlobalSearchResultItem globalSearchResultItems = 2; /// The search results.
	
}

/**
 * The AddTaxProfile method request.
 */
message AddTaxProfileRequest {
	TaxProfile taxProfile = 1; /// The tax profile to add.
}

/**
 * The AddTaxProfile method reply.
 */
message AddTaxProfileReply {
	TaxProfile taxProfile = 1; /// The added tax profile.
}

/**
 * The UpdateTaxProfiles method request.
 */
message UpdateTaxProfilesRequest {
	repeated TaxProfile taxProfiles = 1; /// The tax profile to update.
}

/**
 * The UpdateTaxProfiles method reply.
 */
message UpdateTaxProfilesReply {
}

/**
 * The ValidateVatNumber method request.
 */
message ValidateVatNumberRequest {
	string countryCode = 1; /// The country code.
	string vatNumber = 2; /// The vat number.
}

/**
 * The ValidateVatNumber method reply.
 */
message ValidateVatNumberReply {
	/**
	 * Type for VAT number validation result.
	 */
	enum VatNumberValidationResultType {
		Invalid = 0; /// Invalid.
		Valid = 1; /// Valid.
		ValidationError = 2; /// Validation error.
	}
	VatNumberValidationResultType vatNumberValidationResultType = 1; /// The validation results.
}

/**
 * The GetCampaigns method request.
 */
message GetCampaignsRequest {
	int32 rowStart = 1; /// The start row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The GetCampaigns method reply.
 */
message GetCampaignsReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated Campaign campaigns = 2; /// The list of campaigns.
}

/**
 * The GetCampaignById method request.
 */
message GetCampaignByIdRequest {
	Guid campaignId = 1; /// The campaign id.
	bool includePromoCodes = 2; /// Marks if returned campaign will contains promo codes or not.
}

/**
 * The GetCampaignById method reply.
 */
message GetCampaignByIdReply {
	Campaign campaign = 1; /// The requested campaign.
}

/**
 * The DeleteCampaignsBulk method request.
 */
message DeleteCampaignsBulkRequest {
	string campaignIds = 1; /// IDs of campaigns which should be deleted separated by ','.
}

/**
 * The DeleteCampaignsBulk method reply.
 */
message DeleteCampaignsBulkReply {
}

/**
 * The DeleteCampaign method request.
 */
message DeleteCampaignRequest {
	Guid campaignId = 1; /// The campaign id.
}

/**
 * The DeleteCampaign method reply.
 */
message DeleteCampaignReply {
}

/**
 * The AddCampaign method request.
 */
message AddCampaignRequest {
	Campaign campaign = 1; /// The campaign to add.
}

/**
 * The AddCampaign method reply.
 */
message AddCampaignReply {
	Campaign campaign = 1; /// The added campaign.
}

/**
 * The UpdateCampaign method request.
 */
message UpdateCampaignRequest {
	Campaign campaign = 1; /// The campaign to update.
}

/**
 * The UpdateCampaign method reply.
 */
message UpdateCampaignReply {
	Campaign campaign = 1; /// The updated campaign.
}

/**
 * The GetPromoCodes method request.
 */
message GetPromoCodesRequest {
	int32 rowStart = 1; /// The row start.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
	Guid campaignId = 7; /// The campaign id.
	Guid promoCodeSetId = 8; /// The promo code set id.
}

/**
 * The GetPromoCodes method reply.
 */
message GetPromoCodesReply {
	int32 totalRows = 1; /// The total number of rows.
	repeated CampaignCode campaignCodes = 2; /// List of campaign codes.
}

/**
 * The PromoCodesGenerator method request.
 */
message PromoCodesGeneratorRequest {
	Guid campaignId = 1; /// The campaign id.
	Guid promoCodeSetId = 2; /// The promo code set id.
	CampaignCodeGeneratorSettings campaignCodesGeneratorSettings = 3; /// The campaign code generator settings object.
}

/**
 * The PromoCodesGenerator method reply.
 */
message PromoCodesGeneratorReply {
}

/**
 * The CampaignPromoCodesBulkDelete method request.
 */
message CampaignPromoCodesBulkDeleteRequest {
	Guid campaignId = 1; /// The campaign id.
	repeated Guid promoCodeIdArray = 2; /// List of promo code guids which will be deleted.
}

/**
 * The CampaignPromoCodesBulkDelete method reply.
 */
message CampaignPromoCodesBulkDeleteReply {
}

/**
 * The IsAnyCampaignWithCodeActive method request.
 */
message IsAnyCampaignWithCodeActiveRequest {
}

/**
 * The IsAnyCampaignWithCodeActive method reply.
 */
message IsAnyCampaignWithCodeActiveReply {
	bool status = 1; /// true if there are any active campaigns with a promo code, otherwise false.
}

/**
 * The GetCustomerReminder method request.
 */
message GetCustomerReminderRequest {
	string reminderName = 1; /// The reminder name.
}

/**
 * The GetCustomerReminder method request.
 */
message GetCustomerReminderReply {
	CustomerReminder customerReminder = 1; /// The requested customer reminder.
}

/**
 * The UpdateCustomerReminder method request.
 */
message UpdateCustomerReminderRequest {
	CustomerReminder customerReminder = 1; /// The customer reminder to update.
}

/**
 * The UpdateCustomerReminder method reply.
 */
message UpdateCustomerReminderReply {
}

/**
 * The GetMaximumRenewalPeriod method request.
 */
message GetMaximumRenewalPeriodRequest {
	string tld = 1; /// The top level domain for which maximum renewal period is being queried.
}

/**
 * The GetMaximumRenewalPeriod method reply.
 */
message GetMaximumRenewalPeriodReply {
	int32 maximumRenewalPeriod = 1; /// Maximum renewal period in months.
}

/**
 * The GetRemainingRenewalPeriod method request.
 */
message GetRemainingRenewalPeriodRequest {
	string tld = 1; /// The top level domain for which maximum renewal period is being queried.
	UnixTime domainExpirationDate = 2; /// The domain expiration date.
}

/**
 * The GetRemainingRenewalPeriod method reply.
 */
message GetRemainingRenewalPeriodReply {
	int32 remainingRenewalPeriod = 1; /// Number of months remaining for renewal.
}

/**
 * The GetMailingListById method request.
 */
message GetMailingListByIdRequest {
	Guid mailingListId = 1; /// Tje mailing listi d.
}

/**
 * The GetMailingListById method reply.
 */
message GetMailingListByIdReply {
	MailingList mailingList = 1; /// The requested mailing list.
}

/**
 * The GetMailingListByName method request.
 */
message GetMailingListByNameRequest {
	string mailingListName = 1; /// The mailing list name.
}

/**
 * The GetMailingListByName method reply.
 */
message GetMailingListByNameReply {
	MailingList mailingList = 1; /// The requested mailing list.
}

/**
 * The AddMailingList method request.
 */
message AddMailingListRequest {
	MailingList mailingList = 1; /// The mailing list to add.
}

/**
 * The AddMailingList method reply.
 */
message AddMailingListReply {
	MailingList mailingList = 1; /// The added mailing list.
}

/**
 * The ListMailingLists method request.
 */
message ListMailingListsRequest {
}

/**
 * The ListMailingLists method reply.
 */
message ListMailingListsReply {
	repeated MailingList mailingLists = 1; /// List of all the mailing lists.
}

/**
 * The UpdateMailingList method request.
 */
message UpdateMailingListRequest {
	MailingList mailingList = 1; /// The mailing list to update.
}

/**
 * The UpdateMailingList method reply.
 */
message UpdateMailingListReply {
	MailingList mailingList = 1; /// The updated mailing list.
}

/**
 * The GetUnsubscribeHashData method request.
 */
message GetUnsubscribeHashDataRequest {
	Guid mailingListSubscriptionId = 1; /// The mailing list subscription id.
}

/**
 * The GetUnsubscribeHashData method reply.
 */
message GetUnsubscribeHashDataReply {
	string hash = 1; /// The unsubscribe hash.
}

/**
 * The GetMailingListSubscription method request.
 */
message GetMailingListSubscriptionRequest {
	Guid mailingListSubscriptionId = 1; /// The mailing list subscription id.
}

/**
 * The GetMailingListSubscription method reply.
 */
message GetMailingListSubscriptionReply {
	MailingListSubscription mailingListSubscription = 1; /// The requested mailing list subscription.
}

/**
 * The UnsubscribeFromMailingList method request.
 */
message UnsubscribeFromMailingListRequest {
	Guid mailingListSubscriptionId = 1; /// The mailing list subscription id.
	string hash = 2; /// The unsubscribe hash.
}

/**
 * The UnsubscribeFromMailingList method reply.
 */
message UnsubscribeFromMailingListReply {
	bool status = 1; /// true if the unsubscription was successful, otherwise false.
}

/**
 * The ListLanguages method request.
 */
message ListLanguagesRequest {
}

/**
 * The ListLanguages method reply.
 */
message ListLanguagesReply {
	repeated Language languages = 1; /// List of languages.
}

/**
 * The GetOrderStatusPriorities method request.
 */
message GetOrderStatusPrioritiesRequest {
}

/**
 * The GetOrderStatusPriorities method reply.
 */
message GetOrderStatusPrioritiesReply {
	map<int32, int32> statusPriorities = 1; /// Dictionary with result where key is order status and value is priority of that status.
}

/**
 * The GetAttachment method request.
 */
message GetAttachmentRequest {
	Guid accountId = 1; /// The account id.
	Guid attachmentId = 2; /// The attachment id.
}

/**
 * The GetAttachment method reply.
 */
message GetAttachmentReply {
	bytes attachment = 1; /// The attachment.
}

/**
 * The GetPerformanceCategories method request.
 */
message GetPerformanceCategoriesRequest {
}

/**
 * The GetPerformanceCategories method reply.
 */
message GetPerformanceCategoriesReply {
	repeated string categories = 1; /// List of categories.
}

/**
 * The GetPerformanceCounter method request.
 */
message GetPerformanceCounterRequest {
	string categoryName = 1; /// The category name.
	string counterName = 2; /// The counter name.
}

/**
 * The GetPerformanceCounter method reply.
 */
message GetPerformanceCounterReply {
	double value = 1; /// The counter value.
}

/**
 * The GetPerformanceCounterInstance method request.
 */
message GetPerformanceCounterInstanceRequest {
	string categoryName = 1; /// The category name.
	string counterName = 2; /// The counter name.
	string instanceName = 3; /// The instance name.
}

/**
 * The GetPerformanceCounterInstance method reply.
 */
message GetPerformanceCounterInstanceReply {
	double value = 1; /// The counter value.
}

/**
 * The GetMultiInstancePerformanceCounterAverage method request.
 */
message GetMultiInstancePerformanceCounterAverageRequest {
	string categoryName = 1; /// The category name.
	string counterName = 2; /// The counter name.
}

/**
 * The GetMultiInstancePerformanceCounterAverage method reply.
 */
message GetMultiInstancePerformanceCounterAverageReply {
	double value = 1; /// The counter value.
}

/**
 * The SearchPerformanceLog method request.
 */
message SearchPerformanceLogRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated string categoryNames = 5; /// The category names.
	repeated string counterNames = 6; /// The counter names.
	UnixTime from = 7; /// From time.
	UnixTime to = 8; /// To time.
}

/**
 * The SearchPerformanceLog method reply.
 */
message SearchPerformanceLogReply {
	int32 totalRows = 1; /// Total number of results produced by search.
	repeated PerformanceLog performanceLogs = 2; /// List of performance logs.
}

/**
 * The GetPerformanceLog method request.
 */
message GetPerformanceLogRequest {
	repeated StrSearchRestrictionDict conjunctions = 1; /// The conjunctions.
	repeated StrSearchRestrictionDict disjunctions = 2; /// The disjunctions.
}

/**
 * The GetPerformanceLog method reply.
 */
message GetPerformanceLogReply {
	repeated PerformanceLog performanceLogs = 1; /// List of performance logs.
}

/**
 * The GetExecutingMethods method request.
 */
message GetExecutingMethodsRequest {
}

/**
 * The GetExecutingMethods method reply.
 */
message GetExecutingMethodsReply {
	repeated StrRepeatedExecutingMethodDict executingMethods = 1; /// List of executing methods and scheduled tasks.
}

/**
 * The CreateMessage method request.
 */
message CreateMessageRequest {
	Message message = 1; /// The message to create.
}

/**
 * The CreateMessage method reply.
 */
message CreateMessageReply {
	Message message = 1; /// The created message.
}

/**
 * The UpdateMessage method request.
 */
message UpdateMessageRequest {
	Message message = 1; /// The message to update.
}

/**
 * The UpdateMessage method reply.
 */
message UpdateMessageReply {
	Message message = 1; /// The updated message.
}

/**
 * The GetMessageById method request.
 */
message GetMessageByIdRequest {
	Guid messageId = 1; /// The message of the id.
}

/**
 * The GetMessageById method reply.
 */
message GetMessageByIdReply {
	Message message = 1; /// The requested message.
}

/**
 * The ListMessagesByCustomer method request.
 */
message ListMessagesByCustomerRequest {
	Guid accountId = 1; /// The account id.
}

/**
 * The ListMessagesByCustomer method reply.
 */
message ListMessagesByCustomerReply {
	repeated Message messages = 1; /// List of customers for the customer.
}

/**
 * The ListMessages method request.
 */
message ListMessagesRequest {
	int32 firstRow = 1; /// The first row.
	int32 pageSize = 2; /// The page size.
	string order = 3; /// The order (asc or desc).
	string propertyNameToOrder = 4; /// The property name to order by.
	repeated StrSearchRestrictionDict disjunctions = 5; /// The disjunctions.
	repeated StrSearchRestrictionDict conjunctions = 6; /// The conjunctions.
}

/**
 * The ListMessages method reply.
 */
message ListMessagesReply {
	int32 totalRows = 1; /// Total number of results produced by search.
	repeated Message messages = 2; /// List of messages.
}

/**
 * The GetResellerCommissionSummary method request.
 */
message GetResellerCommissionSummaryRequest {
	Guid resellerId = 1; /// The reseller id.
	UnixTime startDate = 2; /// The start date.
	UnixTime endDate = 3; /// The end date.
	repeated int32 statuses = 4; /// List of statuses.
	bool showSums = 5; /// if set to true commissions are grouped and summed by reseller and status.
}

/**
 * The GetResellerCommissionSummary method reply.
 */
message GetResellerCommissionSummaryReply {
	repeated ResellerCommissionSummary resellerCommissionSummaries = 1; /// List of reseller commissions.
}

/**
 * The UpdateResellerCommissionStatus method request.
 */
message UpdateResellerCommissionStatusRequest {
	repeated Guid commissionIds = 1; /// List of commission ids
	/**
	 * Defines the ResellerCommissionStatus type.
	 */
	enum ResellerCommissionStatus {
        Pending = 0; /// Pending.
        PaidOut = 1; /// Paid out.
        PaidOutAsDiscount = 2; /// Paid out as discount.
	}
	ResellerCommissionStatus status = 2; /// The reseller commission status.
}

/**
 * The UpdateResellerCommissionStatus method reply.
 */
message UpdateResellerCommissionStatusReply {
	int32 updates = 1; /// Number of updates performed.
}

/**
 * The GetContacts method request.
 */
message GetContactsRequest {
	string accountId = 1; /// The account name.
}

/**
 * The GetContacts method reply.
 */
message GetContactsReply {
	repeated ProvisioningService provisioningServices = 1; /// List of contacts.
}

/**
 * The ListResourceLocations method request.
 */
message ListResourceLocationsRequest {
	Guid resellerId = 1; /// The reseller id.
}

/**
 * The ListResourceLocations method reply.
 */
message ListResourceLocationsReply {
	repeated ResourceLocation resourceLocations = 1; /// List of resource locations.
}

/**
 * The GetSetting method request.
 */
message GetSettingRequest {
	string settingName = 1; /// The name of the setting.
}

/**
 * The GetSetting method reply.
 */
message GetSettingReply {
	string setting = 1; /// Value of the setting.
}

/**
 * The UpdateSetting method request.
 */
message UpdateSettingRequest {
	string settingName = 1; /// Name of the setting.
	string settingValue = 2; /// Value of the setting.
	bool createIfNonexistent = 3; /// true if setting should be created if it doesn't exist, otherwise false.
}

/**
 * The UpdateSetting method reply.
 */
message UpdateSettingReply {
	bool status = 1; /// true if the update was successful, otherwise false.
}

/*********************************************************************************************************************/

/**
 * The AddressInfo data type.
 */
message AddressInfo {
	string FirstName = 1; /// First name.
	string LastName = 2; /// Last name.
	repeated string Address = 3; /// Address.
	string City = 4; /// City.
	string Zip = 5; /// Zip code.
	string Company = 6; /// Company name.
}

/**
 * The MailAttachment data type.
 */
message MailAttachment {
	string fileName = 1; /// File name.
	bytes fileContent = 2; /// Contents.
	string contentType = 3; /// Mime type.
}

/**
 * The ProvisioningUnit data type.
 */
message ProvisioningUnit {
	string id = 1; /// The id.
	string name = 2; /// Name.
	map<string, string> parameters = 3; /// Parameters.
}

/**
 * The Template data type.
 */
message Template {
	Guid id = 1; /// Id.
	string name = 2; /// Name.
	string content = 3; /// Content.
	string tag = 4; /// Tag.
	string description = 5; /// Description.
	Guid languageId = 6; /// Language id.
	Guid accountId = 7; /// Account id.
	int32 numberOfLines = 8; /// Number of lines.
	UnixTime createdTime = 9; /// Created time.
	UnixTime lastChangeTime = 10; /// Last change time.
	string type = 11; /// Type.
}

/**
 * The TemplateExport data type.
 */
message TemplateExport {
    string name = 1; /// Name.
    UnixTime lastChangeTime = 2; /// Last change time.
    repeated Guid templateIds = 3; /// Template ids.
    repeated GuidGuidTuple ResellerLanguageList = 4;  /// Reseller language list.
}

/**
 * The SearchRestriction data type.
 */
message SearchRestriction {
    string restriction = 1; /// Restriction.
    string value = 2; /// Value.
    repeated string values = 3; /// Values.
    UnixTime dateValue = 4; /// Date value.
    repeated UnixTime dateValues = 5; /// Date values.
    string operation = 6; /// Operation.
    string aliasKey = 7; /// Alias key.
    string aliasValue = 8; /// Alias value.
}

/**
 * The StrSearchRestrictionDict data type.
 */
message StrSearchRestrictionDict {
    string key = 1; /// Key.
    SearchRestriction value = 2; /// Value.
}

/**
 * The AccountDetails data type.
 */
message AccountDetails {
    Guid accountId = 1; /// Account id.
    string accountIdHash = 2; /// Account id hash.
    bool canHaveOwnItems = 3; /// Can have own items.
    bool canHaveOwnPrices = 4; /// Can have own prices.
    Decimal balance = 5; /// Balance.
    Currency defaultCurrency = 6; /// Default currency.
    int32 currencyDecimalPlaces = 7; /// Currency decimal places.
    Decimal credit = 8; /// Credit.
    UnixTime createdTime = 9; /// Created time.
    string statusChangedBy = 10; /// Status changed by.
    Guid mainSubscriptionId = 11; /// Main subscription id.
    string receiveInvoiceVia = 12; /// Receive invoice via.
    string invoicePrefix = 13; /// Invoice prefix.
    int32 invoiceInitialNumber = 14; /// Invoice initial number.
    string creditedInvoicePrefix = 15; /// Credited invoice prefix.
    int32 creditedInvoiceInitialNumber = 16; /// Credited invoice initial number.
    string orderPrefix = 17; /// Order prefix.
    int32 orderInitialNumber = 18; /// Order initial number.
    string subscriptionPrefix = 19; /// Subscription prefix.
    int32 subscriptionInitialNumber = 20; /// Subscription initial number.
    bool pendingTermination = 21; /// Pending termination.
    string legalNumber = 22; /// Legal number.
    int32 invoicePaymentPeriod = 23; /// Invoice payment period.
    string resellerStatus = 24; /// Reseller status.
    string paymentRuleName = 25; /// Payment rule name.
    repeated AccountNotification notifications = 26; /// Notifications.
    int32 reactivationPeriod = 27; /// Reactivation period.
    /**
     * The TerminationNoticeRenewalPeriod data type.
     */
    enum TerminationNoticeRenewalPeriod {
        FullPeriod = 0; /// Full period.
        NoticePeriodExcess = 1; /// Notice period excess.
    }
    TerminationNoticeRenewalPeriod terminationNoticeRenewalPeriod = 28; /// Termination notice renewal period.
    /**
     * The TaxType data type.
     */
    enum TaxType {
        Vat = 0; /// Vat.
        Sales = 1; /// Sales.
    }
    TaxType taxType = 29; /// Tax type.
    /**
     * The TaxCalculationType data type.
     */
    enum TaxCalculationType {
        Exclusive = 0; /// Exclusive.
        Inclusive = 1; /// Inclusive.
    }
    TaxCalculationType taxCalculationType = 30; /// Tax calculation type.
    bool showTax = 31; /// Show tax.
    string primaryContactId = 32; /// Primary contact id.
    repeated AccountNote accountNotes = 33; /// Account notes.
    /**
     * The DefaultRecipientType data type.
     */
    enum DefaultRecipientType {
        Reseller = 0; /// Reseller.
        Customer = 1; /// Customer.
    }
    DefaultRecipientType billingDefaultRecipient = 34; /// Billing default recipient.
    DefaultRecipientType technicalDefaultRecipient = 35; /// Technical default recipient.
    ThemeCustomization themeCustomization = 36; /// Theme customization.
    /**
     * The PrepaidCreditUsageType data type.
     */
    enum PrepaidCreditUsageType {
        Manually = 0; /// Manually.
        Automatically = 1; /// Automatically.
        DomainsAutomatically = 2; /// Domains automatically.
    }
    PrepaidCreditUsageType prepaidCreditUsage = 37; /// Prepaid credit usage.
    bool autoRenew = 38; /// Auto renew.
    bool autoPay = 39; /// Auto pay.
    PaymentProfile defaultPaymentProfile = 40; /// Default payment profile.
    string defaultInvoiceReferenceNumberFormat = 41; /// Default invoice reference number format.
    AccountOptions accountOptions = 42; /// Account options.
    ResellerConfiguration resellerConfiguration = 43; /// Reseller configuration.
    map<string, string> customAttributes = 44; /// Custom attributes.
    string defaultProformaReferenceNumberFormat = 45; /// Default proforma reference number format.
}

/**
 * The Currency data type.
 */
message Currency {
    Guid id = 1; /// Id.
    string code = 2; /// Code.
    string symbol = 3; /// Symbol.
    string name = 4; /// Name.
    bool placeSymbolBefore = 5; /// Place symbol before.
    bool isActive = 6; /// Is active.
}

/**
 * The AccountNotification data type.
 */
message AccountNotification {
    AccountDetails account = 1; /// Account.
    Guid id = 2; /// Id.
    string type = 3; /// Type.
    UnixTime timeStamp = 4; /// Time stamp.
}
/**
 * The AccountNote data type.
 */
message AccountNote {
    Guid id = 1; /// Id.
    string note = 2; /// Note.
    AccountDetails accountDetails = 3; /// Account details.
    UnixTime date = 4; /// Date.
    Guid createdByAccount = 5; /// Created by account.
    string createdByUser = 6; /// Created by user.
    UnixTime createdTime = 7; /// Created time.
    Guid updatedByAccount = 8; /// Updated by account.
    string updatedByUser = 9; /// Updated by user.
    UnixTime lastChangeTime = 10; /// Last change time.
    int32 status = 11; /// Status.
    /**
     * The AccountNoteType data type.
     */
    enum AccountNoteType {
        Account = 0; /// Account.
        Invpice = 1; /// Invpice.
        Order = 2; /// Order.
        Subscription = 3; /// Subscription.
    }
    AccountNoteType noteType = 12; /// Note type.
    NullableGuid externalId = 13; /// External id.
    string externalNumber = 14; /// External number.
    bool visibleToCustomer = 15; /// Visible to customer.
    UnixTime expirationDate = 16; /// Expiration date.
}

/**
 * The ThemeCustomization data type.
 */
message ThemeCustomization {
    Guid id = 1; /// Id.
    string cssUrl = 2; /// Css url.
    string pageTitle = 3; /// Page title.
    string metaKeywords = 4; /// Meta keywords.
    string metaDescription = 5; /// Meta description.
    string footerText = 6; /// Footer text.
}

/**
 * The PaymentProfile data type.
 */
message PaymentProfile {
    Guid id = 1; /// Id.
    Guid accountId = 2; /// Account id.
    /**
     * The PaymentProfileStatus data type.
     */
    enum PaymentProfileStatus {
        NotUsed = 0; /// Not used.
        Active = 1; /// Active.
        Inactive = 2; /// Inactive.
        DefaultForRenewals = 3; /// Default for renewals.
        ActiveForCustomersOnly = 4; /// Active for customers only.
        ActiveForPublicOrdersOnly = 5; /// Active for public orders only.
    }
    PaymentProfileStatus status = 3; /// Status.
    string paymentMethod = 4; /// Payment method.
    string pluginName = 5; /// Plugin name.
    string guiPluginName = 6; /// Gui plugin name.
    int32 numberOfTransactions = 7; /// Number of transactions.
    repeated PaymentProfileCustomAttribute attributes = 8; /// Attributes.
    bool deleted = 9; /// Deleted.
}

/**
 * The PaymentProfileCustomAttribute data type.
 */
message PaymentProfileCustomAttribute {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string value = 3; /// Value.
}

/**
 * The AccountOptions data type.
 */
message AccountOptions {
    Guid id = 1; /// Id.
    bool canAccessAdminPanel = 2; /// Can access admin panel.
    bool canAccessBillingPanel = 3; /// Can access billing panel.
    bool canAccessControlPanel = 4; /// Can access control panel.
    bool hasOrderPage = 5; /// Has order page.
    bool canDefineOwnProducts = 6; /// Can define own products.
    bool canDefineOwnPrices = 7; /// Can define own prices.
    /**
     * The DefaultRecipientType data type.
     */
    enum DefaultRecipientType {
        Reseller = 0; /// Reseller.
        Customer = 1; /// Customer.
    }
    DefaultRecipientType sendInvoicesTo = 8; /// Send invoices to.
    DefaultRecipientType sendMailsTo = 9; /// Send mails to.
    Guid sendFromAccount = 10; /// Send from account.
    bool isInvoicedMonthly = 11; /// Is invoiced monthly.
    bool canCreateSubaccounts = 12; /// Can create subaccounts.
    bool preventProvisioningWhenInDebt = 13; /// Prevent provisioning when in debt.
    repeated OutstandingBalanceLimit balanceLimits = 14; /// Balance limits.
    AccountOptions subaccountDefaults = 15; /// Subaccount defaults.
    bool useCommissionAsDiscount = 16; /// Use commission as discount.
}

/**
 * The OutstandingBalanceLimit data type.
 */
message OutstandingBalanceLimit {
    Guid id = 1; /// Id.
    Currency currency = 2; /// Currency.
    Decimal maxDebtOverall = 3; /// Max debt overall.
    Decimal maxDebtPastDueDate = 4; /// Max debt past due date.
}

/**
 * The ResellerConfiguration data type.
 */
message ResellerConfiguration {
    Guid id = 1; /// Id.
    string orderPageUrl = 2; /// Order page url.
    Guid defaultLanguageId = 3; /// Default language id.
    Currency defaultCurrency = 4; /// Default currency.
    PaymentMethod defaultPaymentMethod = 5; /// Default payment method.
    repeated ResellerLanguage resellerLanguages = 6; /// Reseller languages.
    repeated Currency resellerCurrencies = 7; /// Reseller currencies.
    repeated PaymentMethod paymentMethods = 8; /// Payment methods.
    string paymentIdGenerator = 9; /// Payment id generator.
    string documentIdGenerator = 10; /// Document id generator.
    string paymentCountersPrefix = 11; /// Payment counters prefix.
    string addressFetchPluginName = 12; /// Address fetch plugin name.
    Guid defaultTemplateLanguageId = 13; /// Default template language id.
    repeated ResellerConfigurationCustomAttribute customAttributes = 14; /// Custom attributes.
}

/**
 * The PaymentMethod data type.
 */
message PaymentMethod {
    Guid id = 1; /// Id.
    string paymentProvider = 2; /// Payment provider.
    string pluginName = 3; /// Plugin name.
    string refundPluginName = 4; /// Refund plugin name.
    string paymentMatcherPluginName = 5; /// Payment matcher plugin name.
    string guiPluginName = 6; /// Gui plugin name.
    string prefix = 7; /// Prefix.
}

/**
 * The ResellerLanguage data type.
 */
message ResellerLanguage {
    Guid id = 1; /// Id.
    string iso639Name = 2; /// Iso639 name.
}

/**
 * The ResellerConfigurationCustomAttribute data type.
 */
message ResellerConfigurationCustomAttribute {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string value = 3; /// Value.
}

/**
 * The AccountAddress data type.
 */
message AccountAddress {
    Guid id = 1; /// Id.
    string companyName = 2; /// Company name.
    string companyNumber = 3; /// Company number.
    string firstName = 4; /// First name.
    string lastName = 5; /// Last name.
    string address = 6; /// Address.
    string address2 = 7; /// Address2.
    string city = 8; /// City.
    string zip = 9; /// Zip.
    Country country = 10; /// Country.
    string state = 11; /// State.
    string email = 12; /// Email.
    string phone = 13; /// Phone.
    string fax = 14; /// Fax.
    string mobile = 15; /// Mobile.
}

/**
 * The Country data type.
 */
message Country {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string code = 3; /// Code.
    string tag = 4; /// Tag.
    repeated State states = 5; /// States.
}

/**
 * The State data type.
 */
message State {
    Guid id = 1; /// Id.
    Country country = 2; /// Country.
    string name = 3; /// Name.
    string code = 4; /// Code.
}

/**
 * The Account data type.
 */
message Account {
    Guid id = 1; /// Id.
    Guid parentAccountId = 2; /// Parent account id.
    string name = 3; /// Name.
    string description = 4; /// Description.
    string state = 5; /// State.
    string type = 6; /// Type.
    map<string, string> customAttributes = 7; /// Custom attributes.
    Guid defaultLanguageId = 8; /// Default language id.
    Language language = 9; /// Language.
    string parentAccountName = 10; /// Parent account name.
    Guid mainAddressId = 11; /// Main address id.
    AccountAddress mainAddress = 12; /// Main address.
    Guid shippingAddressId = 13; /// Shipping address id.
    AccountAddress shippingAddress = 14; /// Shipping address.
    Guid billingAddressId = 15; /// Billing address id.
    AccountAddress billingAddress = 16; /// Billing address.
    bool terminated = 17; /// Terminated.
    string companyName = 18; /// Company name.
    string firstName = 19; /// First name.
    string lastName = 20; /// Last name.
    string passwordPattern = 21; /// Password pattern.
    map<string, string> identityProperties = 22; /// Identity properties.
}

/**
 * The Login data type.
 */
message Login {
    Guid id = 1; /// Id.
    string username = 2; /// Username.
    Guid accountId = 3; /// Account id.
    bool isOwnAccount = 4; /// Is own account.
}

/**
 * The Language data type.
 */
message Language {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string iso639Name = 3; /// Iso639 name.
    string culture = 4; /// Culture.
}

/**
 * The Subscription data type.
 */
message Subscription {
    Guid id = 1; /// Id.
    string friendlyId = 2; /// Friendly id.
    Guid createdByAccountId = 3; /// Created by account id.
    Guid accountId = 4; /// Account id.
    Guid customerId = 5; /// Customer id.
    Guid invoiceId = 6; /// Invoice id.
    Guid itemId = 7; /// Item id.
    Item item = 8; /// Item.
    string description = 9; /// Description.
    string state = 10; /// State.
    string type = 11; /// Type.
    string currency = 12; /// Currency.
    bool recurring = 13; /// Recurring.
    bool deleted = 14; /// Deleted.
    map<string, string> customAttributes = 15; /// Custom attributes.
    repeated SubscriptionPrice subscriptionPrices = 16; /// Subscription prices.
    UnixTime startDate = 17; /// Start date.
    UnixTime expirationDate = 18; /// Expiration date.
    UnixTime nextRenewalDate = 19; /// Next renewal date.
    Guid renewalPeriodId = 20; /// Renewal period id.
    RenewalPeriod renewalPeriod = 21; /// Renewal period.
    string itemName = 22; /// Item name.
    string companyName = 23; /// Company name.
    string firstName = 24; /// First name.
    string lastName = 25; /// Last name.
    string legalNumber = 26; /// Legal number.
    Decimal discount = 27; /// Discount.
    Decimal quantity = 28; /// Quantity.
    string provisioningStatus = 29; /// Provisioning status.
    string payment = 30; /// Payment.
    string provisioningStatusMessage = 31; /// Provisioning status message.
    NullableGuid oldSubscription = 32; /// Old subscription.
    int32 provisioningOrder = 33; /// Provisioning order.
    NullableUnixTime lastProvisioningAttemptTime = 34; /// Last provisioning attempt time.
    int32 provisioningAttempts = 35; /// Provisioning attempts.
    bool isProvisioningInProgress = 36; /// Is provisioning in progress.
    bool isDiscountTransferable = 37; /// Is discount transferable.
    repeated SubscriptionNotification notifications = 38; /// Notifications.
    repeated AccountNote SubscriptionNotes = 39; /// Subscription notes.
}

/**
 * The Item data type.
 */
message Item {
    Guid id = 1; /// Id.
    repeated GuidStrDict multilanguageNames = 2; /// Multilanguage names.
    repeated GuidStrDict multilanguageDescriptions = 3; /// Multilanguage descriptions.
    string description = 4; /// Description.
    string category = 5; /// Category.
    repeated ShopItemCategory shopCategories = 6; /// Shop categories.
    bool deleted = 7; /// Deleted.
    repeated ItemProperty properties = 8; /// Properties.
    repeated ItemPrice prices = 9; /// Prices.
    repeated ResellerItemPrice resellerPrices = 10; /// Reseller prices.
    repeated ChildItem children = 11; /// Children.
    repeated string tags = 12; /// Tags.
    string articleNumber = 13; /// Article number.
    string name = 14; /// Name.
    bool recurring = 15; /// Recurring.
    int32 renewalPeriod = 16; /// Renewal period.
    string renewalPeriodUnit = 17; /// Renewal period unit.
    repeated RenewalPeriod renewalPeriods = 18; /// Renewal periods.
    string renewalItemId = 19; /// Renewal item id.
    bool reProvision = 20; /// Re provision.
    bool defferedRevenue = 21; /// Deffered revenue.
    /**
     * The DeliveryDate data type.
     */
    enum DeliveryDate {
        Invoiced = 0; /// Invoiced.
        InvoicedRenewal = 1; /// Invoiced renewal.

    }
    DeliveryDate deliveryDate = 22; /// Delivery date.
    bool allowToSubresellers = 23; /// Allow to subresellers.
    bool autoCredit = 24; /// Auto credit.
    bool allowAutocreditIfProvisioned = 25; /// Allow autocredit if provisioned.
    /**
     * The ProvisioningAllowedType data type.
     */
    enum ProvisioningAllowedType {
        PatAllowedWithoutPayment = 0; /// Pat allowed without payment.
        PatAllowedAfterPayment = 1; /// Pat allowed after payment.
        PatAllowedIfResellerCreditLevelPermitsIt = 2; /// Pat allowed if reseller credit level permits it.
        PatAllowedIfCustomerCreditLevelPermitsIt = 3; /// Pat allowed if customer credit level permits it.
    }
    ProvisioningAllowedType provisioningAllowedType = 26; /// Provisioning allowed type.
    /**
     * The RenewingAllowedType data type.
     */
    enum RenewingAllowedType {
        RatAllowedWithoutPayment = 0; /// Rat allowed without payment.
        RatAllowedAfterPayment = 1; /// Rat allowed after payment.
        RatAllowedAfterPaymentWhenInvoiced = 2; /// Rat allowed after payment when invoiced.
    }
    RenewingAllowedType renewingAllowedType = 27; /// Renewing allowed type.
    /**
     * The UpgradingAllowedType data type.
     */
    enum UpgradingAllowedType {
        UatAllowedWithoutPayment = 0; /// Uat allowed without payment.
        UatAllowedAfterPayment = 1; /// Uat allowed after payment.
    }
    UpgradingAllowedType upgradingAllowedType = 28; /// Upgrading allowed type.
    string provisioningService = 29; /// Provisioning service.
    /**
     * The TaxMode data type.
     */
    enum TaxMode {
        Invoice = 0; /// Invoice.
        InvoicePlusTax1 = 1; /// Invoice plus tax1.
    }
    TaxMode tax2Mode = 30; /// Tax2 mode.
    string tax1 = 31; /// Tax1.
    string tax2 = 32; /// Tax2.
    int32 renewalInvoicePeriod = 33; /// Renewal invoice period.
    int32 terminationNoticePeriod = 34; /// Termination notice period.
    int32 forceRenewal = 35; /// Force renewal.
    repeated Tax taxes = 36; /// Taxes.
    repeated CounterType counterTypes = 37; /// Counter types.
    string usageFormulaPluginName = 38; /// Usage formula plugin name.
    bool alignWithMainSubscription = 39; /// Align with main subscription.
    repeated ItemIncludedServiceConfiguration includedServices = 40; /// Included services.
    /**
     * The ExpireActionType data type.
     */
    enum ExpireActionType {
        NoAction = 0; /// No action.
        Suspend = 1; /// Suspend.
        Terminate = 2; /// Terminate.
        Downgrade = 3; /// Downgrade.
    }
    ExpireActionType discontinuedExpireAction = 41; /// Discontinued expire action.
    ExpireActionType notPaidExpireAction = 42; /// Not paid expire action.
    /**
     * The OrderStatus data type.
     */
    enum OrderStatus {
        PlacementFailed = 0; /// Placement failed.
        PlacementOk = 1; /// Placement ok.
        ProcessingFailed = 2; /// Processing failed.
        ManualReviewWanted = 3; /// Manual review wanted.
        ProcessedOk = 4; /// Processed ok.
        ReviewOk = 5; /// Review ok.
        Deleted = 6; /// Deleted.
        TimedOut = 7; /// Timed out.
        PendingPayment = 8; /// Pending payment.
        Processing = 9; /// Processing.
        CustomerOverDebtLimit = 10; /// Customer over debt limit.
    }
    OrderStatus setStatus = 43; /// Set status.
    repeated ResourceLocation locations = 44; /// Locations.
    bool separateRenewalInvoice = 45; /// Separate renewal invoice.
    PackageConfiguration packageConfiguration = 46; /// Package configuration.
    /**
     * The RenewalWithoutInvoiceType data type.
     */
    enum RenewalWithoutInvoiceType {
        ImmediatelyForResellers = 0; /// Immediately for resellers.
        Immediately = 1; /// Immediately.
        DayBeforeExpirationDate = 2; /// Day before expiration date.
    }
    RenewalWithoutInvoiceType RenewalWithoutInvoice = 47; /// Renewal without invoice.
}

/**
 * The SubscriptionPrice data type.
 */
message SubscriptionPrice {
    Guid id = 1; /// Id.
    Guid subscriptionId = 2; /// Subscription id.
    Guid currencyId = 3; /// Currency id.
    string description = 4; /// Description.
    Decimal value = 5; /// Value.
    Decimal discount = 6; /// Discount.
}

/**
 * The RenewalPeriod data type.
 */
message RenewalPeriod {
    Guid id = 1; /// Id.
    Guid itemId = 2; /// Item id.
    int32 renewalPeriodValue = 3; /// Renewal period value.
    string renewalPeriodUnit = 4; /// Renewal period unit.
    repeated RenewalItemPrice prices = 5; /// Prices.
    repeated ResellerRenewalItemPrice resellerPrices = 6; /// Reseller prices.
}

/**
 * The SubscriptionNotification data type.
 */
message SubscriptionNotification {
    Guid id = 1; /// Id.
    string type = 2; /// Type.
    UnixTime timeStamp = 3; /// Time stamp.
    Subscription subscription = 4; /// Subscription.
}

/**
 * The ShopItemCategory data type.
 */
message ShopItemCategory {
    Guid id = 1; /// Id.
    Guid resellerId = 2; /// Reseller id.
    string name = 3; /// Name.
    repeated GuidStrDict descriptions = 4; /// Descriptions.
}

/**
 * The ItemProperty data type.
 */
message ItemProperty {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string value = 3; /// Value.
    string suffix = 4; /// Suffix.
    Guid itemId = 5; /// Item id.
}

/**
 * The ItemPrice data type.
 */
message ItemPrice {
    Guid id = 1; /// Id.
    Guid currencyId = 2; /// Currency id.
    Guid resellerId = 3; /// Reseller id.
    Guid itemId = 4; /// Item id.
    string description = 5; /// Description.
    Decimal value = 6; /// Value.
    bool enabled = 7; /// Enabled.
}

/**
 * The ResellerItemPrice data type.
 */
message ResellerItemPrice {
    Guid id = 1; /// Id.
    Guid currencyId = 2; /// Currency id.
    Guid resellerId = 3; /// Reseller id.
    Guid itemId = 4; /// Item id.
    string description = 5; /// Description.
    Decimal value = 6; /// Value.
    bool enabled = 7; /// Enabled.
}

/**
 * The ChildItem data type.
 */
message ChildItem {
    Item item = 1; /// Item.
    double quantity = 2; /// Quantity.
}

/**
 * The Tax data type.
 */
message Tax {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string taxRuleName = 3; /// Tax rule name.
    string taxRuleId = 4; /// Tax rule id.
    Decimal percent = 5; /// Percent.
    bool applyToAmountOnly = 6; /// Apply to amount only.
}

/**
 * The CounterType data type.
 */
message CounterType {
    Guid id = 1; /// Id.
    string counterId = 2; /// Counter id.
    Item item = 3; /// Item.
    string name = 4; /// Name.
    string description = 5; /// Description.
    Decimal unitValue = 6; /// Unit value.
    string unitName = 7; /// Unit name.
    repeated GuidStrDict multilanguageNames = 8; /// Multilanguage names.
    repeated GuidStrDict multilanguageDescriptions = 9; /// Multilanguage descriptions.
    repeated GuidStrDict multilanguageUnitNames = 10; /// Multilanguage unit names.
    repeated CounterRange ranges = 11; /// Ranges.
    bool requireSubscription = 12; /// Require subscription.
}

/**
 * The ItemIncludedServiceConfiguration data type.
 */
message ItemIncludedServiceConfiguration {
    Guid id = 1; /// Id.
    Guid resellerId = 2; /// Reseller id.
    Item item = 3; /// Item.
    /**
     * The IncludedServiceConfigurationType data type.
     */
    enum IncludedServiceConfigurationType {
        Category = 0; /// Category.
        Item = 1; /// Item.
    }
    IncludedServiceConfigurationType configurationType = 4; /// Configuration type.
    repeated ItemIncludedServiceValue values = 5; /// Values.
    int32 numberOfServices = 6; /// Number of services.
}

/**
 * The ResourceLocation data type.
 */
message ResourceLocation {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string friendlyName = 3; /// Friendly name.
    string description = 4; /// Description.
}

/**
 * The PackageConfiguration data type.
 */
message PackageConfiguration {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    ProvisioningDescriptionPackage provisioningPackage = 3; /// Provisioning package.
    repeated ServiceLimitation limitations = 4; /// Limitations.
    repeated ServiceInit initList = 5; /// Init list.
}

/**
 * The RenewalItemPrice data type.
 */
message RenewalItemPrice {
    Guid id = 1; /// Id.
    Guid renewalPeriodId = 2; /// Renewal period id.
    Guid currencyId = 3; /// Currency id.
    Guid resellerId = 4; /// Reseller id.
    string description = 5; /// Description.
    Decimal value = 6; /// Value.
    bool enabled = 7; /// Enabled.
}

/**
 * The ResellerRenewalItemPrice data type.
 */
message ResellerRenewalItemPrice {
    Guid id = 1; /// Id.
    Guid renewalPeriodId = 2; /// Renewal period id.
    Guid currencyId = 3; /// Currency id.
    Guid resellerId = 4; /// Reseller id.
    string description = 5; /// Description.
    Decimal value = 6; /// Value.
    bool enabled = 7; /// Enabled.
}

/**
 * The CounterRange data type.
 */
message CounterRange {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    repeated GuidStrDict multilanguageNames = 3; /// Multilanguage names.
    CounterType counter = 4; /// Counter.
    Decimal lowerMargin = 5; /// Lower margin.
    Decimal uppgerMargin = 6; /// Uppger margin.
    repeated CounterRangePrice prices = 7; /// Prices.
    repeated CounterRangeResellerPrice resellerPrices = 8; /// Reseller prices.
}

/**
 * The ItemIncludedServiceValue data type.
 */
message ItemIncludedServiceValue {
    Guid id = 1; /// Id.
    string value = 2; /// Value.
}

/**
 * The ProvisioningDescriptionPackage data type.
 */
message ProvisioningDescriptionPackage {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string description = 3; /// Description.
}

/**
 * The ServiceLimitation data type.
 */
message ServiceLimitation {
    Guid id = 1; /// Id.
    Service service = 2; /// Service.
    int32 limitation = 3; /// Limitation.
}

/**
 * The ServiceInit data type.
 */
message ServiceInit {
    Guid id = 1; /// Id.
    Service service = 2; /// Service.
    repeated ServiceInitArgument arguments = 3; /// Arguments.
}

/**
 * The CounterRangePrice data type.
 */
message CounterRangePrice {
    Guid id = 1; /// Id.
    Guid currencyId = 2; /// Currency id.
    Guid resellerId = 3; /// Reseller id.
    CounterRange range = 4; /// Range.
    Decimal value = 5; /// Value.
    bool enabled = 6; /// Enabled.
}

/**
 * The CounterRangeResellerPrice data type.
 */
message CounterRangeResellerPrice {
    Guid id = 1; /// Id.
    Guid currencyId = 2; /// Currency id.
    Guid resellerId = 3; /// Reseller id.
    CounterRange range = 4; /// Range.
    Decimal value = 5; /// Value.
    bool enabled = 6; /// Enabled.
}

/**
 * The Service data type.
 */
message Service {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string description = 3; /// Description.
    repeated Service parentServices = 4; /// Parent services.
}

/**
 * The ServiceInitArgument data type.
 */
message ServiceInitArgument {
    Guid id = 1; /// Id.
    string propertyName = 2; /// Property name.
    string propertyValue = 3; /// Property value.
}

/**
 * The TerminationOrigin data type.
 */
message TerminationOrigin {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    bool canBeReactivated = 3; /// Can be reactivated.
    bool canOverwriteExistingRequest = 4; /// Can overwrite existing request.
}

/**
 * The AccountTerminationRequest data type.
 */
message AccountTerminationRequest {
    UnixTime terminationDate = 1; /// Termination date.
    /**
     * The TerminationOption data type.
     */
    enum TerminationOption {
        Immediate = 0; /// Immediate.
        EndOfCurrentSubscription = 1; /// End of current subscription.
    }
    TerminationOption terminationOption = 2; /// Termination option.
    NullableInt32 reactivationPeriod = 3; /// Reactivation period.
}

/**
 * The AccountReactivationRequest data type.
 */
message AccountReactivationRequest {
    Guid id = 1; /// Id.
    Guid customerId = 2; /// Customer id.
    Guid resellerId = 3; /// Reseller id.
    TerminationOrigin origin = 4; /// Origin.
    string reason = 5; /// Reason.
    /**
     * The AccountStatusChangeRequestStatusType data type.
     */
    enum AccountStatusChangeRequestStatusType {
        Pending = 0; /// Pending.
        Finished = 1; /// Finished.
        Cancelled = 2; /// Cancelled.
    }
    AccountStatusChangeRequestStatusType status = 6; /// Status.
    repeated AccountStatusChangeRequestCustomAttribute customAttributes = 7; /// Custom attributes.
    Guid createdByAccountId = 8; /// Created by account id.
    UnixTime createdTime = 9; /// Created time.
    UnixTime lastChangeTime = 10; /// Last change time.
    UnixTime ReactivationDate = 11; /// Reactivation date.
}

/**
 * The AccountStatusChangeRequestCustomAttribute data type.
 */
message AccountStatusChangeRequestCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The Invoice data type.
 */
message Invoice {
    Guid id = 1; /// Id.
    Guid createdByAccountId = 2; /// Created by account id.
    Guid accountId = 3; /// Account id.
    Guid templateId = 4; /// Template id.
    Decimal total = 5; /// Total.
    Decimal resellerCommissionTotal = 6; /// Reseller commission total.
    Decimal subtotal = 7; /// Subtotal.
    string currency = 8; /// Currency.
    string renderedContent = 9; /// Rendered content.
    string number = 10; /// Number.
    string notes = 11; /// Notes.
    string description = 12; /// Description.
    /**
     * The InvoiceStatus data type.
     */
    enum InvoiceStatus {
        IsNew = 0; /// Is new.
        IsDeleted = 1; /// Is deleted.
        IsSent = 2; /// Is sent.
        IsCredited = 3; /// Is credited.
        IsClosed = 4; /// Is closed.
        IsOpen = 5; /// Is open.
        IsClosedUnsent = 6; /// Is closed unsent.
    }
    InvoiceStatus status = 13; /// Status.
    /**
     * The InvoiceSendStatus data type.
     */
    enum InvoiceSendStatus {
        IssUnsent = 0; /// Iss unsent.
        IssSent = 1; /// Iss sent.
    }
    InvoiceSendStatus sendStatus = 14; /// Send status.
    /**
     * The InvoiceType data type.
     */
    enum InvoiceType {
        Prepaid = 0; /// Prepaid.
        Postpaid = 1; /// Postpaid.
    }
    InvoiceType type = 15; /// Type.
    UnixTime dueDate = 16; /// Due date.
    UnixTime invoiceDate = 17; /// Invoice date.
    NullableUnixTime paymentDate = 18; /// Payment date.
    Decimal penaltyRate = 19; /// Penalty rate.
    string tax1Name = 20; /// Tax1 name.
    Decimal tax1Total = 21; /// Tax1 total.
    string tax2Name = 22; /// Tax2 name.
    Decimal tax2Total = 23; /// Tax2 total.
    string resellerCompanyName = 24; /// Reseller company name.
    string resellerCompanyNumber = 25; /// Reseller company number.
    string resellerFirstName = 26; /// Reseller first name.
    string resellerLastName = 27; /// Reseller last name.
    string resellerAddress = 28; /// Reseller address.
    string resellerAddress2 = 29; /// Reseller address2.
    string resellerCity = 30; /// Reseller city.
    string resellerZip = 31; /// Reseller zip.
    string resellerCountryState = 32; /// Reseller country state.
    string resellerCountry = 33; /// Reseller country.
    Guid customerId = 34; /// Customer id.
    string customerName = 35; /// Customer name.
    string customerCompanyName = 36; /// Customer company name.
    string customerCompanyNumber = 37; /// Customer company number.
    string customerFirstName = 38; /// Customer first name.
    string customerLastName = 39; /// Customer last name.
    string customerAddress = 40; /// Customer address.
    string customerAddress2 = 41; /// Customer address2.
    string customerCity = 42; /// Customer city.
    string customerZip = 43; /// Customer zip.
    string customerCountryState = 44; /// Customer country state.
    string customerCountry = 45; /// Customer country.
    string customerEmail = 46; /// Customer email.
    string customerLegalNumber = 47; /// Customer legal number.
    string referenceNumber = 48; /// Reference number.
    repeated InvoiceCustomAttribute customAttributes = 49; /// Custom attributes.
    repeated InvoiceLine invoiceLines = 50; /// Invoice lines.
    repeated InvoiceNotification invoiceNotification = 51; /// Invoice notification.
    /**
     * The DefaultRecipientType data type.
     */
    enum DefaultRecipientType {
        Reseller = 0; /// Reseller.
        Customer = 1; /// Customer.
    }
    DefaultRecipientType recipient = 52; /// Recipient.
    string referenceNumberFormat = 53; /// Reference number format.
    /**
     * The InvoiceDocumentType data type.
     */
    enum InvoiceDocumentType {
        Invoice = 0; /// Invoice.
        Proforma = 1; /// Proforma.
    }
    InvoiceDocumentType documentType = 54; /// Document type.
    string proformaReferenceNumberFormat = 55; /// Proforma reference number format.
    Invoice paidInvoice = 56; /// Paid invoice.
    repeated AccountNote invoiceNotes = 57; /// Invoice notes.
    int32 invoiceReminderDelay = 58; /// Invoice reminder delay.
    ResellerCommission resellerCommission = 59; /// Reseller commission.
}

/**
 * The InvoiceCustomAttribute data type.
 */
message InvoiceCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The InvoiceLine data type.
 */
message InvoiceLine {
    Guid id = 1; /// Id.
    string description = 2; /// Description.
    Guid itemId = 3; /// Item id.
    int32 itemNo = 4; /// Item no.
    string itemName = 5; /// Item name.
    string itemNumber = 6; /// Item number.
    string itemExternalId = 7; /// Item external id.
    bool recurring = 8; /// Recurring.
    Guid renewalPeriodId = 9; /// Renewal period id.
    int32 renewalPeriod = 10; /// Renewal period.
    string renewalPeriodUnit = 11; /// Renewal period unit.
    Decimal price = 12; /// Price.
    Decimal commissionDiscount = 13; /// Commission discount.
    Decimal resellerPrice = 14; /// Reseller price.
    Decimal resellerCommission = 15; /// Reseller commission.
    Decimal discount = 16; /// Discount.
    Decimal quantity = 17; /// Quantity.
    Guid invoiceId = 18; /// Invoice id.
    bool isProRated = 19; /// Is pro rated.
    repeated InvoiceLineItemUsage usages = 20; /// Usages.
    repeated InvoiceLineCustomAttribute customAttributes = 21; /// Custom attributes.
    repeated InvoiceLineTax taxes = 22; /// Taxes.
}

/**
 * The InvoiceNotification data type.
 */
message InvoiceNotification {
    Guid id = 1; /// Id.
    string type = 2; /// Type.
    UnixTime timeStamp = 3; /// Time stamp.
    Invoice invoice = 4; /// Invoice.
}

/**
 * The ResellerCommission data type.
 */
message ResellerCommission {
    Guid id = 1; /// Id.
    Guid resellerId = 2; /// Reseller id.
    Decimal amount = 3; /// Amount.
    /**
     * The ResellerCommissionStatus data type.
     */
    enum ResellerCommissionStatus {
        Pending = 0; /// Pending.
        PaidOut = 1; /// Paid out.
        PaidOutAsDiscount = 2; /// Paid out as discount.
    }
    ResellerCommissionStatus status = 4; /// Status.
    NullableUnixTime payoutDate = 5; /// Payout date.
    Account reseller = 6; /// Reseller.
}

/**
 * The InvoiceLineItemUsage data type.
 */
message InvoiceLineItemUsage {
    Guid id = 1; /// Id.
    Guid invoiceLineId = 2; /// Invoice line id.
    string counterId = 3; /// Counter id.
    string counterName = 4; /// Counter name.
    string counterUnitValue = 5; /// Counter unit value.
    string counterUnitName = 6; /// Counter unit name.
    string rangeName = 7; /// Range name.
    Decimal rangePrice = 8; /// Range price.
    Decimal rangeResellerPrice = 9; /// Range reseller price.
    Decimal counterValue = 10; /// Counter value.
    Decimal price = 11; /// Price.
    Decimal resellerPrice = 12; /// Reseller price.
}

/**
 * The InvoiceLineCustomAttribute data type.
 */
message InvoiceLineCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The InvoiceLineTax data type.
 */
message InvoiceLineTax {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string taxRuleName = 3; /// Tax rule name.
    Guid taxRuleId = 4; /// Tax rule id.
    /**
     * The TaxPartType data type.
     */
    enum TaxPartType {
        Tax1 = 0; /// Tax1.
        Tax2 = 1; /// Tax2.
    }
    TaxPartType taxPart = 5; /// Tax part.
    Decimal percent = 6; /// Percent.
    bool applyToAmountOnly = 7; /// Apply to amount only.
}

/**
 * The Order data type.
 */
message Order {
    Guid id = 1; /// Id.
    string number = 2; /// Number.
    Guid customerId = 3; /// Customer id.
    Guid resellerId = 4; /// Reseller id.
    Guid createdByAccountId = 5; /// Created by account id.
    string description = 6; /// Description.
    UnixTime orderDate = 7; /// Order date.
    UnixTime createdTime = 8; /// Created time.
    repeated OrderCustomAttribute customAttributes = 9; /// Custom attributes.
    repeated OrderLine orderLines = 10; /// Order lines.
    Decimal subtotal = 11; /// Subtotal.
    Decimal discountTotal = 12; /// Discount total.
    string tax1Name = 13; /// Tax1 name.
    Decimal tax1Total = 14; /// Tax1 total.
    Decimal tax1Rate = 15; /// Tax1 rate.
    string tax2Name = 16; /// Tax2 name.
    Decimal tax2Total = 17; /// Tax2 total.
    Decimal tax2Rate = 18; /// Tax2 rate.
    Decimal resellerCommissionTotal = 19; /// Reseller commission total.
    Decimal total = 20; /// Total.
    /**
     * The OrderStatus data type.
     */
    enum OrderStatus {
        PlacementFailed = 0; /// Placement failed.
        PlacementOk = 1; /// Placement ok.
        ProcessingFailed = 2; /// Processing failed.
        ManualReviewWanted = 3; /// Manual review wanted.
        ProcessedOk = 4; /// Processed ok.
        ReviewOk = 5; /// Review ok.
        Deleted = 6; /// Deleted.
        TimedOut = 7; /// Timed out.
        PendingPayment = 8; /// Pending payment.
        Processing = 9; /// Processing.
        CustomerOverDebtLimit = 10; /// Customer over debt limit.
    }
    OrderStatus status = 21; /// Status.
    string resellerCompanyName = 22; /// Reseller company name.
    string customerName = 23; /// Customer name.
    string customerCompanyName = 24; /// Customer company name.
    string customerCompanyNumber = 25; /// Customer company number.
    string customerFirstName = 26; /// Customer first name.
    string customerLastName = 27; /// Customer last name.
    string customerAddress = 28; /// Customer address.
    string customerAddress2 = 29; /// Customer address2.
    string customerCity = 30; /// Customer city.
    string customerZip = 31; /// Customer zip.
    string customerCountryState = 32; /// Customer country state.
    string customerCountry = 33; /// Customer country.
    string customerEmail = 34; /// Customer email.
    string customerPhone = 35; /// Customer phone.
    string customerMobile = 36; /// Customer mobile.
    string customerFax = 37; /// Customer fax.
    string customerBillingCompanyName = 38; /// Customer billing company name.
    string customerBillingCompanyNumber = 39; /// Customer billing company number.
    string customerBillingFirstName = 40; /// Customer billing first name.
    string customerBillingLastName = 41; /// Customer billing last name.
    string customerBillingAddress = 42; /// Customer billing address.
    string customerBillingAddress2 = 43; /// Customer billing address2.
    string customerBillingCity = 44; /// Customer billing city.
    string customerBillingZip = 45; /// Customer billing zip.
    string customerBillingCountryState = 46; /// Customer billing country state.
    string customerBillingCountry = 47; /// Customer billing country.
    string customerBillingEmail = 48; /// Customer billing email.
    string customerBillingPhone = 49; /// Customer billing phone.
    string customerBillingMobile = 50; /// Customer billing mobile.
    string customerBillingFax = 51; /// Customer billing fax.
    string currency = 52; /// Currency.
    string customerLegalNumber = 53; /// Customer legal number.
    string orderType = 54; /// Order type.
    repeated OrderNotification notifications = 55; /// Notifications.
    repeated AttachedDocument attachedDocuments = 56; /// Attached documents.
    bool overridePrices = 57; /// Override prices.
    repeated AccountNote orderNotes = 58; /// Order notes.
}

/**
 * The OrderCustomAttribute data type.
 */
message OrderCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The OrderLine data type.
 */
message OrderLine {
    Guid id = 1; /// Id.
    Guid orderId = 2; /// Order id.
    string description = 3; /// Description.
    Guid itemId = 4; /// Item id.
    int32 itemNo = 5; /// Item no.
    string itemName = 6; /// Item name.
    string itemNumber = 7; /// Item number.
    string itemExternalId = 8; /// Item external id.
    Guid renewalPeriodId = 9; /// Renewal period id.
    int32 renewalPeriod = 10; /// Renewal period.
    string renewalPeriodUnit = 11; /// Renewal period unit.
    Decimal price = 12; /// Price.
    Decimal resellerPrice = 13; /// Reseller price.
    Decimal resellerCommission = 14; /// Reseller commission.
    Decimal discount = 15; /// Discount.
    Decimal quantity = 16; /// Quantity.
    repeated OrderLineTax taxes = 17; /// Taxes.
    Decimal total = 18; /// Total.
    repeated OrderLineCustomAttribute customAttributes = 19; /// Custom attributes.
    Guid subscriptionId = 20; /// Subscription id.
    Decimal prorateCoeficient = 21; /// Prorate coeficient.
}

/**
 * The OrderNotification data type.
 */
message OrderNotification {
    Guid id = 1; /// Id.
    string type = 2; /// Type.
    UnixTime timeStamp = 3; /// Time stamp.
    Order order = 4; /// Order.
}

/**
 * The AttachedDocument data type.
 */
message AttachedDocument {
    Guid id = 1; /// Id.
    string fileName = 2; /// File name.
    string documentType = 3; /// Document type.
    string data = 4; /// Data.
}

/**
 * The OrderLineTax data type.
 */
message OrderLineTax {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string taxRuleName = 3; /// Tax rule name.
    Guid taxRuleId = 4; /// Tax rule id.
    /**
     * The TaxPartType data type.
     */
    enum TaxPartType {
        Tax1 = 0; /// Tax1.
        Tax2 = 1; /// Tax2.
    }
    TaxPartType taxPart = 5; /// Tax part.
    Decimal percent = 6; /// Percent.
    bool applyToAmountOnly = 7; /// Apply to amount only.
}

/**
 * The OrderLineCustomAttribute data type.
 */
message OrderLineCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The InvoiceOverview data type.
 */
message InvoiceOverview {
    string name = 1; /// Name.
    int32 count = 2; /// Count.
    Decimal total = 3; /// Total.
    string curreny = 4; /// Curreny.
}

/**
 * The BulkSendJob data type.
 */
message BulkSendJob {
    Guid id = 1; /// Id.
    int32 totalSelected = 2; /// Total selected.
    int32 totalForEmail = 3; /// Total for email.
    int32 totalForPrint = 4; /// Total for print.
    int32 sent = 5; /// Sent.
    string status = 6; /// Status.
    UnixTime schedule = 7; /// Schedule.
    UnixTime insertTimeStamp = 8; /// Insert time stamp.
    UnixTime updateTimeStamp = 9; /// Update time stamp.
    string pdfFilenames = 10; /// Pdf filenames.
    repeated BulkSendStatus bulkSendStatuses = 11; /// Bulk send statuses.
}

/**
 * The BulkSendStatus data type.
 */
message BulkSendStatus {
    Guid id = 1; /// Id.
    string status = 2; /// Status.
    NullableGuid bulkSendJobId = 3; /// Bulk send job id.
    Guid externalId = 4; /// External id.
    string entity = 5; /// Entity.
    string recipient = 6; /// Recipient.
    string subject = 7; /// Subject.
    string body = 8; /// Body.
    string attachment = 9; /// Attachment.
    UnixTime insertTimeStamp = 10; /// Insert time stamp.
    UnixTime updateTimeStamp = 11; /// Update time stamp.
}

/**
 * The FinancialObligation data type.
 */
message FinancialObligation {
    Invoice terminationInvoice = 1; /// Termination invoice.
    repeated Invoice invoicesToCredit = 2; /// Invoices to credit.
}

/**
 * The InvoiceReminder data type.
 */
message InvoiceReminder {
    string name = 1; /// Name.
    string relativeToReminder = 2; /// Relative to reminder.
    string relativeToDueDate = 3; /// Relative to due date.
    bool sendOnPreviousWorkingDay = 4; /// Send on previous working day.
    bool sendOnWorkingDayOnly = 5; /// Send on working day only.
    int32 order = 6; /// Order.
    repeated InvoiceReminderCategoryConfiguration categoriesConfiguration = 7; /// Categories configuration.
    UnixTime date = 8; /// Date.
}

/**
 * The InvoiceReminderCategoryConfiguration data type.
 */
message InvoiceReminderCategoryConfiguration {
    repeated string categories = 1; /// Categories.
    int32 daysOffset = 2; /// Days offset.
    int32 order = 3; /// Order.
    string filter = 4; /// Filter.
}

/**
 * The CreditedInvoice data type.
 */
message CreditedInvoice {
    Guid id = 1; /// Id.
    Guid accountId = 2; /// Account id.
    Guid createdByAccountId = 3; /// Created by account id.
    string description = 4; /// Description.
    UnixTime createdTime = 5; /// Created time.
    UnixTime lastChangeTime = 6; /// Last change time.
    UnixTime invoiceDate = 7; /// Invoice date.
    string notes = 8; /// Notes.
    string number = 9; /// Number.
    string renderedContent = 10; /// Rendered content.
    Guid templateId = 11; /// Template id.
    Decimal total = 12; /// Total.
    Decimal subTotal = 13; /// Sub total.
    string currency = 14; /// Currency.
    string tax1Name = 15; /// Tax1 name.
    Decimal tax1Total = 16; /// Tax1 total.
    Decimal tax1CreditedSum = 17; /// Tax1 credited sum.
    string tax2Name = 18; /// Tax2 name.
    Decimal tax2Total = 19; /// Tax2 total.
    Decimal tax2CreditedSum = 20; /// Tax2 credited sum.
    /**
     * The CreditedInvoiceStatus data type.
     */
    enum CreditedInvoiceStatus {
        CisNew = 0; /// Cis new.
        CisSentT = 1; /// Cis sent t.
        CisDeleted = 2; /// Cis deleted.
    }
    CreditedInvoiceStatus status = 21; /// Status.
    /**
     * The CreditedInvoiceSendStatus data type.
     */
    enum CreditedInvoiceSendStatus {
        CissUnsent = 0; /// Ciss unsent.
        CissSent = 1; /// Ciss sent.
    }
    CreditedInvoiceSendStatus sendStatus = 22; /// Send status.
    repeated CreditedInvoiceCustomAttribute customAttributes = 23; /// Custom attributes.
    repeated CreditedInvoiceLine invoiceLines = 24; /// Invoice lines.
    string referenceNumber = 25; /// Reference number.
    Invoice invoice = 26; /// Invoice.
    Decimal creditedTotal = 27; /// Credited total.
}

/**
 * The CreditedInvoiceCustomAttribute data type.
 */
message CreditedInvoiceCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The CreditedInvoiceLine data type.
 */
message CreditedInvoiceLine {
    Guid id = 1; /// Id.
    string description = 2; /// Description.
    Guid itemId = 3; /// Item id.
    int32 itemNo = 4; /// Item no.
    string itemName = 5; /// Item name.
    string itemNumber = 6; /// Item number.
    string itemExternalId = 7; /// Item external id.
    bool recurring = 8; /// Recurring.
    int32 renewalPeriod = 9; /// Renewal period.
    string renewalPeriodUnit = 10; /// Renewal period unit.
    Decimal quantity = 11; /// Quantity.
    Decimal price = 12; /// Price.
    Decimal discount = 13; /// Discount.
    Decimal credit = 14; /// Credit.
    Decimal creditedAmount = 15; /// Credited amount.
    Guid invoiceId = 16; /// Invoice id.
    repeated CreditedInvoiceLineCustomAttribute customAttributes = 17; /// Custom attributes.
    repeated CreditedInvoiceLineTax taxes = 18; /// Taxes.
}

/**
 * The CreditedInvoiceLineCustomAttribute data type.
 */
message CreditedInvoiceLineCustomAttribute {
    Guid id = 1; /// Id.
    int32 itemNo = 2; /// Item no.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The CreditedInvoiceLineTax data type.
 */
message CreditedInvoiceLineTax {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string taxRuleName = 3; /// Tax rule name.
    Guid taxRuleId = 4; /// Tax rule id.
    /**
     * The TaxPartType data type.
     */
    enum TaxPartType {
        Tax1 = 0; /// Tax1.
        Tax2 = 1; /// Tax2.
    }
    TaxPartType taxPart = 5; /// Tax part.
    Decimal percent = 6; /// Percent.
    bool applyToAmountOnly = 7; /// Apply to amount only.
}

/**
 * The AttributeData data type.
 */
message AttributeData {
    string name = 1; /// Name.
    string value = 2; /// Value.
}

/**
 * The TasksToRun data type.
 */
message TasksToRun {
    Guid id = 1; /// Id.
    Guid accountId = 2; /// Account id.
    Guid customerId = 3; /// Customer id.
    string customerFriendlyId = 4; /// Customer friendly id.
    string companyName = 5; /// Company name.
    string firstName = 6; /// First name.
    string lastName = 7; /// Last name.
    Guid itemId = 8; /// Item id.
    string itemFriendlyId = 9; /// Item friendly id.
    string itemType = 10; /// Item type.
    string status = 11; /// Status.
    string taskType = 12; /// Task type.
    UnixTime createdTime = 13; /// Created time.
    UnixTime statusLastChangeTime = 14; /// Status last change time.
    UnixTime lastProcessingTime = 15; /// Last processing time.
    UnixTime runTime = 16; /// Run time.
    int32 runCount = 17; /// Run count.
    string description = 18; /// Description.
}

/**
 * The TasksToRunOverview data type.
 */
message TasksToRunOverview {
    string taskType = 1; /// Task type.
    string status = 2; /// Status.
    int32 numberOfTasks = 3; /// Number of tasks.
}

/**
 * The ProvisioningAction data type.
 */
message ProvisioningAction {
    Guid id = 1; /// Id.
    UnixTime createdTime = 2; /// Created time.
    string actionName = 3; /// Action name.
    string itemId = 4; /// Item id.
    int32 provisioningOrder = 5; /// Provisioning order.
    bool inProgress = 6; /// In progress.
    int32 tryCount = 7; /// Try count.
    NullableUnixTime lastTryTime = 8; /// Last try time.
    string lastError = 9; /// Last error.
    map<string, string> customAttributes = 10; /// Custom attributes.
}

/**
 * The ItemCat data type.
 */
message ItemCat {
    string name = 1; /// Name.
    string prettyName = 2; /// Pretty name.
}

/**
 * The TaxRuleResult data type.
 */
message TaxRuleResult {
    Decimal percentage = 1; /// Percentage.
    string description = 2; /// Description.
    bool isCumulative = 3; /// Is cumulative.
    TaxRule taxRule = 4; /// Tax rule.
}

/**
 * The TaxRule data type.
 */
message TaxRule {
    Guid id = 1; /// Id.
    TaxProfile taxProfile = 2; /// Tax profile.
    string name = 3; /// Name.
    int32 priority = 4; /// Priority.
    /**
     * The TaxPartType data type.
     */
    enum TaxPartType {
        Tax1 = 0; /// Tax1.
        Tax2 = 1; /// Tax2.
    }
    TaxPartType taxPart = 5; /// Tax part.
    string resellerCountryCode = 6; /// Reseller country code.
    string resellerState = 7; /// Reseller state.
    string customerCountryCode = 8; /// Customer country code.
    string customerCountryTag = 9; /// Customer country tag.
    string ccustomerState = 10; /// Ccustomer state.
    /**
     * The VatNumberRuleConditionType data type.
     */
    enum VatNumberRuleConditionType {
        NotRelevant = 0; /// Not relevant.
        Yes = 1; /// Yes.
        No = 2; /// No.
    }
    VatNumberRuleConditionType vatNumberPresent = 11; /// Vat number present.
    VatNumberRuleConditionType VatNumberValid = 12; /// Vat number valid.
    Decimal taxRate = 13; /// Tax rate.
}

/**
 * The TaxProfile data type.
 */
message TaxProfile {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    bool compound = 3; /// Compound.
    repeated ItemCat itemCategories = 4; /// Item categories.
    repeated AccountDetails resellers = 5; /// Resellers.
    repeated TaxRule rules = 6; /// Rules.
}

/**
 * The ItemTaxRuleResult data type.
 */
message ItemTaxRuleResult {
    Guid itemId = 1; /// Item id.
    TaxRuleResult taxRuleResult1 = 2; /// Tax rule result1.
    TaxRuleResult taxRuleResult2 = 3; /// Tax rule result2.
}

/**
 * The UsageReport data type.
 */
message UsageReport {
    Guid accoutId = 1; /// Accout id.
    Currency currency = 2; /// Currency.
    UnixTime startTime = 3; /// Start time.
    UnixTime endTime = 4; /// End time.
    repeated ItemUsage itemUsages = 5; /// Item usages.
    Decimal subtotal = 6; /// Subtotal.
    Decimal taxes = 7; /// Taxes.
    Subscription subscription = 8; /// Subscription.
}

/**
 * The ItemUsage data type.
 */
message ItemUsage {
    Item item = 1; /// Item.
    repeated CounterUsage counterUsages = 2; /// Counter usages.
    repeated ItemUsageTax taxes = 3; /// Taxes.
    Decimal subtotal = 4; /// Subtotal.
    Decimal resellerSubtotal = 5; /// Reseller subtotal.
    string tax1Name = 6; /// Tax1 name.
    Decimal tax1Total = 7; /// Tax1 total.
    string tax2Name = 8; /// Tax2 name.
    Decimal tax2Total = 9; /// Tax2 total.
    Decimal total = 10; /// Total.
}

/**
 * The CounterUsage data type.
 */
message CounterUsage {
    CounterType counterType = 1; /// Counter type.
    Decimal counterValue = 2; /// Counter value.
    Decimal price = 3; /// Price.
    Decimal resellerPrice = 4; /// Reseller price.
}

/**
 * The ItemUsageTax data type.
 */
message ItemUsageTax {
    string name = 1; /// Name.
    string taxRuleName = 2; /// Tax rule name.
    Guid taxRuleId = 3; /// Tax rule id.
    /**
     * The TaxPartType data type.
     */
    enum TaxPartType {
        Tax1 = 0; /// Tax1.
        Tax2 = 1; /// Tax2.
    }
    TaxPartType taxPart = 4; /// Tax part.
    Decimal percent = 5; /// Percent.
    bool applyToAmountOnly = 6; /// Apply to amount only.
}

/**
 * The PriceListOwners data type.
 */
message PriceListOwners {
    Guid priceListOwnerId = 1; /// Price list owner id.
    Guid parentPriceListOwnerId = 2; /// Parent price list owner id.
}

/**
 * The Shop data type.
 */
message Shop {
    Guid id = 1; /// Id.
    Guid resellerId = 2; /// Reseller id.
    bool default = 3; /// Default.
    UnixTime activeFrom = 4; /// Active from.
    UnixTime activeTo = 5; /// Active to.
    string name = 6; /// Name.
    repeated ShopItem items = 7; /// Items.
    UnixTime createdTime = 8; /// Created time.
    UnixTime lastUpdateTime = 9; /// Last update time.
}

/**
 * The ShopItem data type.
 */
message ShopItem {
    Guid id = 1; /// Id.
    Item item = 2; /// Item.
    int32 order = 3; /// Order.
    repeated ShopItemCategory categories = 4; /// Categories.
    string name = 5; /// Name.
    string description = 6; /// Description.
    map<string, string> properties = 7; /// Properties.
    repeated GuidStrDict multilanguageNamesOverrides = 8; /// Multilanguage names overrides.
    repeated GuidStrDict multilanguageDescriptionsOverrides = 9; /// Multilanguage descriptions overrides.
}

/**
 * The ShopValidationResult data type.
 */
message ShopValidationResult {
    bool valid = 1; /// Valid.
    string validationMessage = 2; /// Validation message.
}

/**
 * The Payment data type.
 */
message Payment {
    Guid id = 1; /// Id.
    string paymentMethodProvider = 2; /// Payment method provider.
    Guid createdByAccountId = 3; /// Created by account id.
    Guid resellerId = 4; /// Reseller id.
    string description = 5; /// Description.
    Decimal amount = 6; /// Amount.
    /**
     * The PaymentStatus data type.
     */
    enum PaymentStatus {
        UnmatchedNoInvoice = 0; /// Unmatched no invoice.
        CurrencyMismatch = -3;
        Error = -2;
        AdjustmentPayment = -1;
        UnmatchedInvoicePaid = 1; /// Unmatched invoice paid.
        UnmatchedInvoiceCredited = 2; /// Unmatched invoice credited.
        LargeOverpayment = 3; /// Large overpayment.
        LargeUnderpayment = 4; /// Large underpayment.
        Ok = 5; /// Ok.
        Underpaid = 6; /// Underpaid.
        Overpaid = 7; /// Overpaid.
        Deleted = 8; /// Deleted.
        MoreThanOneMatch = 9; /// More than one match.
    }
    PaymentStatus status = 7; /// Status.
    string invoiceReferenceNumber = 8; /// Invoice reference number.
    Invoice invoice = 9; /// Invoice.
    Invoice newInvoice = 10; /// New invoice.
    UnixTime createdTime = 11; /// Created time.
    UnixTime lastChangedTime = 12; /// Last changed time.
    map<string, string> customAttributes = 13; /// Custom attributes.
    string documentId = 14; /// Document id.
    Currency currency = 15; /// Currency.
    string batchId = 16; /// Batch id.
    string paymentTransactionId = 17; /// Payment transaction id.
    string generateDocumentId = 18; /// Generate document id.
    string paymentId = 19; /// Payment id.
}

/**
 * The PaymentRuleResult data type.
 */
message PaymentRuleResult {
    /**
     * The PaymentStatus data type.
     */
    enum PaymentStatus {
        UnmatchedNoInvoice = 0; /// Unmatched no invoice.
        CurrencyMismatch = -3;
        Error = -2;
        AdjustmentPayment = -1;
        UnmatchedInvoicePaid = 1; /// Unmatched invoice paid.
        UnmatchedInvoiceCredited = 2; /// Unmatched invoice credited.
        LargeOverpayment = 3; /// Large overpayment.
        LargeUnderpayment = 4; /// Large underpayment.
        Ok = 5; /// Ok.
        Underpaid = 6; /// Underpaid.
        Overpaid = 7; /// Overpaid.
        Deleted = 8; /// Deleted.
        MoreThanOneMatch = 9; /// More than one match.
    }
    PaymentStatus status = 1; /// Status.
    bool isInvoicePaid = 2; /// Is invoice paid.
    Decimal balanceChange = 3; /// Balance change.
    bool addToPrepaidCredit = 4; /// Add to prepaid credit.
    bool markOverpaidInvoicesAsPaid = 5; /// Mark overpaid invoices as paid.
}

/**
 * The PaymentOverview data type.
 */
message PaymentOverview {
    Decimal paymentReceived = 1; /// Payment received.
    string currencySymbol = 2; /// Currency symbol.
}

/**
 * The ParsePaymentFileResult data type.
 */
message ParsePaymentFileResult {
    string parserDescription = 1; /// Parser description.
    string batchId = 2; /// Batch id.
    string parseErrorMessage = 3; /// Parse error message.
    string parserErrorMessageLong = 4; /// Parser error message long.
    int32 paymentsProcessed = 5; /// Payments processed.
}

/**
 * The PayFileRecord data type.
 */
message PayFileRecord {
    Guid id = 1; /// Id.
    Guid payFileProcessLogId = 2; /// Pay file process log id.
    string payFileProcessLogBatchId = 3; /// Pay file process log batch id.
    string payFileProcessLogFilename = 4; /// Pay file process log filename.
    Guid resellerId = 5; /// Reseller id.
    string documentId = 6; /// Document id.
    UnixTime paymentDate = 7; /// Payment date.
    string invoiceReferenceNumber = 8; /// Invoice reference number.
    Decimal amount = 9; /// Amount.
    string currencyCode = 10; /// Currency code.
    /**
     * The PayFileRecordProcessingStatus data type.
     */
    enum PayFileRecordProcessingStatus {
        Unprocessed = 0; /// Unprocessed.
        Processed = 1; /// Processed.
    }
    PayFileRecordProcessingStatus processingStatus = 11; /// Processing status.
    /**
     * The PaymentStatus data type.
     */
    enum PaymentStatus {
        UnmatchedNoInvoice = 0; /// Unmatched no invoice.
        CurrencyMismatch = -3;
        Error = -2;
        AdjustmentPayment = -1;
        UnmatchedInvoicePaid = 1; /// Unmatched invoice paid.
        UnmatchedInvoiceCredited = 2; /// Unmatched invoice credited.
        LargeOverpayment = 3; /// Large overpayment.
        LargeUnderpayment = 4; /// Large underpayment.
        Ok = 5; /// Ok.
        Underpaid = 6; /// Underpaid.
        Overpaid = 7; /// Overpaid.
        Deleted = 8; /// Deleted.
        MoreThanOneMatch = 9; /// More than one match.
    }
    PaymentStatus status = 12; /// Status.
    bool isMatched = 13; /// Is matched.
    string fileFormat = 14; /// File format.
    bool isDeleted = 15; /// Is deleted.
    UnixTime createdTime = 16; /// Created time.
    UnixTime lastChangeTime = 17; /// Last change time.
    /**
     * The PaymentMatchMethod data type.
     */
    enum PaymentMatchMethod {
        Automatic = 0; /// Automatic.
        Manual = 1; /// Manual.
    }
    PaymentMatchMethod paymentMatchMethod = 18; /// Payment match method.
    NullableUnixTime matchingTime = 19; /// Matching time.
    Invoice matchedInvoice = 20; /// Matched invoice.
    string matchResultDescription = 21; /// Match result description.
    map<string, string> customAttrbiutes = 22; /// Custom attrbiutes.
}

/**
 * The PaymentMatchResult data type.
 */
message PaymentMatchResult {
    repeated Invoice invoices = 1; /// Invoices.
    /**
     * The PaymentStatus data type.
     */
    enum PaymentStatus {
        UnmatchedNoInvoice = 0; /// Unmatched no invoice.
        CurrencyMismatch = -3;
        Error = -2;
        AdjustmentPayment = -1;
        UnmatchedInvoicePaid = 1; /// Unmatched invoice paid.
        UnmatchedInvoiceCredited = 2; /// Unmatched invoice credited.
        LargeOverpayment = 3; /// Large overpayment.
        LargeUnderpayment = 4; /// Large underpayment.
        Ok = 5; /// Ok.
        Underpaid = 6; /// Underpaid.
        Overpaid = 7; /// Overpaid.
        Deleted = 8; /// Deleted.
        MoreThanOneMatch = 9; /// More than one match.
    }
    PaymentStatus status = 2; /// Status.
    bool isMatched = 3; /// Is matched.
    string description = 4; /// Description.
}

/**
 * The FinancialRecord data type.
 */
message FinancialRecord {
    repeated Payment payments = 1; /// Payments.
    repeated Refund refunds = 2; /// Refunds.
}

/**
 * The Refund data type.
 */
message Refund {
    Guid id = 1; /// Id.
    Guid createdByAccountId = 2; /// Created by account id.
    Guid resellerId = 3; /// Reseller id.
    string description = 4; /// Description.
    Decimal amount = 5; /// Amount.
    /**
     * The RefundStatusType data type.
     */
    enum RefundStatusType {
        Pending = 0; /// Pending.
        DoneManual = 1; /// Done manual.
        DonePrepaidCredits = 2; /// Done prepaid credits.
        DoneAutomatic = 3; /// Done automatic.
        FailedAutomatic = -1;
    }
    RefundStatusType status = 6; /// Status.
    string invoiceReferenceNumber = 7; /// Invoice reference number.
    Invoice invoice = 8; /// Invoice.
    UnixTime createdTime = 9; /// Created time.
    UnixTime lastChangedTime = 10; /// Last changed time.
    Currency currency = 11; /// Currency.
    Payment originalPayment = 12; /// Original payment.
    string refundTransactionId = 13; /// Refund transaction id.
}

/**
 * The RefundOverview data type.
 */
message RefundOverview {
    Decimal refunds = 1; /// Refunds.
    string currencySymbol = 2; /// Currency symbol.
}

/**
 * The PrepaidCredit data type.
 */
message PrepaidCredit {
    Guid id = 1; /// Id.
    Guid createdByAccountId = 2; /// Created by account id.
    Guid resellerId = 3; /// Reseller id.
    string description = 4; /// Description.
    Decimal amount = 5; /// Amount.
    /**
     * The PrepaidCreditStatusType data type.
     */
    enum PrepaidCreditStatusType {
        CreditPurchased = 0; /// Credit purchased.
        CreditSpent = 1; /// Credit spent.
        CreditOverpayment = 2; /// Credit overpayment.
    }
    PrepaidCreditStatusType status = 6; /// Status.
    string invoiceReferenceNumber = 7; /// Invoice reference number.
    Invoice invoice = 8; /// Invoice.
    UnixTime createdTime = 9; /// Created time.
    UnixTime lastChangedTime = 10; /// Last changed time.
    map<string, string> customAttributes = 11; /// Custom attributes.
    Currency currency = 12; /// Currency.
}

/**
 * The AuthorizationSchemaObject data type.
 */
message AuthorizationSchemaObject {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    bool isAllowed = 3; /// Is allowed.
}

/**
 * The PluginConfiguration data type.
 */
message PluginConfiguration {
    Guid id = 1; /// Id.
    Guid resellerId = 2; /// Reseller id.
    string pluginName = 3; /// Plugin name.
    string key = 4; /// Key.
    string value = 5; /// Value.
}

/**
 * The Plugin data type.
 */
message Plugin {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string fullClassName = 3; /// Full class name.
    bool enabled = 4; /// Enabled.
    bool hasSchema = 5; /// Has schema.
}

/**
 * The ScheduledTask data type.
 */
message ScheduledTask {
    Guid id = 1; /// Id.
    NullableUnixTime lastRunTime = 2; /// Last run time.
    NullableUnixTime nextRunTime = 3; /// Next run time.
    TimeSpan expiresAfter = 4; /// Expires after.
    string name = 5; /// Name.
    string className = 6; /// Class name.
    bool runOnce = 7; /// Run once.
    bool skipHolidays = 8; /// Skip holidays.
    bool skipWeekend = 9; /// Skip weekend.
    TimeSpan period = 10; /// Period.
    bool finished = 11; /// Finished.
    string cronSchedule = 12; /// Cron schedule.
}

/**
 * The ScheduledTaskRun data type.
 */
message ScheduledTaskRun {
    Guid id = 1; /// Id.
    Guid scheduledTaskId = 2; /// Scheduled task id.
    string scheduledTaskName = 3; /// Scheduled task name.
    Guid scheduledTaskRunId = 4; /// Scheduled task run id.
    UnixTime startTime = 5; /// Start time.
    UnixTime endTime = 6; /// End time.
    int32 numErrors = 7; /// Num errors.
}

/**
 * The UpgradeGroupMember data type.
 */
message UpgradeGroupMember {
    Guid id = 1; /// Id.
    UpgradeGroup group = 2; /// Group.
    Guid itemId = 3; /// Item id.
    string itemName = 4; /// Item name.
    repeated UpgradeGroupMemberRenewalPeriod renewalPeriods = 5; /// Renewal periods.
    int32 upgradeLevel = 6; /// Upgrade level.
    bool upgradeable = 7; /// Upgradeable.
    bool downgradeable = 8; /// Downgradeable.
    bool downgradeableFrom = 9; /// Downgradeable from.
    bool upgradeableFrom = 10; /// Upgradeable from.
    bool upgradeIsAllowed = 11; /// Upgrade is allowed.
    bool downgradeIsAllowed = 12; /// Downgrade is allowed.
}

/**
 * The UpgradeGroup data type.
 */
message UpgradeGroup {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    repeated UpgradeGroupMember items = 3; /// Items.
}

/**
 * The UpgradeGroupMemberRenewalPeriod data type.
 */
message UpgradeGroupMemberRenewalPeriod {
    UpgradeGroupMember upgradeGroupMember = 1; /// Upgrade group member.
    Guid renewalPeriodId = 2; /// Renewal period id.
    int32 renewalPeriodValue = 3; /// Renewal period value.
    string renewalPeriodUnit = 4; /// Renewal period unit.
    Decimal proratedPrice = 5; /// Prorated price.
    Decimal discount = 6; /// Discount.
    Decimal subtotalAmount = 7; /// Subtotal amount.
    string taxName = 8; /// Tax name.
    Decimal taxAmount = 9; /// Tax amount.
    Decimal totalAmount = 10; /// Total amount.
    Order upgradeOrder = 11; /// Upgrade order.
    bool actionIsAllowed = 12; /// Action is allowed.
    bool downgradeIsAllowed = 13; /// Downgrade is allowed.
}

/**
 * The UpgradeDowngradeCheckStatus data type.
 */
message UpgradeDowngradeCheckStatus {
    bool upgradeDowngradePossible = 1; /// Upgrade downgrade possible.
    repeated ServiceStatus unsupportedServices = 2; /// Unsupported services.
    repeated ServiceStatus unsupportedExtensionServices = 3; /// Unsupported extension services.
}

/**
 * The ServiceStatus data type.
 */
message ServiceStatus {
    string serviceType = 1; /// Service type.
    string overLimit = 2; /// Over limit.
    string provisioned = 3; /// Provisioned.
    string hardQuota = 4; /// Hard quota.
    string softQuota = 5; /// Soft quota.
    map<string, string> additionalInfo = 6; /// Additional info.
}

/**
 * The VersionInfo data type.
 */
message VersionInfo {
    string assemblyName = 1; /// Assembly name.
    string description = 2; /// Description.
    string version = 3; /// Version.
}

/**
 * The StrVersionInfoDict data type.
 */
message StrVersionInfoDict {
    string key = 1; /// Key.
    VersionInfo value = 2; /// Value.
}

/**
 * The PaymentDiagnostics data type.
 */
message PaymentDiagnostics {
    int32 numberOfTransactionsInProgress = 1; /// Number of transactions in progress.
}

/**
 * The PaymentTransaction data type.
 */
message PaymentTransaction {
    Guid id = 1; /// Id.
    PaymentProfile paymentProfile = 2; /// Payment profile.
    string status = 3; /// Status.
    string statusCode = 4; /// Status code.
    string statusCodeDescription = 5; /// Status code description.
    string pluginName = 6; /// Plugin name.
    string guiPluginName = 7; /// Gui plugin name.
    string paymentMethod = 8; /// Payment method.
    string transactionId = 9; /// Transaction id.
    string initialTransactionId = 10; /// Initial transaction id.
    string transactionReference = 11; /// Transaction reference.
    /**
     * The TransactionReferenceType data type.
     */
    enum TransactionReferenceType {
        NotUsed = 0; /// Not used.
        Invoice = 1; /// Invoice.
        Order = 2; /// Order.
        Customer = 3; /// Customer.
    }
    TransactionReferenceType transactionReferenceType = 12; /// Transaction reference type.
    Decimal amount = 13; /// Amount.
    string currencyCode = 14; /// Currency code.
    string returnUrl = 15; /// Return url.
    UnixTime creationTime = 16; /// Creation time.
    UnixTime lastChangeTime = 17; /// Last change time.
    map<string, string> customAttributes = 18; /// Custom attributes.
    string redirectUrl = 19; /// Redirect url.
}

/**
 * The GlobalSearchResultItem data type.
 */
message GlobalSearchResultItem {
    Guid customerId = 1; /// Customer id.
    string customerNumber = 2; /// Customer number.
    string customerStatus = 3; /// Customer status.
    string customerType = 4; /// Customer type.
    map<string, string> customerDetails = 5; /// Customer details.
    repeated GlobalSearchResultObject foundObjects = 6; /// Found objects.
    int32 relevance = 7; /// Relevance.
}

/**
 * The GlobalSearchResultObject data type.
 */
message GlobalSearchResultObject {
    string objectType = 1; /// Object type.
    repeated GlobalSearchResultObjectProperty foundProperties = 2; /// Found properties.
}

/**
 * The GlobalSearchResultObjectProperty data type.
 */
message GlobalSearchResultObjectProperty {
    string objectId = 1; /// Object id.
    string objectFriendlyId = 2; /// Object friendly id.
    map<string, string> values = 3; /// Values.
}

/**
 * The Campaign data type.
 */
message Campaign {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string description = 3; /// Description.
    UnixTime validFrom = 4; /// Valid from.
    UnixTime validThru = 5; /// Valid thru.
    bool isDeleted = 6; /// Is deleted.
    int32 priority = 7; /// Priority.
    repeated CampaignDiscount discounts = 8; /// Discounts.
    repeated CampaignOrderCustomAttributeOverride campaignOrderCustomAttributeOverrides = 9; /// Campaign order custom attribute overrides.
    repeated CampaignOrderItemCustomAttributeOverride campaignOrderItemCustomAttributeOverrides = 10; /// Campaign order item custom attribute overrides.
    repeated CampaignCode campaignCodes = 11; /// Campaign codes.
    CampaignCodeGeneratorSettings campaignCodesGeneratorSettings = 12; /// Campaign codes generator settings.
}

/**
 * The CampaignDiscount data type.
 */
message CampaignDiscount {
    Guid id = 1; /// Id.
    Campaign campaign = 2; /// Campaign.
    Decimal discountAmount = 3; /// Discount amount.
    string currencyCode = 4; /// Currency code.
    Decimal discountPercentage = 5; /// Discount percentage.
    int32 priority = 6; /// Priority.
    int32 sortByPrice = 7; /// Sort by price.
    bool isExclusive = 8; /// Is exclusive.
    Decimal minimalOrderAmount = 9; /// Minimal order amount.
    int32 clientType = 10; /// Client type.
    bool isDiscountTransferable = 11; /// Is discount transferable.
    CampaignDiscountLimits limits = 12; /// Limits.
    repeated CampaignDiscountCondition campaignDiscountConditions = 13; /// Campaign discount conditions.
    repeated CampaignDiscountItem campaignDiscountItems = 14; /// Campaign discount items.
}

/**
 * The CampaignOrderCustomAttributeOverride data type.
 */
message CampaignOrderCustomAttributeOverride {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string value = 3; /// Value.
    Campaign campaign = 4; /// Campaign.
}

/**
 * The CampaignOrderItemCustomAttributeOverride data type.
 */
message CampaignOrderItemCustomAttributeOverride {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    string value = 3; /// Value.
    string itemNumber = 4; /// Item number.
    Campaign campaign = 5; /// Campaign.
}

/**
 * The CampaignCode data type.
 */
message CampaignCode {
    Guid id = 1; /// Id.
    string code = 2; /// Code.
    int32 canBeUsedTimes = 3; /// Can be used times.
    int32 usedTimes = 4; /// Used times.
    UnixTime validFrom = 5; /// Valid from.
    UnixTime validThru = 6; /// Valid thru.
    UnixTime dateCreated = 7; /// Date created.
    UnixTime dateUpdated = 8; /// Date updated.
    int32 batch = 9; /// Batch.
    string campaignId = 10; /// Campaign id.
    Campaign campaign = 11; /// Campaign.
}

/**
 * The CampaignCodeGeneratorSettings data type.
 */
message CampaignCodeGeneratorSettings {
    bool useGenerator = 1; /// Use generator.
    bool useDigits = 2; /// Use digits.
    bool useUpperChars = 3; /// Use upper chars.
    bool useLowerChars = 4; /// Use lower chars.
    bool useSpecialChars = 5; /// Use special chars.
    int32 promoCodeLength = 6; /// Promo code length.
    string promoCodePrefix = 7; /// Promo code prefix.
    string promoCodeSufix = 8; /// Promo code sufix.
    int32 promoCodeQuantity = 9; /// Promo code quantity.
    int32 promoCodeCanBeUsedTimes = 10; /// Promo code can be used times.
    UnixTime validFrom = 11; /// Valid from.
    UnixTime validThru = 12; /// Valid thru.
    int32 promoCodeUsage = 13; /// Promo code usage.
    string singlePromoCode = 14; /// Single promo code.
    bool promoCodesTypeSingle = 15; /// Promo codes type single.
}

/**
 * The CampaignDiscountLimits data type.
 */
message CampaignDiscountLimits {
    bool useQtyLimit = 1; /// Use qty limit.
    Decimal qtyLimit = 2; /// Qty limit.
    bool useAmountLimit = 3; /// Use amount limit.
    Decimal amountLimit = 4; /// Amount limit.
    bool useTotalQtyLimit = 5; /// Use total qty limit.
    Decimal totalQtyLimit = 6; /// Total qty limit.
    bool useTotalAmountLimit = 7; /// Use total amount limit.
    Decimal totalAmountLimit = 8; /// Total amount limit.
    bool useNumberOfItemsToDiscount = 9; /// Use number of items to discount.
    int32 numberOfItemsToDiscount = 10; /// Number of items to discount.
}

/**
 * The CampaignDiscountCondition data type.
 */
message CampaignDiscountCondition {
    Guid id = 1; /// Id.
    CampaignDiscount campaignDiscount = 2; /// Campaign discount.
    string campaignConditionHandler = 3; /// Campaign condition handler.
    repeated CampaignDiscountConditionParam campaignDiscountConditionParam = 4; /// Campaign discount condition param.
}

/**
 * The CampaignDiscountItem data type.
 */
message CampaignDiscountItem {
    Guid id = 1; /// Id.
    CampaignDiscount campaignDiscount = 2; /// Campaign discount.
    string itemNumber = 3; /// Item number.
    Decimal discountPercentage = 4; /// Discount percentage.
    Decimal discountAmount = 5; /// Discount amount.
    string currencyCode = 6; /// Currency code.
    string itemToMap = 7; /// Item to map.
    string discountConditionHandler = 8; /// Discount condition handler.
    string itemName = 9; /// Item name.
    bool addItemToOrder = 10; /// Add item to order.
}

/**
 * The CampaignDiscountConditionParam data type.
 */
message CampaignDiscountConditionParam {
    Guid id = 1; /// Id.
    CampaignDiscountCondition campaignDiscountCondition = 2; /// Campaign discount condition.
    string name = 3; /// Name.
    string value = 4; /// Value.
}

/**
 * The CustomerReminder data type.
 */
message CustomerReminder {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    bool sendSms = 3; /// Send sms.
    bool sendEmail = 4; /// Send email.
    repeated CustomerReminderMessage messages = 5; /// Messages.
}

/**
 * The CustomerReminderMessage data type.
 */
message CustomerReminderMessage {
    Guid id = 1; /// Id.
    string messageName = 2; /// Message name.
    /**
     * The MessageType data type.
     */
    enum MessageType {
        Email = 0; /// Email.
        SMS = 1; /// S m s.
    }
    MessageType messageType = 3; /// Message type.
    string subjectTemplateName = 4; /// Subject template name.
    repeated GuidStrDict multilanguageSubjectTemplateContent = 5; /// Multilanguage subject template content.
    string bodyTemplateName = 6; /// Body template name.
    repeated GuidStrDict multilanguageBodyTemplateContent = 7; /// Multilanguage body template content.
}

/**
 * The MailingList data type.
 */
message MailingList {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    int32 status = 3; /// Status.
    string createdByUser = 4; /// Created by user.
    UnixTime createdTime = 5; /// Created time.
    string updatedByUser = 6; /// Updated by user.
    UnixTime lastUpdateTime = 7; /// Last update time.
    repeated MailingListSubscription subscriptions = 8; /// Subscriptions.
}

/**
 * The MailingListSubscription data type.
 */
message MailingListSubscription {
    Guid id = 1; /// Id.
    Guid customerId = 2; /// Customer id.
    int32 status = 3; /// Status.
    string createdByUser = 4; /// Created by user.
    UnixTime createdTime = 5; /// Created time.
    string updatedByUser = 6; /// Updated by user.
    UnixTime lastUpdateTime = 7; /// Last update time.
    MailingList mailingList = 8; /// Mailing list.
}

/**
 * The PerformanceLog data type.
 */
message PerformanceLog {
    Guid id = 1; /// Id.
    string categoryName = 2; /// Category name.
    string counterName = 3; /// Counter name.
    /**
     * The PerformanceCounterType data type.
     */
    enum PerformanceCounterType {
        NumberOfItemsHEX32 = 0; /// Number of items h e x32.
        NumberOfItemsHEX64 = 256; /// Number of items h e x64.
        NumberOfItems32 = 65536; /// Number of items32.
        NumberOfItems64 = 65792; /// Number of items64.
        CounterDelta32 = 4195328; /// Counter delta32.
        CounterDelta64 = 4195584; /// Counter delta64.
        SampleCounter = 4260864; /// Sample counter.
        CountPerTimeInterval32 = 4523008; /// Count per time interval32.
        CountPerTimeInterval64 = 4523264; /// Count per time interval64.
        RateOfCountsPerSecond32 = 272696320; /// Rate of counts per second32.
        RateOfCountsPerSecond64 = 272696576; /// Rate of counts per second64.
        RawFraction = 537003008; /// Raw fraction.
        CounterTimer = 541132032; /// Counter timer.
        Timer100Ns = 542180608; /// Timer100 ns.
        SampleFraction = 549585920; /// Sample fraction.
        CounterTimerInverse = 557909248; /// Counter timer inverse.
        Timer100NsInverse = 558957824; /// Timer100 ns inverse.
        CounterMultiTimer = 574686464; /// Counter multi timer.
        CounterMultiTimer100Ns = 575735040; /// Counter multi timer100 ns.
        CounterMultiTimerInverse = 591463680; /// Counter multi timer inverse.
        CounterMultiTimer100NsInverse = 592512256; /// Counter multi timer100 ns inverse.
        AverageTimer32 = 805438464; /// Average timer32.
        ElapsedTime = 807666944; /// Elapsed time.
        AverageCount64 = 1073874176; /// Average count64.
        SampleBase = 1073939457; /// Sample base.
        AverageBase = 1073939458; /// Average base.
        RawBase = 1073939459; /// Raw base.
        CounterMultiBase = 1107494144; /// Counter multi base.
    }
    PerformanceCounterType counterType = 4; /// Counter type.
    double value = 5; /// Value.
    UnixTime timestamp = 6; /// Timestamp.
}

/**
 * The Message data type.
 */
message Message {
    Guid id = 1; /// Id.
    string subject = 2; /// Subject.
    string body = 3; /// Body.
    /**
     * The MessageLevel data type.
     */
    enum MessageLevel {
        Information = 0; /// Information.
        Confirmation = 1; /// Confirmation.
        Warning = 2; /// Warning.
        Error = 3; /// Error.
        Note = 4; /// Note.
    }
    MessageLevel level = 4; /// Level.
    UnixTime startDate = 5; /// Start date.
    UnixTime endDate = 6; /// End date.
    /**
     * The MessageStatus data type.
     */
    enum MessageStatus {
        NonPublished = 0; /// Non published.
        Published = 1; /// Published.
        Deleted = 2; /// Deleted.
    }
    string updatedBy = 7; /// Updated by.
    repeated Item items = 8; /// Items.
}

/**
 * The ResellerCommissionSummary data type.
 */
message ResellerCommissionSummary {
    Guid resellerCommissionId = 1; /// Reseller commission id.
    Guid resellerId = 2; /// Reseller id.
    string resellerNumber = 3; /// Reseller number.
    string resellerName = 4; /// Reseller name.
    /**
     * The ResellerCommissionStatus data type.
     */
    enum ResellerCommissionStatus {
        Pending = 0; /// Pending.
        PaidOut = 1; /// Paid out.
        PaidOutAsDiscount = 2; /// Paid out as discount.
    }
    ResellerCommissionStatus status = 5; /// Status.
    string currency = 6; /// Currency.
    Guid invoiceId = 7; /// Invoice id.
    string invoiceNumber = 8; /// Invoice number.
    UnixTime invoiceDate = 9; /// Invoice date.
    Decimal invoiceTotal = 10; /// Invoice total.
    Decimal total = 11; /// Total.
    int32 count = 12; /// Count.
    NullableUnixTime payoutDate = 13; /// Payout date.
}

/**
 * The ProvisioningService data type.
 */
message ProvisioningService {
    string friendlyName = 1; /// Friendly name.
    string logicalId = 2; /// Logical id.
    string physicalId = 3; /// Physical id.
    string packageId = 4; /// Package id.
    string name = 5; /// Name.
    repeated ProvisioningServiceProperty properties = 6; /// Properties.
    string provisioningDescription = 7; /// Provisioning description.
    bool disabled = 8; /// Disabled.
    /**
     * The StatusType data type.
     */
    enum StatusType {
        Ok = 0; /// Ok.
        Dirty = 1; /// Dirty.
        Deleted = 2; /// Deleted.
        Unknown = 3; /// Unknown.
    }
    StatusType status = 9; /// Status.
}

/**
 * The ProvisioningServiceProperty data type.
 */
message ProvisioningServiceProperty {
    string propStringValue = 1; /// Prop string value.
    string name = 2; /// Name.
    bool isKey = 3; /// Is key.
    string id = 4; /// Id.
    string propertyType = 5; /// Property type.
    string description = 6; /// Description.
    UnixTime lastChangeTime = 7; /// Last change time.
}

/**
 * The ExecutingMethod data type.
 */
message ExecutingMethod {
    Guid id = 1; /// Id.
    string name = 2; /// Name.
    /**
     * The ExecutingMethodType data type.
     */
    enum ExecutingMethodType {
        ApiCall = 0; /// Api call.
        ScheduledTask = 1; /// Scheduled task.
    }
    ExecutingMethodType type = 3; /// Type.
    UnixTime startDate = 4; /// Start date.
}

/**
 * The StrRepeatedExecutingMethodDict data type.
 */
message StrRepeatedExecutingMethodDict {
    string key = 1; /// Key.
    repeated ExecutingMethod values = 2; /// Values.
}

/**
 *
 */
message SubscriptionTerminationRequest {
	Guid id = 1; /// The request id.
	Guid SubscriptionId = 2; /// The subscription id.
	string reason = 3; /// The reason.
	UnixTime executionTime = 4; /// The execution time.
	UnixTime lastProcessingTime = 5; /// The last processing time.
	/**
	 * Status enum for subscription termination request.
	 */
	enum SubscriptionTerminationRequestStatusType {
		Pending = 0; /// Pending.
		Finished = 1; /// Finished.
		Cancelled = 2; /// Cancelled.
		InProgress = 3; /// In progress.
	}
	SubscriptionTerminationRequestStatusType status = 6; /// The status.
	UnixTime createdTime = 7; /// The created time.
	UnixTime lastChangeTime = 8; /// The last change time.
}
